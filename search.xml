<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2024/03/17/Java%20NIO%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>/2024/03/17/Java%20NIO%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h1 id="Netty框架"><a href="#Netty框架" class="headerlink" title="Netty框架"></a>Netty框架</h1><p>前面我们学习了Java为我们提供的NIO框架，提供使用NIO提供的三大组件，我们就可以编写更加高性能的客户端&#x2F;服务端网络程序了，甚至还可以自行规定一种通信协议进行通信。</p><h2 id="NIO框架存在的问题"><a href="#NIO框架存在的问题" class="headerlink" title="NIO框架存在的问题"></a>NIO框架存在的问题</h2><p>但是之前我们在使用NIO框架的时候，还是发现了一些问题，我们先来盘点一下。</p><h3 id="客户端关闭导致服务端空轮询"><a href="#客户端关闭导致服务端空轮询" class="headerlink" title="客户端关闭导致服务端空轮询"></a>客户端关闭导致服务端空轮询</h3><p>可能在之前的实验中，你发现了这样一个问题：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1z0omdbn1j21q60isq70.jpg" alt="image-20220506214320210"></p><p>当我们的客户端主动与服务端断开连接时，会导致READ事件一直被触发，也就是说<code>selector.select()</code>会直接通过，并且是可读的状态，但是我们发现实际上读到是数据是一个空的（上面的图中在空轮询两次后抛出异常了，也有可能是无限的循环下去）所以这里我们得稍微处理一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable()) &#123;</span><br><span class="line">    <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">    <span class="comment">//这里我们需要判断一下，如果read操作得到的结果是-1，那么说明服务端已经断开连接了</span></span><br><span class="line">    <span class="keyword">if</span>(channel.read(buffer) &lt; <span class="number">0</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端已经断开连接了：&quot;</span>+channel.getRemoteAddress());</span><br><span class="line">        channel.close();   <span class="comment">//直接关闭此通道</span></span><br><span class="line">        <span class="keyword">continue</span>;   <span class="comment">//继续进行选择</span></span><br><span class="line">    &#125;</span><br><span class="line">    buffer.flip();</span><br><span class="line">    System.out.println(<span class="string">&quot;接收到客户端数据：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">    channel.write(ByteBuffer.wrap(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就可以在客户端主动断开时关闭连接了：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1z1qtxd9nj21cy078jrw.jpg" alt="image-20220506222006550"></p><p>当然，除了这种情况可能会导致空轮询之外，实际上还有一种可能，这种情况是NIO框架本身的BUG：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.select();  <span class="comment">//由于底层epoll机制的问题，导致select方法可能会一直返回0，造成无限循环的情况。</span></span><br><span class="line">    System.out.println(<span class="string">&quot;监听到 &quot;</span>+count+<span class="string">&quot; 个事件&quot;</span>);</span><br><span class="line">    Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">    Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br></pre></td></tr></table></figure><p>详细请看JDK官方BUG反馈：</p><ol><li><a href="https://link.jianshu.com/?t=http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6670302">JDK-6670302 : (se) NIO selector wakes up with 0 selected keys infinitely</a></li><li><a href="https://link.jianshu.com/?t=http://bugs.java.com/bugdatabase/view_bug.do?bug_id=6403933">JDK-6403933 : (se) Selector doesn’t block on Selector.select(timeout) (lnx)</a></li></ol><p>本质原因也是因为客户端的主动断开导致：</p><blockquote><p>This is an issue with poll (and epoll) on Linux. If a file descriptor for a connected socket is polled with a request event mask of 0, and if the connection is abruptly terminated (RST) then the poll wakes up with the POLLHUP (and maybe POLLERR) bit set in the returned event set. The implication of this behaviour is that Selector will wakeup and as the interest set for the SocketChannel is 0 it means there aren’t any selected events and the select method returns 0.</p></blockquote><p>这个问题本质是与操作系统有关的，所以JDK一直都认为是操作系统的问题，不应该由自己来处理，所以这个问题在当时的好几个JDK版本都是存在的，这是一个很严重的空转问题，无限制地进行空转操作会导致CPU资源被疯狂消耗。</p><p>不过，这个问题，却被Netty框架巧妙解决了，我们后面再说。</p><h3 id="粘包-拆包问题"><a href="#粘包-拆包问题" class="headerlink" title="粘包&#x2F;拆包问题"></a>粘包&#x2F;拆包问题</h3><p>除了上面的问题之外，我们接着来看下一个问题。</p><p>我们在<code>计算机网络</code>这门课程中学习过，操作系统通过TCP协议发送数据的时候，也会先将数据存放在缓冲区中，而至于什么时候真正地发出这些数据，是由TCP协议来决定的，这是我们无法控制的事情。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1z2lccfu5j21ii0c60tu.jpg" alt="image-20220506224926169"></p><p>也就是说，比如现在我们要发送两个数据包（P1&#x2F;P2），理想情况下，这两个包应该是依次到达服务端，并由服务端正确读取两次数据出来，但是由于上面的机制，可能会出现下面的情况：</p><ol><li>可能P1和P2被合在一起发送给了服务端（粘包现象）</li><li>可能P1和P2的前半部分合在一起发送给了服务端（拆包现象）</li><li>可能P1的前半部分就被单独作为一个部分发给了服务端，后面的和P2一起发给服务端（也是拆包现象）</li></ol><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1z2em84c6j21cm0da3z4.jpg" alt="image-20220506224258538"></p><p>当然，对于这种问题，也有一些比较常见的解决方案：</p><ol><li>消息定长，发送方和接收方规定固定大小的消息长度，例如每个数据包大小固定为200字节，如果不够，空位补空格，只有接收了200个字节之后，作为一个完整的数据包进行处理。</li><li>在每个包的末尾使用固定的分隔符，比如每个数据包末尾都是<code>\r\n</code>，这样就一定需要读取到这样的分隔符才能将前面所有的数据作为一个完整的数据包进行处理。</li><li>将消息分为头部和本体，在头部中保存有当前整个数据包的长度，只有在读到足够长度之后才算是读到了一个完整的数据包。</li></ol><p>这里我们就来演示一下第一种解决方案：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ServerSocketChannel</span> <span class="variable">serverChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">         <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open())&#123;</span><br><span class="line">        serverChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">        serverChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//一个数据包要求必须塞满30个字节</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">30</span>);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.select();</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                ...</span><br><span class="line">                    <span class="keyword">if</span>(buffer.remaining() == <span class="number">0</span>) &#123;</span><br><span class="line">                        buffer.flip();</span><br><span class="line">                        System.out.println(<span class="string">&quot;接收到客户端数据：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">                        buffer.clear();</span><br><span class="line">                    &#125;</span><br><span class="line">                    channel.write(ByteBuffer.wrap((<span class="string">&quot;已收到 &quot;</span>+size+<span class="string">&quot; 字节的数据！&quot;</span>).getBytes()));</span><br><span class="line">                &#125;</span><br><span class="line">               ...</span><br></pre></td></tr></table></figure><p>现在，当我们的客户端发送消息时，如果没有达到30个字节，那么会暂时存储起来，等有30个之后再一次性得到，当然如果数据量超过了30，那么最多也只会读取30个字节，其他的放在下一批：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1zmuamek3j21ou0hmdiq.jpg" alt="image-20220507102955570"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1zmugj9ztj21l005qt9d.jpg" alt="image-20220507103009255"></p><p>这样就可以在一定程度上解决粘包&#x2F;拆包问题了。</p><hr><h2 id="走进Netty框架"><a href="#走进Netty框架" class="headerlink" title="走进Netty框架"></a>走进Netty框架</h2><p>前面我们盘点了一下NIO存在的一些问题，而在Netty框架中，这些问题都被巧妙的解决了。</p><p>Netty是由JBOSS提供的一个开源的java网络编程框架，主要是对java的nio包进行了再次封装。Netty比java原生的nio包提供了更加强大、稳定的功能和易于使用的api。 netty的作者是Trustin Lee，这是一个韩国人，他还开发了另外一个著名的网络编程框架，mina。二者在很多方面都十分相似，它们的线程模型也是基本一致 。不过netty社区的活跃程度要mina高得多。</p><p>Netty实际上应用场景非常多，比如我们的Minecraft游戏服务器：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1znqwr5lqj21wa0pak1k.jpg" alt="image-20220507110120090"></p><p>Java版本的Minecraft服务器就是使用Netty框架作为网络通信的基础，正是得益于Netty框架的高性能，我们才能愉快地和其他的小伙伴一起在服务器里面炸服。</p><p>学习了Netty框架后，说不定你也可以摸索到部分Minecraft插件&#x2F;模组开发的底层细节（太折磨了，UP主高中搞了大半年这玩意）</p><p>当然除了游戏服务器之外，我们微服务之间的远程调用也可以使用Netty来完成，比如Dubbo的RPC框架，包括最新的SpringWebFlux框架，也抛弃了内嵌Tomcat而使用Netty作为通信框架。既然Netty这么强大，那么现在我们就开始Netty的学习吧！</p><p>导包先：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.netty<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>netty-all<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.76.Final<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="ByteBuf介绍"><a href="#ByteBuf介绍" class="headerlink" title="ByteBuf介绍"></a>ByteBuf介绍</h3><p>Netty并没有使用NIO中提供的ByteBuffer来进行数据装载，而是自行定义了一个ByteBuf类。</p><p>那么这个类相比NIO中的ByteBuffer有什么不同之处呢？</p><ul><li>写操作完成后无需进行<code>flip()</code>翻转。</li><li>具有比ByteBuffer更快的响应速度。</li><li>动态扩容。</li></ul><p>首先我们来看看它的内部结构：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractByteBuf</span> <span class="keyword">extends</span> <span class="title class_">ByteBuf</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">    <span class="type">int</span> readerIndex;   <span class="comment">//index被分为了读和写，是两个指针在同时工作</span></span><br><span class="line">    <span class="type">int</span> writerIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> markedReaderIndex;    <span class="comment">//mark操作也分两种</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> markedWriterIndex;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> maxCapacity;    <span class="comment">//最大容量，没错，这玩意能动态扩容</span></span><br></pre></td></tr></table></figure><p>可以看到，读操作和写操作分别由两个指针在进行维护，每写入一次，<code>writerIndex</code>向后移动一位，每读取一次，也是<code>readerIndex</code>向后移动一位，当然<code>readerIndex</code>不能大于<code>writerIndex</code>，这样就不会像NIO中的ByteBuffer那样还需要进行翻转了。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1zwgc0v5ej21fe08m3z1.jpg" alt="image-20220507160235552"></p><p>其中<code>readerIndex</code>和<code>writerIndex</code>之间的部分就是是可读的内容，而<code>writerIndex</code>之后到<code>capacity</code>都是可写的部分。</p><p>我们来实际使用一下看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个初始容量为10的ByteBuf缓冲区，这里的Unpooled是用于快速生成ByteBuf的工具类</span></span><br><span class="line">    <span class="comment">//至于为啥叫Unpooled是池化的意思，ByteBuf有池化和非池化两种，区别在于对内存的复用，我们之后再讨论</span></span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> Unpooled.buffer(<span class="number">10</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;初始状态：&quot;</span>+Arrays.toString(buf.array()));</span><br><span class="line">    buf.writeInt(-<span class="number">888888888</span>);   <span class="comment">//写入一个Int数据</span></span><br><span class="line">    System.out.println(<span class="string">&quot;写入Int后：&quot;</span>+Arrays.toString(buf.array()));</span><br><span class="line">    buf.readShort();   <span class="comment">//无需翻转，直接读取一个short数据出来</span></span><br><span class="line">    System.out.println(<span class="string">&quot;读取Short后：&quot;</span>+Arrays.toString(buf.array()));</span><br><span class="line">    buf.discardReadBytes();   <span class="comment">//丢弃操作，会将当前的可读部分内容丢到最前面，并且读写指针向前移动丢弃的距离</span></span><br><span class="line">    System.out.println(<span class="string">&quot;丢弃之后：&quot;</span>+Arrays.toString(buf.array()));</span><br><span class="line">    buf.clear();    <span class="comment">//清空操作，清空之后读写指针都归零</span></span><br><span class="line">    System.out.println(<span class="string">&quot;清空之后：&quot;</span>+Arrays.toString(buf.array()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过结合断点调试，我们可以观察读写指针的移动情况，更加清楚的认识一下ByteBuf的底层操作。</p><p>我们再来看看划分操作是不是和之前一样的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//我们也可以将一个byte[]直接包装进缓冲区（和NIO是一样的）不过写指针的值一开始就跑到最后去了，但是这玩意是不是只读的</span></span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> Unpooled.wrappedBuffer(<span class="string">&quot;abcdefg&quot;</span>.getBytes());</span><br><span class="line">  <span class="comment">//除了包装，也可以复制数据，copiedBuffer()会完完整整将数据拷贝到一个新的缓冲区中</span></span><br><span class="line">    buf.readByte();   <span class="comment">//读取一个字节</span></span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">slice</span> <span class="operator">=</span> buf.slice();   <span class="comment">//现在读指针位于1，然后进行划分</span></span><br><span class="line"></span><br><span class="line">    System.out.println(slice.arrayOffset());   <span class="comment">//得到划分出来的ByteBuf的偏移地址</span></span><br><span class="line">    System.out.println(Arrays.toString(slice.array()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，划分也是根据当前读取的位置来进行的。</p><p>我们继续来看看它的另一个特性，动态扩容，比如我们申请一个容量为10的缓冲区：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> Unpooled.buffer(<span class="number">10</span>);    <span class="comment">//容量只有10字节</span></span><br><span class="line">    System.out.println(buf.capacity());</span><br><span class="line">  <span class="comment">//直接写一个字符串</span></span><br><span class="line">    buf.writeCharSequence(<span class="string">&quot;卢本伟牛逼！&quot;</span>, StandardCharsets.UTF_8);   <span class="comment">//很明显这么多字已经超过10字节了</span></span><br><span class="line">    System.out.println(buf.capacity());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过结果我们发现，在写入一个超出当前容量的数据时，会进行动态扩容，扩容会从64开始，之后每次触发扩容都会x2，当然如果我们不希望它扩容，可以指定最大容量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//在生成时指定maxCapacity也为10</span></span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> Unpooled.buffer(<span class="number">10</span>, <span class="number">10</span>);</span><br><span class="line">    System.out.println(buf.capacity());</span><br><span class="line">    buf.writeCharSequence(<span class="string">&quot;卢本伟牛逼！&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line">    System.out.println(buf.capacity());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到现在无法再动态扩容了：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1zxvmzz7hj224806sq64.jpg" alt="image-20220507165153381"></p><p>我们接着来看一下缓冲区的三种实现模式：堆缓冲区模式、直接缓冲区模式、复合缓冲区模式。</p><p>堆缓冲区（数组实现）和直接缓冲区（堆外内存实现）不用多说，前面我们在NIO中已经了解过了，我们要创建一个直接缓冲区也很简单，直接调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> Unpooled.directBuffer(<span class="number">10</span>);</span><br><span class="line">    System.out.println(Arrays.toString(buf.array()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同样的不能直接拿到数组，因为底层压根不是数组实现的：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1zxbvl2y3j21h803st9z.jpg" alt="image-20220507163253662"></p><p>我们来看看复合模式，复合模式可以任意地拼凑组合其他缓冲区，比如我们可以：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1zygujz9sj21no0c0abg.jpg" alt="image-20220507171216323"></p><p>这样，如果我们想要对两个缓冲区组合的内容进行操作，我们就不用再单独创建一个新的缓冲区了，而是直接将其进行拼接操作，相当于是作为多个缓冲区组合的视图。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建一个复合缓冲区</span></span><br><span class="line"><span class="type">CompositeByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> Unpooled.compositeBuffer();</span><br><span class="line">buf.addComponent(Unpooled.copiedBuffer(<span class="string">&quot;abc&quot;</span>.getBytes()));</span><br><span class="line">buf.addComponent(Unpooled.copiedBuffer(<span class="string">&quot;def&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; buf.capacity(); i++) &#123;</span><br><span class="line">    System.out.println((<span class="type">char</span>) buf.getByte(i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们也可以正常操作组合后的缓冲区。</p><p>最后我们来看看，池化缓冲区和非池化缓冲区的区别。</p><p>我们研究一下Unpooled工具类中具体是如何创建buffer的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">Unpooled</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ByteBufAllocator ALLOC;  <span class="comment">//实际上内部是有一个ByteBufAllocator对象的</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ByteOrder BIG_ENDIAN;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ByteOrder LITTLE_ENDIAN;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> ByteBuf EMPTY_BUFFER;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> ByteBuf <span class="title function_">buffer</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> ALLOC.heapBuffer();   <span class="comment">//缓冲区的创建操作实际上是依靠ByteBufAllocator来进行的</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  ...</span><br><span class="line">      </span><br><span class="line">    <span class="keyword">static</span> &#123;   <span class="comment">//ALLOC在静态代码块中进行指定，实际上真正的实现类是UnpooledByteBufAllocator</span></span><br><span class="line">        ALLOC = UnpooledByteBufAllocator.DEFAULT;</span><br><span class="line">        BIG_ENDIAN = ByteOrder.BIG_ENDIAN;</span><br><span class="line">        LITTLE_ENDIAN = ByteOrder.LITTLE_ENDIAN;</span><br><span class="line">        EMPTY_BUFFER = ALLOC.buffer(<span class="number">0</span>, <span class="number">0</span>);   <span class="comment">//空缓冲区容量和最大容量都是0</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">assert</span> EMPTY_BUFFER <span class="keyword">instanceof</span> EmptyByteBuf : <span class="string">&quot;EMPTY_BUFFER must be an EmptyByteBuf.&quot;</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们来看看，这个ByteBufAllocator又是个啥，顾名思义，其实就是负责分配缓冲区的。</p><p>它有两个具体实现类：<code>UnpooledByteBufAllocator</code>和<code>PooledByteBufAllocator</code>，一个是非池化缓冲区生成器，还有一个是池化缓冲区生成器，那么池化和非池化有啥区别呢？</p><p>实际上池化缓冲区利用了池化思想，将缓冲区通过设置内存池来进行内存块复用，这样就不用频繁地进行内存的申请，尤其是在使用堆外内存的时候，避免多次重复通过底层<code>malloc()</code>函数系统调用申请内存造成的性能损失。Netty的内存管理机制主要是借鉴Jemalloc内存分配策略，感兴趣的小伙伴可以深入了解一下。</p><p>所以，由于是复用内存空间，我们来看个例子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ByteBufAllocator</span> <span class="variable">allocator</span> <span class="operator">=</span> PooledByteBufAllocator.DEFAULT;</span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> allocator.directBuffer(<span class="number">10</span>);   <span class="comment">//申请一个容量为10的直接缓冲区</span></span><br><span class="line">    buf.writeChar(<span class="string">&#x27;T&#x27;</span>);    <span class="comment">//随便操作操作</span></span><br><span class="line">    System.out.println(buf.readChar());</span><br><span class="line">    buf.release();    <span class="comment">//释放此缓冲区</span></span><br><span class="line"></span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">buf2</span> <span class="operator">=</span> allocator.directBuffer(<span class="number">10</span>);   <span class="comment">//重新再申请一个同样大小的直接缓冲区</span></span><br><span class="line">    System.out.println(buf2 == buf);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，在我们使用完一个缓冲区之后，我们将其进行资源释放，当我们再次申请一个同样大小的缓冲区时，会直接得到之前已经申请好的缓冲区，所以，PooledByteBufAllocator实际上是将ByteBuf实例放入池中在进行复用。</p><h3 id="零拷贝简介"><a href="#零拷贝简介" class="headerlink" title="零拷贝简介"></a>零拷贝简介</h3><p><strong>注意：</strong>此小节作为选学内容，需要掌握<code>操作系统</code>和<code>计算机组成原理</code>才能学习。</p><p>零拷贝是一种I&#x2F;O操作优化技术，可以快速高效地将数据从文件系统移动到网络接口，而不需要将其从内核空间复制到用户空间，首先第一个问题，什么是内核空间，什么又是用户空间呢？</p><p>其实早期操作系统是不区分内核空间和用户空间的，但是应用程序能访问任意内存空间，程序很容易不稳定，常常把系统搞崩溃，比如清除操作系统的内存数据。实际上让应用程序随便访问内存真的太危险了，于是就按照CPU 指令的重要程度对指令进行了分级，指令分为四个级别：Ring0 ~ Ring3，Linux 下只使用了 Ring0 和 Ring3 两个运行级别，进程运行在 Ring3 级别时运行在用户态，指令只访问用户空间，而运行在 Ring0 级别时被称为运行在内核态，可以访问任意内存空间。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h25i6lqr4hj21l80gct9n.jpg" alt="image-20220512122211805"></p><p>比如我们Java中创建一个新的线程，实际上最终是要交给操作系统来为我们进行分配的，而需要操作系统帮助我们完成任务则需要进行系统调用，是内核在进行处理，不是我们自己的程序在处理，这时就相当于我们的程序处于了内核态，而当操作系统底层分配完成，最后到我们Java代码中返回得到线程对象时，又继续由我们的程序进行操作，所以从内核态转换回了用户态。</p><p>而我们的文件操作也是这样，我们实际上也是需要让操作系统帮助我们从磁盘上读取文件数据或是向网络发送数据，比如使用传统IO的情况下，我们要从磁盘上读取文件然后发送到网络上，就会经历以下流程：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h25ify7168j21s60i4n0f.jpg" alt="image-20220512123113806"></p><p>可以看到整个过程中是经历了2次CPU拷贝+2次DMA拷贝，一共四次拷贝，虽然逻辑比较清晰，但是数据老是这样来回进行复制，是不是太浪费时间了点？所以我们就需要寻找一种更好的方式，来实现零拷贝。</p><p>实现零拷贝我们这里演示三种方案：</p><ol><li><p>使用虚拟内存</p><p>现在的操作系统基本都是支持虚拟内存的，我们可以让内核空间和用户空间的虚拟地址指向同一个物理地址，这样就相当于是直接共用了这一块区域，也就谈不上拷贝操作了：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h25iui62e8j21na0i477f.jpg" alt="image-20220512124512936"></p></li><li><p>使用mmap&#x2F;write内存映射</p><p>实际上这种方式就是将内核空间中的缓存直接映射到用户空间缓存，比如我们之前在学习NIO中使用的MappedByteBuffer，就是直接作为映射存在，当我们需要将数据发送到Socket缓冲区时，直接在内核空间中进行操作就行了：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h25iwxop2wj21ky0i0ad1.jpg" alt="image-20220512124732995"></p><p>不过这样还是会出现用户态和内核态的切换，我们得再优化优化。</p></li><li><p>使用sendfile方式</p><p>在Linux2.1开始，引入了sendfile方式来简化操作，我们可以直接告诉内核要把哪个文件数据拷贝拷贝到Socket上，直接在内核空间中一步到位：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h25izbhxnrj21f60hwtb0.jpg" alt="image-20220512124950007"></p><p>比如我们之前在NIO中使用的<code>transferTo()</code>方法，就是利用了这种机制来实现零拷贝的。</p></li></ol><h3 id="Netty工作模型"><a href="#Netty工作模型" class="headerlink" title="Netty工作模型"></a>Netty工作模型</h3><p>前面我们了解了Netty为我们提供的更高级的缓冲区类，我们接着来看看Netty是如何工作的，上一章我们介绍了Reactor模式，而Netty正是以主从Reactor多线程模型为基础，构建出了一套高效的工作模型。</p><p>大致工作模型图如下：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h22hrmmll1j21hg0c040d.jpg" alt="image-20220509215109408"></p><p>可以看到，和我们之前介绍的主从Reactor多线程模型非常类似：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1xgciyet7j21f40cijtp.jpg" alt="image-20220505131410997"></p><p>所有的客户端需要连接到主Reactor完成Accept操作后，其他的操作由从Reactor去完成，这里也是差不多的思想，但是它进行了一些改进，我们来看一下它的设计：</p><ul><li>Netty 抽象出两组线程池BossGroup和WorkerGroup，BossGroup专门负责接受客户端的连接, WorkerGroup专门负读写，就像我们前面说的主从Reactor一样。</li><li>无论是BossGroup还是WorkerGroup，都是使用EventLoop（事件循环，很多系统都采用了事件循环机制，比如前端框架Node.js，事件循环顾名思义，就是一个循环，不断地进行事件通知）来进行事件监听的，整个Netty也是使用事件驱动来运作的，比如当客户端已经准备好读写、连接建立时，都会进行事件通知，说白了就像我们之前写NIO多路复用那样，只不过这里换成EventLoop了而已，它已经帮助我们封装好了一些常用操作，而且我们可以自己添加一些额外的任务，如果有多个EventLoop，会存放在EventLoopGroup中，EventLoopGroup就是BossGroup和WorkerGroup的具体实现。</li><li>在BossGroup之后，会正常将SocketChannel绑定到WorkerGroup中的其中一个EventLoop上，进行后续的读写操作监听。</li></ul><p>前面我们大致了解了一下Netty的工作模型，接着我们来尝试创建一个Netty服务器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//这里我们使用NioEventLoopGroup实现类即可，创建BossGroup和WorkerGroup</span></span><br><span class="line">    <span class="comment">//当然还有EpollEventLoopGroup，但是仅支持Linux，这是Netty基于Linux底层Epoll单独编写的一套本地实现，没有使用NIO那套</span></span><br><span class="line">    <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(), workerGroup = <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line"></span><br><span class="line">    <span class="comment">//创建服务端启动引导类</span></span><br><span class="line">    <span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">    <span class="comment">//可链式，就很棒</span></span><br><span class="line">    bootstrap</span><br><span class="line">            .group(bossGroup, workerGroup)   <span class="comment">//指定事件循环组</span></span><br><span class="line">            .channel(NioServerSocketChannel.class)   <span class="comment">//指定为NIO的ServerSocketChannel</span></span><br><span class="line">            .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;   <span class="comment">//注意，这里的SocketChannel不是我们NIO里面的，是Netty的</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">                    <span class="comment">//获取流水线，当我们需要处理客户端的数据时，实际上是像流水线一样在处理，这个流水线上可以有很多Handler</span></span><br><span class="line">                    channel.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;   <span class="comment">//添加一个Handler，这里使用ChannelInboundHandlerAdapter</span></span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;  <span class="comment">//ctx是上下文，msg是收到的消息，默认以ByteBuf形式（也可以是其他形式，后面再说）</span></span><br><span class="line">                            <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;   <span class="comment">//类型转换一下</span></span><br><span class="line">                            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &gt;&gt; 接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                            <span class="comment">//通过上下文可以直接发送数据回去，注意要writeAndFlush才能让客户端立即收到</span></span><br><span class="line">                            ctx.writeAndFlush(Unpooled.wrappedBuffer(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="comment">//最后绑定端口，启动</span></span><br><span class="line">    bootstrap.bind(<span class="number">8080</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到上面写了很多东西，但是你一定会懵逼，这些新来的东西，都是什么跟什么啊，怎么一个也没看明白？没关系，我们可以暂时先将代码写在这里，具体的各个部分，还请听后面细细道来。</p><p>我们接着编写一个客户端，客户端可以直接使用我们之前的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个新的SocketChannel，一会通过通道进行通信</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> SocketChannel.open(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line">         <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in))&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已连接到服务端！&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;   <span class="comment">//咱给它套个无限循环，这样就能一直发消息了</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要发送给服务端的内容：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(text.isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line">            <span class="comment">//直接向通道中写入数据，真舒服</span></span><br><span class="line">            channel.write(ByteBuffer.wrap(text.getBytes()));</span><br><span class="line">            System.out.println(<span class="string">&quot;已发送！&quot;</span>);</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">            channel.read(buffer);   <span class="comment">//直接从通道中读取数据</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            System.out.println(<span class="string">&quot;收到服务器返回：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过通道正常收发数据即可，这样我们就成功搭建好了一个Netty服务器。</p><h3 id="Channel详解"><a href="#Channel详解" class="headerlink" title="Channel详解"></a>Channel详解</h3><p>在学习NIO时，我们就已经接触到Channel了，我们可以通过通道来进行数据的传输，并且通道支持双向传输。</p><p>而在Netty中，也有对应的Channel类型：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Channel</span> <span class="keyword">extends</span> <span class="title class_">AttributeMap</span>, ChannelOutboundInvoker, Comparable&lt;Channel&gt; &#123;</span><br><span class="line">    ChannelId <span class="title function_">id</span><span class="params">()</span>;   <span class="comment">//通道ID</span></span><br><span class="line">    EventLoop <span class="title function_">eventLoop</span><span class="params">()</span>;   <span class="comment">//获取此通道所属的EventLoop，因为一个Channel在它的生命周期内只能注册到一个EventLoop中</span></span><br><span class="line">    Channel <span class="title function_">parent</span><span class="params">()</span>;   <span class="comment">//Channel是具有层级关系的，这里是返回父Channel</span></span><br><span class="line">    ChannelConfig <span class="title function_">config</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span>;   <span class="comment">//通道当前的相关状态</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isRegistered</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isActive</span><span class="params">()</span>;</span><br><span class="line">    ChannelMetadata <span class="title function_">metadata</span><span class="params">()</span>;   <span class="comment">//通道相关信息</span></span><br><span class="line">    SocketAddress <span class="title function_">localAddress</span><span class="params">()</span>; </span><br><span class="line">    SocketAddress <span class="title function_">remoteAddress</span><span class="params">()</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">closeFuture</span><span class="params">()</span>;  <span class="comment">//关闭通道，但是会用到ChannelFuture，后面说</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isWritable</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">bytesBeforeUnwritable</span><span class="params">()</span>;</span><br><span class="line">    <span class="type">long</span> <span class="title function_">bytesBeforeWritable</span><span class="params">()</span>;</span><br><span class="line">    Unsafe <span class="title function_">unsafe</span><span class="params">()</span>;</span><br><span class="line">    ChannelPipeline <span class="title function_">pipeline</span><span class="params">()</span>;   <span class="comment">//流水线，之后也会说</span></span><br><span class="line">    ByteBufAllocator <span class="title function_">alloc</span><span class="params">()</span>;   <span class="comment">//可以直接从Channel拿到ByteBufAllocator的实例，来分配ByteBuf</span></span><br><span class="line">    Channel <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line">    Channel <span class="title function_">flush</span><span class="params">()</span>;   <span class="comment">//刷新，基操</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，Netty中的Channel相比NIO功能就多得多了。Netty中的Channel主要特点如下：</p><ul><li>所有的IO操作都是异步的，并不是在当前线程同步运行，方法调用之后就直接返回了，那怎么获取操作的结果呢？还记得我们在前面JUC篇教程中学习的Future吗，没错，这里的ChannelFuture也是干这事的。</li></ul><p>我们可以来看一下Channel接口的父接口ChannelOutboundInvoker接口，这里面定义了大量的I&#x2F;O操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChannelOutboundInvoker</span> &#123;   <span class="comment">//通道出站调用（包含大量的网络出站操作，比如写）</span></span><br><span class="line">    ChannelFuture <span class="title function_">bind</span><span class="params">(SocketAddress var1)</span>;  <span class="comment">//Socket绑定、连接、断开、关闭等操作</span></span><br><span class="line">    ChannelFuture <span class="title function_">connect</span><span class="params">(SocketAddress var1)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">connect</span><span class="params">(SocketAddress var1, SocketAddress var2)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">disconnect</span><span class="params">()</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">close</span><span class="params">()</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">deregister</span><span class="params">()</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">bind</span><span class="params">(SocketAddress var1, ChannelPromise var2)</span>;    <span class="comment">//下面这一系列还有附带ChannelPromise的，ChannelPromise我们后面再说，其实就是ChannelFuture的增强版</span></span><br><span class="line">    ChannelFuture <span class="title function_">connect</span><span class="params">(SocketAddress var1, ChannelPromise var2)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">connect</span><span class="params">(SocketAddress var1, SocketAddress var2, ChannelPromise var3)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">disconnect</span><span class="params">(ChannelPromise var1)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">close</span><span class="params">(ChannelPromise var1)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">deregister</span><span class="params">(ChannelPromise var1)</span>;</span><br><span class="line">    ChannelOutboundInvoker <span class="title function_">read</span><span class="params">()</span>;</span><br><span class="line">  </span><br><span class="line">    ChannelFuture <span class="title function_">write</span><span class="params">(Object var1)</span>;    <span class="comment">//可以看到这些常见的写操作，都是返回的ChannelFuture，而不是直接给结果</span></span><br><span class="line">    ChannelFuture <span class="title function_">write</span><span class="params">(Object var1, ChannelPromise var2)</span>;</span><br><span class="line">    ChannelOutboundInvoker <span class="title function_">flush</span><span class="params">()</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">writeAndFlush</span><span class="params">(Object var1, ChannelPromise var2)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">writeAndFlush</span><span class="params">(Object var1)</span>;</span><br><span class="line">  </span><br><span class="line">    ChannelPromise <span class="title function_">newPromise</span><span class="params">()</span>;   <span class="comment">//其他的暂时不提</span></span><br><span class="line">    ChannelProgressivePromise <span class="title function_">newProgressivePromise</span><span class="params">()</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">newSucceededFuture</span><span class="params">()</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">newFailedFuture</span><span class="params">(Throwable var1)</span>;</span><br><span class="line">    ChannelPromise <span class="title function_">voidPromise</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然它还实现了AttributeMap接口，其实有点类似于Session那种感觉，我们可以添加一些属性之类的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">AttributeMap</span> &#123;</span><br><span class="line">    &lt;T&gt; Attribute&lt;T&gt; <span class="title function_">attr</span><span class="params">(AttributeKey&lt;T&gt; var1)</span>;</span><br><span class="line"></span><br><span class="line">    &lt;T&gt; <span class="type">boolean</span> <span class="title function_">hasAttr</span><span class="params">(AttributeKey&lt;T&gt; var1)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们了解了Netty底层的Channel之后，我们接着来看ChannelHandler，既然现在有了通道，那么怎么进行操作呢？我们可以将需要处理的事情放在ChannelHandler中，ChannelHandler充当了所有入站和出站数据的应用程序逻辑的容器，实际上就是我们之前Reactor模式中的Handler，全靠它来处理读写操作。</p><p>不过这里不仅仅是一个简单的ChannelHandler在进行处理，而是一整套流水线，我们之后会介绍ChannelPipeline。</p><p>比如我们上面就是使用了ChannelInboundHandlerAdapter抽象类，它是ChannelInboundHandler接口的实现，用于处理入站数据，可以看到我们实际上就是通过重写对应的方法来进行处理，这些方法会在合适的时间被调用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;  </span><br><span class="line">      <span class="comment">//ctx是上下文，msg是收到的消息，以ByteBuf形式</span></span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;   <span class="comment">//类型转换一下</span></span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &gt;&gt; 接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">//通过上下文可以直接发送数据回去，注意要writeAndFlush才能让客户端立即收到</span></span><br><span class="line">        ctx.writeAndFlush(Unpooled.wrappedBuffer(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>我们先从顶层接口开始看起：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChannelHandler</span> &#123;</span><br><span class="line">  <span class="comment">//当ChannelHandler被添加到流水线中时调用</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handlerAdded</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//当ChannelHandler从流水线中移除时调用</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">handlerRemoved</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/** <span class="doctag">@deprecated</span> 已过时那咱就不管了 */</span></span><br><span class="line">    <span class="meta">@Deprecated</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext var1, Throwable var2)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Inherited</span></span><br><span class="line">    <span class="meta">@Documented</span></span><br><span class="line">    <span class="meta">@Target(&#123;ElementType.TYPE&#125;)</span></span><br><span class="line">    <span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line">    <span class="keyword">public</span> <span class="meta">@interface</span> Sharable &#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>顶层接口的定义比较简单，就只有一些流水线相关的回调方法，我们接着来看下一级：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//ChannelInboundHandler用于处理入站相关事件</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChannelInboundHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelHandler</span> &#123;</span><br><span class="line">  <span class="comment">//当Channel已经注册到自己的EventLoop上时调用，前面我们说了，一个Channel只会注册到一个EventLoop上，注册到EventLoop后，这样才会在发生对应事件时被通知。</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">channelRegistered</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//从EventLoop上取消注册时</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">channelUnregistered</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//当Channel已经处于活跃状态时被调用，此时Channel已经连接/绑定，并且已经就绪</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//跟上面相反，不再活跃了，并且不在连接它的远程节点</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">channelInactive</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//当从Channel读取数据时被调用，可以看到数据被自动包装成了一个Object（默认是ByteBuf）</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext var1, Object var2)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//上一个读取操作完成后调用</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">channelReadComplete</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//暂时不介绍</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext var1, Object var2)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//当Channel的可写状态发生改变时被调用</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">channelWritabilityChanged</span><span class="params">(ChannelHandlerContext var1)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line"><span class="comment">//出现异常时被调用</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext var1, Throwable var2)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而我们上面用到的ChannelInboundHandlerAdapter实际上就是对这些方法实现的抽象类，相比直接用接口，我们可以只重写我们需要的方法，没有重写的方法会默认向流水线下一个ChannelHandler发送。</p><p>我们来测试一下吧：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestChannelHandler</span> <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRegistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;channelRegistered&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelUnregistered</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;channelUnregistered&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;channelActive&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelInactive</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;channelInactive&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">        System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &gt;&gt; 接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="comment">//这次我们就直接使用ctx.alloc()来生成缓冲区</span></span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">back</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">        back.writeCharSequence(<span class="string">&quot;已收到！&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line">        ctx.writeAndFlush(back);</span><br><span class="line">        System.out.println(<span class="string">&quot;channelRead&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;channelReadComplete&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;userEventTriggered&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelWritabilityChanged</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;channelWritabilityChanged&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;exceptionCaught&quot;</span>+cause);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(), workerGroup = <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>();</span><br><span class="line">    <span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">    bootstrap</span><br><span class="line">            .group(bossGroup, workerGroup)</span><br><span class="line">            .channel(NioServerSocketChannel.class)</span><br><span class="line">      <span class="comment">//ChannelInitializer是一个特殊的ChannelHandler，它本身不处理任何出站/入站事件，它的目的仅仅是完成Channel的初始化</span></span><br><span class="line">            .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">                    <span class="comment">//将我们自定义的ChannelHandler添加到流水线</span></span><br><span class="line">                    channel.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">TestChannelHandler</span>());</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    bootstrap.bind(<span class="number">8080</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们启动服务器，让客户端来连接并发送一下数据试试看：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h231vpff1tj21j60900tp.jpg" alt="image-20220510092703319"></p><p>可以看到ChannelInboundHandler的整个生命周期，首先是Channel注册成功，然后才会变成可用状态，接着就差不多可以等待客户端来数据了，当客户端主动断开连接时，会再次触发一次<code>channelReadComplete</code>，然后不可用，最后取消注册。</p><p>我们来测试一下出现异常的情况呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">    System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &gt;&gt; 接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">    <span class="type">ByteBuf</span> <span class="variable">back</span> <span class="operator">=</span> ctx.alloc().buffer();</span><br><span class="line">    back.writeCharSequence(<span class="string">&quot;已收到！&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line">    ctx.writeAndFlush(back);</span><br><span class="line">    System.out.println(<span class="string">&quot;channelRead&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;我是自定义异常1&quot;</span>);  <span class="comment">//弄点异常上去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelReadComplete</span><span class="params">(ChannelHandlerContext ctx)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;channelReadComplete&quot;</span>);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;我是自定义异常2&quot;</span>);   <span class="comment">//弄点异常上去</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;exceptionCaught&quot;</span>+cause);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到发生异常时，会接着调用<code>exceptionCaught</code>方法：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2329bmho8j21g407y75e.jpg" alt="image-20220510094007913"></p><p>与ChannelInboundHandler对应的还有ChannelOutboundHandler用于处理出站相关的操作，这里就不进行演示了。</p><p>我们接着来看看ChannelPipeline，每一个Channel都对应一个ChannelPipeline（在Channel初始化时就被创建了）</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24hpuq1sej219i08wgms.jpg" alt="image-20220511152035030"></p><p>它就像是一条流水线一样，整条流水线上可能会有很多个Handler（包括入站和出站），整条流水线上的两端还有两个默认的处理器（用于一些预置操作和后续操作，比如释放资源等），我们只需要关心如何安排这些自定义的Handler即可，比如我们现在希望创建两个入站ChannelHandler，一个用于接收请求并处理，还有一个用于处理当前接收请求过程中出现的异常：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">.childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;   <span class="comment">//注意，这里的SocketChannel不是我们NIO里面的，是Netty的</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">        channel.pipeline()   <span class="comment">//直接获取pipeline，然后添加两个Handler，注意顺序</span></span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;   <span class="comment">//第一个用于处理消息接收</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                        System.out.println(<span class="string">&quot;接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(<span class="string">&quot;我是异常&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;)</span><br><span class="line">                .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;   <span class="comment">//第二个用于处理异常</span></span><br><span class="line">                    <span class="meta">@Override</span></span><br><span class="line">                    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;我是异常处理：&quot;</span>+cause);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>那么它是如何运作的呢？实际上如果我们不在ChannelInboundHandlerAdapter中重写对应的方法，它会默认传播到流水线的下一个ChannelInboundHandlerAdapter进行处理，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exceptionCaught</span><span class="params">(ChannelHandlerContext ctx, Throwable cause)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    ctx.fireExceptionCaught(cause);   <span class="comment">//通过ChannelHandlerContext来向下传递，ChannelHandlerContext是在Handler添加进Pipeline中时就被自动创建的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如我们现在需要将一个消息在两个Handler中进行处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">    channel.pipeline()   <span class="comment">//直接获取pipeline，然后添加两个Handler</span></span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                    System.out.println(<span class="string">&quot;1接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                    ctx.fireChannelRead(msg);   <span class="comment">//通过ChannelHandlerContext</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                    System.out.println(<span class="string">&quot;2接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接着来看看出站相关操作，我们可以使用ChannelOutboundHandlerAdapter来完成：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">    channel.pipeline()</span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>()&#123;   </span><br><span class="line">              <span class="comment">//注意出栈站操作应该在入站操作的前面，当我们使用ChannelHandlerContext的write方法时，是从流水线的当前位置倒着往前找下一个ChannelOutboundHandlerAdapter，而我们之前使用的ChannelInboundHandlerAdapter是从前往后找下一个，如果我们使用的是Channel的write方法，那么会从整个流水线的最后开始倒着往前找ChannelOutboundHandlerAdapter，一定要注意顺序。</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception &#123;  <span class="comment">//当执行write操作时，会</span></span><br><span class="line">                    System.out.println(msg);   <span class="comment">//write的是啥，这里就是是啥</span></span><br><span class="line">                  <span class="comment">//我们将其转换为ByteBuf，这样才能发送回客户端</span></span><br><span class="line">                    ctx.writeAndFlush(Unpooled.wrappedBuffer(msg.toString().getBytes()));</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                    System.out.println(<span class="string">&quot;1接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                    ctx.fireChannelRead(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                    System.out.println(<span class="string">&quot;2接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                    ctx.writeAndFlush(<span class="string">&quot;不会吧不会吧，不会还有人都看到这里了还没三连吧&quot;</span>);   <span class="comment">//这里可以write任何对象</span></span><br><span class="line">                  <span class="comment">//ctx.channel().writeAndFlush(&quot;啊对对对&quot;); 或是通过Channel进行write也可以</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们来试试看，搞两个出站的Handler，验证一下是不是上面的样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">    channel.pipeline()   <span class="comment">//直接获取pipeline，然后添加两个Handler</span></span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                    System.out.println(<span class="string">&quot;1接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                    ctx.fireChannelRead(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                    System.out.println(<span class="string">&quot;2接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                    ctx.channel().writeAndFlush(<span class="string">&quot;伞兵一号卢本伟&quot;</span>);  <span class="comment">//这里我们使用channel的write</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;1号出站：&quot;</span>+msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;)</span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelOutboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">write</span><span class="params">(ChannelHandlerContext ctx, Object msg, ChannelPromise promise)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;2号出站：&quot;</span>+msg);</span><br><span class="line">                    ctx.write(msg);  <span class="comment">//继续write给其他的出站Handler，不然到这里就断了</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以，出站操作在流水线上是反着来的，整个流水线操作大概流程如下:</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2381nnw6kj21ey0bitam.jpg" alt="image-20220510130021714"></p><p>有关Channel及其处理相关操作，就先讲到这里。</p><h3 id="EventLoop和任务调度"><a href="#EventLoop和任务调度" class="headerlink" title="EventLoop和任务调度"></a>EventLoop和任务调度</h3><p>前面我们讲解了Channel，那么在EventLoop中具体是如何进行调度的呢？实际上我们之前在编写NIO的时候，就是一个while循环在源源不断地等待新的事件，而EventLoop也正是这种思想，它本质就是一个事件等待&#x2F;处理线程。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h2390nmv60j21es0awta1.jpg" alt="image-20220510133359757"></p><p>我们上面使用的就是EventLoopGroup，包含很多个EventLoop，我们每创建一个连接，就需要绑定到一个EventLoop上，之后EventLoop就会开始监听这个连接（只要连接不关闭，一直都是这个EventLoop负责此Channel），而一个EventLoop可以同时监听很多个Channel，实际上就是我们之前学习的Selector罢了。</p><p>当然，EventLoop并不只是用于网络操作的，我们前面所说的EventLoop其实都是NioEventLoop，它是专用于网络通信的，除了网络通信之外，我们也可以使用普通的EventLoop来处理一些其他的事件。</p><p>比如我们现在编写的服务端，虽然结构上和主从Reactor多线程模型差不多，但是我们发现，Handler似乎是和读写操作在一起进行的，而我们之前所说的模型中，Handler是在读写之外的单独线程中进行的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(), workerGroup = <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);  <span class="comment">//线程数先限制一下</span></span><br><span class="line">    <span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">    bootstrap</span><br><span class="line">            .group(bossGroup, workerGroup)   <span class="comment">//指定事件循环组</span></span><br><span class="line">            .channel(NioServerSocketChannel.class)   <span class="comment">//指定为NIO的ServerSocketChannel</span></span><br><span class="line">            .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;   <span class="comment">//注意，这里的SocketChannel不是我们NIO里面的，是Netty的</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">                    channel.pipeline()</span><br><span class="line">                            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                                    System.out.println(<span class="string">&quot;接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                                    Thread.sleep(<span class="number">10000</span>);   <span class="comment">//这里我们直接卡10秒假装在处理任务</span></span><br><span class="line">                                    ctx.writeAndFlush(Unpooled.wrappedBuffer(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    bootstrap.bind(<span class="number">8080</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果在这里卡住了，那么就没办法处理EventLoop绑定的其他Channel了，所以我们这里就创建一个普通的EventLoop来专门处理读写之外的任务：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(), workerGroup = <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);  <span class="comment">//线程数先限制一下</span></span><br><span class="line">    <span class="type">EventLoopGroup</span> <span class="variable">handlerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoopGroup</span>();  <span class="comment">//使用DefaultEventLoop来处理其他任务</span></span><br><span class="line">    <span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">    bootstrap</span><br><span class="line">            .group(bossGroup, workerGroup)</span><br><span class="line">            .channel(NioServerSocketChannel.class)</span><br><span class="line">            .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">                    channel.pipeline()</span><br><span class="line">                            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                                  System.out.println(<span class="string">&quot;接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                                    handlerGroup.submit(() -&gt; &#123;   </span><br><span class="line">                                <span class="comment">//由于继承自ScheduledExecutorService，我们直接提交任务就行了，是不是感觉贼方便</span></span><br><span class="line">                                        <span class="keyword">try</span> &#123;</span><br><span class="line">                                            Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                                        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                                        &#125;</span><br><span class="line">                                        ctx.writeAndFlush(Unpooled.wrappedBuffer(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">                                    &#125;);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    bootstrap.bind(<span class="number">8080</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然我们也可以写成一条流水线：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">EventLoopGroup</span> <span class="variable">bossGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(), workerGroup = <span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>(<span class="number">1</span>);  <span class="comment">//线程数先限制一下</span></span><br><span class="line">    <span class="type">EventLoopGroup</span> <span class="variable">handlerGroup</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultEventLoopGroup</span>();  <span class="comment">//使用DefaultEventLoop来处理其他任务</span></span><br><span class="line">    <span class="type">ServerBootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerBootstrap</span>();</span><br><span class="line">    bootstrap</span><br><span class="line">            .group(bossGroup, workerGroup)</span><br><span class="line">            .channel(NioServerSocketChannel.class)</span><br><span class="line">            .childHandler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">                    channel.pipeline()</span><br><span class="line">                            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                    <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                                    System.out.println(<span class="string">&quot;接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                                    ctx.fireChannelRead(msg);</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;).addLast(handlerGroup, <span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;  <span class="comment">//在添加时，可以直接指定使用哪个EventLoopGroup</span></span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                    <span class="keyword">try</span> &#123;</span><br><span class="line">                                        Thread.sleep(<span class="number">10000</span>);</span><br><span class="line">                                    &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                                        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                                    &#125;</span><br><span class="line">                                    ctx.writeAndFlush(Unpooled.wrappedBuffer(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    bootstrap.bind(<span class="number">8080</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就进一步地将EventLoop利用起来了。</p><p>按照前面服务端的方式，我们来把Netty版本的客户端也给写了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();   <span class="comment">//客户端也是使用Bootstrap来启动</span></span><br><span class="line">    bootstrap</span><br><span class="line">            .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>())   <span class="comment">//客户端就没那么麻烦了，直接一个EventLoop就行，用于处理发回来的数据</span></span><br><span class="line">            .channel(NioSocketChannel.class)   <span class="comment">//客户端肯定就是使用SocketChannel了</span></span><br><span class="line">            .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;   <span class="comment">//这里的数据处理方式和服务端是一样的</span></span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    channel.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;   </span><br><span class="line">                        <span class="meta">@Override</span></span><br><span class="line">                        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                            <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">                            System.out.println(<span class="string">&quot;&gt;&gt; 接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>).channel();  <span class="comment">//连接后拿到对应的Channel对象</span></span><br><span class="line">  <span class="comment">//注意上面连接操作是异步的，调用之后会继续往下走，下面我们就正式编写客户端的数据发送代码了</span></span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in))&#123;    <span class="comment">//还是和之前一样，扫了就发</span></span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;&lt; 请输入要发送给服务端的内容：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(text.isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line">            channel.writeAndFlush(Unpooled.wrappedBuffer(text.getBytes()));  <span class="comment">//通过Channel对象发送数据</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来测试一下吧：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h23b2raotjj21a607u3zd.jpg" alt="image-20220510144513303"></p><h3 id="Future和Promise"><a href="#Future和Promise" class="headerlink" title="Future和Promise"></a>Future和Promise</h3><p>我们接着来看ChannelFuture，前面我们提到，Netty中Channel的相关操作都是异步进行的，并不是在当前线程同步执行，我们不能立即得到执行结果，如果需要得到结果，那么我们就必须要利用到Future。</p><p>我们先来看看ChannelFutuer接口怎么定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ChannelFuture</span> <span class="keyword">extends</span> <span class="title class_">Future</span>&lt;Void&gt; &#123;</span><br><span class="line">    Channel <span class="title function_">channel</span><span class="params">()</span>;    <span class="comment">//我们可以直接获取此任务的Channel</span></span><br><span class="line">    ChannelFuture <span class="title function_">addListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="built_in">super</span> Void&gt;&gt; var1)</span>;  <span class="comment">//当任务完成时，会直接执行GenericFutureListener的任务，注意执行的位置也是在EventLoop中</span></span><br><span class="line">    ChannelFuture <span class="title function_">addListeners</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="built_in">super</span> Void&gt;&gt;... var1)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">removeListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="built_in">super</span> Void&gt;&gt; var1)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">removeListeners</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="built_in">super</span> Void&gt;&gt;... var1)</span>;</span><br><span class="line">    ChannelFuture <span class="title function_">sync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;   <span class="comment">//在当前线程同步等待异步任务完成，任务失败会抛出异常</span></span><br><span class="line">    ChannelFuture <span class="title function_">syncUninterruptibly</span><span class="params">()</span>;   <span class="comment">//同上，但是无法响应中断</span></span><br><span class="line">    ChannelFuture <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;  <span class="comment">//同上，但是任务中断不会抛出异常，需要手动判断</span></span><br><span class="line">    ChannelFuture <span class="title function_">awaitUninterruptibly</span><span class="params">()</span>;    <span class="comment">//不用我说了吧？</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isVoid</span><span class="params">()</span>;   <span class="comment">//返回类型是否为void</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>此接口是继承自Netty中的Future接口的（不是JDK的那个）：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Future</span>&lt;V&gt; <span class="keyword">extends</span> <span class="title class_">java</span>.util.concurrent.Future&lt;V&gt; &#123;   <span class="comment">//再往上才是JDK的Future</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isSuccess</span><span class="params">()</span>;    <span class="comment">//用于判断任务是否执行成功的</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">isCancellable</span><span class="params">()</span>;</span><br><span class="line">    Throwable <span class="title function_">cause</span><span class="params">()</span>;    <span class="comment">//获取导致任务失败的异常</span></span><br><span class="line">    </span><br><span class="line">  ...</span><br><span class="line">    </span><br><span class="line">    V <span class="title function_">getNow</span><span class="params">()</span>;  <span class="comment">//立即获取结果，如果还未产生结果，得到null，不过ChannelFuture定义V为Void，就算完成了获取也是null</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">cancel</span><span class="params">(<span class="type">boolean</span> var1)</span>;    <span class="comment">//取消任务</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Channel的很多操作都是异步完成的，直接返回一个ChannelFuture，比如Channel的write操作，返回的就是一个ChannelFuture对象：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">.addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到客户端发送的数据：&quot;</span>+buf.toString(StandardCharsets.UTF_8));</span><br><span class="line">        <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> ctx.writeAndFlush(Unpooled.wrappedBuffer(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">        System.out.println(<span class="string">&quot;任务完成状态：&quot;</span>+future.isDone());   <span class="comment">//通过ChannelFuture来获取相关信息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>包括我们的服务端启动也是返回的ChannelFuture：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">...</span><br><span class="line">&#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> bootstrap.bind(<span class="number">8080</span>);</span><br><span class="line">    System.out.println(<span class="string">&quot;服务端启动状态：&quot;</span>+future.isDone());</span><br><span class="line">    System.out.println(<span class="string">&quot;我是服务端启动完成之后要做的事情！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，服务端的启动就比较慢了，所以在一开始直接获取状态会返回<code>false</code>，但是这个时候我们又需要等到服务端启动完成之后做一些事情，这个时候该怎么办呢？现在我们就有两种方案了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> bootstrap.bind(<span class="number">8080</span>);</span><br><span class="line">    future.sync();   <span class="comment">//让当前线程同步等待任务完成</span></span><br><span class="line">    System.out.println(<span class="string">&quot;服务端启动状态：&quot;</span>+future.isDone());</span><br><span class="line">    System.out.println(<span class="string">&quot;我是服务端启动完成之后要做的事情！&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>第一种方案是直接让当前线程同步等待异步任务完成，我们可以使用<code>sync()</code>方法，这样当前线程会一直阻塞直到任务结束。第二种方案是添加一个监听器，等待任务完成时通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> bootstrap.bind(<span class="number">8080</span>);</span><br><span class="line"><span class="comment">//直接添加监听器，当任务完成时自动执行，但是注意执行也是异步的，不是在当前线程</span></span><br><span class="line">    future.addListener(f -&gt; System.out.println(<span class="string">&quot;我是服务端启动完成之后要做的事情！&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>包括客户端的关闭，也是异步进行的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span>(<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in))&#123;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;&lt;&lt; 请输入要发送给服务端的内容：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="keyword">if</span>(text.isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span>(text.equals(<span class="string">&quot;exit&quot;</span>)) &#123;   <span class="comment">//输入exit就退出</span></span><br><span class="line">            <span class="type">ChannelFuture</span> <span class="variable">future</span> <span class="operator">=</span> channel.close();</span><br><span class="line">            future.sync();    <span class="comment">//等待Channel完全关闭</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        channel.writeAndFlush(Unpooled.wrappedBuffer(text.getBytes()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    group.shutdownGracefully();   <span class="comment">//优雅退出EventLoop，其实就是把还没发送的数据之类的事情做完，当然也可以shutdownNow立即关闭</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接着来看看Promise接口，它支持手动设定成功和失败的结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//此接口也是继承自Netty中的Future接口</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Promise</span>&lt;V&gt; <span class="keyword">extends</span> <span class="title class_">Future</span>&lt;V&gt; &#123;</span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">setSuccess</span><span class="params">(V var1)</span>;    <span class="comment">//手动设定成功</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">trySuccess</span><span class="params">(V var1)</span>;</span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">setFailure</span><span class="params">(Throwable var1)</span>;  <span class="comment">//手动设定失败</span></span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">tryFailure</span><span class="params">(Throwable var1)</span>;</span><br><span class="line">    <span class="type">boolean</span> <span class="title function_">setUncancellable</span><span class="params">()</span>;</span><br><span class="line"><span class="comment">//这些就和之前的Future是一样的了</span></span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">addListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="built_in">super</span> V&gt;&gt; var1)</span>;</span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">addListeners</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="built_in">super</span> V&gt;&gt;... var1)</span>;</span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">removeListener</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="built_in">super</span> V&gt;&gt; var1)</span>;</span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">removeListeners</span><span class="params">(GenericFutureListener&lt;? extends Future&lt;? <span class="built_in">super</span> V&gt;&gt;... var1)</span>;</span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">await</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">awaitUninterruptibly</span><span class="params">()</span>;</span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">sync</span><span class="params">()</span> <span class="keyword">throws</span> InterruptedException;</span><br><span class="line">    Promise&lt;V&gt; <span class="title function_">syncUninterruptibly</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如我们来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    Promise&lt;String&gt; promise = <span class="keyword">new</span> <span class="title class_">DefaultPromise</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">DefaultEventLoop</span>());</span><br><span class="line">    System.out.println(promise.isSuccess());    <span class="comment">//在一开始肯定不是成功的</span></span><br><span class="line">    promise.setSuccess(<span class="string">&quot;lbwnb&quot;</span>);    <span class="comment">//设定成功</span></span><br><span class="line">    System.out.println(promise.isSuccess());   <span class="comment">//再次获取，可以发现确实成功了</span></span><br><span class="line">    System.out.println(promise.get());    <span class="comment">//获取结果，就是我们刚刚给进去的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到我们可以手动指定成功状态，包括ChannelOutboundInvoker中的一些基本操作，都是支持ChannelPromise的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">.addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">buf</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> buf.toString(StandardCharsets.UTF_8);</span><br><span class="line">        System.out.println(<span class="string">&quot;接收到客户端发送的数据：&quot;</span>+text);</span><br><span class="line">        <span class="type">ChannelPromise</span> <span class="variable">promise</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultChannelPromise</span>(channel);</span><br><span class="line">        System.out.println(promise.isSuccess());</span><br><span class="line">        ctx.writeAndFlush(Unpooled.wrappedBuffer(<span class="string">&quot;已收到！&quot;</span>.getBytes()), promise);</span><br><span class="line">        promise.sync();  <span class="comment">//同步等待一下</span></span><br><span class="line">        System.out.println(promise.isSuccess());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure><p>最后结果就是我们想要的了，当然我们也可以像Future那样添加监听器，当成功时自动通知：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> ExecutionException, InterruptedException &#123;</span><br><span class="line">    Promise&lt;String&gt; promise = <span class="keyword">new</span> <span class="title class_">DefaultPromise</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">DefaultEventLoop</span>()); </span><br><span class="line">    promise.addListener(f -&gt; System.out.println(promise.get()));   <span class="comment">//注意是在上面的DefaultEventLoop执行的</span></span><br><span class="line">    System.out.println(promise.isSuccess());</span><br><span class="line">    promise.setSuccess(<span class="string">&quot;lbwnb&quot;</span>);</span><br><span class="line">    System.out.println(promise.isSuccess());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关Future和Promise就暂时讲解到这里。</p><h3 id="编码器和解码器"><a href="#编码器和解码器" class="headerlink" title="编码器和解码器"></a>编码器和解码器</h3><p>前面我们已经了解了Netty的大部分基础内容，我们接着来看看Netty内置的一些编码器和解码器。</p><p>在前面的学习中，我们的数据发送和接收都是需要以ByteBuf形式传输，但是这样是不是有点太不方便了，咱们能不能参考一下JavaWeb那种搞个Filter，在我们开始处理数据之前，过过滤一次，并在过滤的途中将数据转换成我们想要的类型，也可以将发出的数据进行转换，这就要用到编码解码器了。</p><p>我们先来看看最简的，字符串，如果我们要直接在客户端或是服务端处理字符串，可以直接添加一个字符串解码器到我们的流水线中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">    channel.pipeline()</span><br><span class="line">            <span class="comment">//解码器本质上也算是一种ChannelInboundHandlerAdapter，用于处理入站请求</span></span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>())   <span class="comment">//当客户端发送来的数据只是简单的字符串转换的ByteBuf时，我们直接使用内置的StringDecoder即可转换</span></span><br><span class="line">            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    <span class="comment">//经过StringDecoder转换后，msg直接就是一个字符串，所以打印就行了</span></span><br><span class="line">                    System.out.println(msg);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，使用起来还是非常方便的，我们只需要将其添加到流水线即可，实际上器本质就是一个ChannelInboundHandlerAdapter：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24d0v15dkj21zs0k6ad5.jpg" alt="image-20220511123807650"></p><p>我们看到它是继承自MessageToMessageDecoder，用于将传入的Message转换为另一种类型，我们也可以自行编写一个实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 我们也来搞一个自定义的</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDecoder</span> <span class="keyword">extends</span> <span class="title class_">MessageToMessageDecoder</span>&lt;ByteBuf&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf buf, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据已收到，正在进行解码...&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> buf.toString(StandardCharsets.UTF_8);  <span class="comment">//直接转换为UTF8字符串</span></span><br><span class="line">        list.add(text);   <span class="comment">//解码后需要将解析后的数据丢进List中，如果丢进去多个数据，相当于数据被分成了多个，后面的Handler就需要每个都处理一次</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>运行，可以看到：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24db102gqj214o02qq2x.jpg" alt="image-20220511124755974"></p><p>当然如果我们在List里面丢很多个数据的话：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestDecoder</span> <span class="keyword">extends</span> <span class="title class_">MessageToMessageDecoder</span>&lt;ByteBuf&gt; &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf buf, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;数据已收到，正在进行解码...&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> buf.toString(StandardCharsets.UTF_8);  <span class="comment">//直接转换为UTF8字符串</span></span><br><span class="line">        list.add(text);</span><br><span class="line">        list.add(text+<span class="string">&quot;2&quot;</span>);</span><br><span class="line">        list.add(text+<span class="string">&#x27;3&#x27;</span>);   <span class="comment">//一条消息被解码成三条消息</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24dcpcdxoj215e04eq2z.jpg" alt="image-20220511124933026"></p><p>可以看到，后面的Handler会依次对三条数据都进行处理，当然，除了MessageToMessageDecoder之外，还有其他类型的解码器，比如ByteToMessageDecoder等，这里就不一一介绍了，Netty内置了很多的解码器实现来方便我们开发，比如HTTP（下一节介绍），SMTP、MQTT等，以及我们常用的Redis、Memcached、JSON等数据包。</p><p>当然，有了解码器处理发来的数据，那发出去的数据肯定也是需要被处理的，所以编码器就出现了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        <span class="comment">//解码器本质上也算是一种ChannelInboundHandlerAdapter，用于处理入站请求</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>())</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到客户端的数据：&quot;</span>+msg);</span><br><span class="line">                ctx.channel().writeAndFlush(<span class="string">&quot;可以，不跟你多BB&quot;</span>);  <span class="comment">//直接发字符串回去</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>());  <span class="comment">//使用内置的StringEncoder可以直接将出站的字符串数据编码成ByteBuf</span></span><br></pre></td></tr></table></figure><p>和上面的StringDecoder一样，StringEncoder本质上就是一个ChannelOutboundHandlerAdapter：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24domthrqj21qe0i8mzp.jpg" alt="image-20220511130100984"></p><p>是不是感觉前面学习的Handler和Pipeline突然就变得有用了，直接一条线把数据处理安排得明明白白啊。</p><p>现在我们把客户端也改成使用编码、解码器的样子：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Bootstrap</span> <span class="variable">bootstrap</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Bootstrap</span>();</span><br><span class="line">    bootstrap</span><br><span class="line">            .group(<span class="keyword">new</span> <span class="title class_">NioEventLoopGroup</span>())</span><br><span class="line">            .channel(NioSocketChannel.class)</span><br><span class="line">            .handler(<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;SocketChannel&gt;() &#123;</span><br><span class="line">                <span class="meta">@Override</span></span><br><span class="line">                <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(SocketChannel channel)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                    channel.pipeline()</span><br><span class="line">                            .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>())  <span class="comment">//解码器安排</span></span><br><span class="line">                            .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">                                <span class="meta">@Override</span></span><br><span class="line">                                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                                    System.out.println(<span class="string">&quot;&gt;&gt; 接收到客户端发送的数据：&quot;</span> + msg);  <span class="comment">//直接接收字符串</span></span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;)</span><br><span class="line">                            .addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>());  <span class="comment">//编码器安排</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> bootstrap.connect(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>).channel();</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in))&#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;&lt;&lt; 请输入要发送给服务端的内容：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            <span class="keyword">if</span>(text.isEmpty()) <span class="keyword">continue</span>;</span><br><span class="line">            channel.writeAndFlush(text);  <span class="comment">//直接发送字符串就行</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样我们的代码量又蹭蹭的减少了很多：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24dtwy88pj214y04ojrv.jpg" alt="image-20220511130605337"></p><p>当然，除了编码器和解码器之外，还有编解码器。？？缝合怪？？</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24dxlf02nj21qu0fyn0h.jpg" alt="image-20220511130937624"></p><p>可以看到它是既继承了ChannelInboundHandlerAdapter也实现了ChannelOutboundHandler接口，又能处理出站也能处理入站请求，实际上就是将之前的给组合到一起了，比如我们也可以实现一个缝合在一起的StringCodec类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//需要指定两个泛型，第一个是入站的消息类型，还有一个是出站的消息类型，出站是String类型，我们要转成ByteBuf</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringCodec</span> <span class="keyword">extends</span> <span class="title class_">MessageToMessageCodec</span>&lt;ByteBuf, String&gt; &#123;</span><br><span class="line">  </span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext channelHandlerContext, String buf, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理出站数据...&quot;</span>);</span><br><span class="line">        list.add(Unpooled.wrappedBuffer(buf.getBytes()));   <span class="comment">//同样的，添加的数量就是出站的消息数量</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">decode</span><span class="params">(ChannelHandlerContext channelHandlerContext, ByteBuf buf, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在处理入站数据...&quot;</span>);</span><br><span class="line">        list.add(buf.toString(StandardCharsets.UTF_8));  <span class="comment">//和之前一样，直接一行解决</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到实际上就是需要我们同时去实现编码和解码方法，继承MessageToMessageCodec类即可。</p><p>当然，如果整条流水线上有很多个解码器或是编码器，那么也可以多次进行编码或是解码，比如：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StringToStringEncoder</span> <span class="keyword">extends</span> <span class="title class_">MessageToMessageEncoder</span>&lt;String&gt; &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">encode</span><span class="params">(ChannelHandlerContext channelHandlerContext, String s, List&lt;Object&gt; list)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;我是预处理编码器，就要皮这一下。&quot;</span>);</span><br><span class="line">        list.add(<span class="string">&quot;[已处理] &quot;</span>+s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        <span class="comment">//解码器本质上也算是一种ChannelInboundHandlerAdapter，用于处理入站请求</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>())</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到客户端的数据：&quot;</span>+msg);</span><br><span class="line">                ctx.channel().writeAndFlush(<span class="string">&quot;可以，不跟你多BB&quot;</span>);  <span class="comment">//直接发字符串回去</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>())    <span class="comment">//最后再转成ByteBuf</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringToStringEncoder</span>());  <span class="comment">//先从我们自定义的开始</span></span><br></pre></td></tr></table></figure><p>可以看到，数据在流水线上一层一层处理最后再回到的客户端：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24ej8u6cqj219m04cq3f.jpg" alt="image-20220511133025492"></p><p>我们在一开始提到的粘包&#x2F;拆包问题，也可以使用一个解码器解决：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">FixedLengthFrameDecoder</span>(<span class="number">10</span>))  </span><br><span class="line">        <span class="comment">//第一种解决方案，使用定长数据包，每个数据包都要是指定长度</span></span><br><span class="line">  ...</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">DelimiterBasedFrameDecoder</span>(<span class="number">1024</span>, Unpooled.wrappedBuffer(<span class="string">&quot;!&quot;</span>.getBytes())))</span><br><span class="line">        <span class="comment">//第二种，就是指定一个特定的分隔符，比如我们这里以感叹号为分隔符</span></span><br><span class="line">  <span class="comment">//在收到分隔符之前的所有数据，都作为同一个数据包的内容</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">LengthFieldBasedFrameDecoder</span>(<span class="number">1024</span>, <span class="number">0</span>, <span class="number">4</span>))</span><br><span class="line">        <span class="comment">//第三种方案，就是在头部添加长度信息，来确定当前发送的数据包具体长度是多少</span></span><br><span class="line">        <span class="comment">//offset是从哪里开始，length是长度信息占多少字节，这里是从0开始读4个字节表示数据包长度</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>())</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>())</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;&gt;&gt; 接收到客户端发送的数据：&quot;</span> + msg);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">LengthFieldPrepender</span>(<span class="number">4</span>))   <span class="comment">//客户端在发送时也需要将长度拼到前面去</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>());</span><br></pre></td></tr></table></figure><p>有关编码器和解码器的内容就先介绍到这里。</p><h3 id="实现HTTP协议通信"><a href="#实现HTTP协议通信" class="headerlink" title="实现HTTP协议通信"></a>实现HTTP协议通信</h3><p>前面我们介绍了Netty为我们提供的编码器和解码器，这里我们就来使用一下支持HTTP协议的编码器和解码器。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpRequestDecoder</span>())   <span class="comment">//Http请求解码器</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到客户端的数据：&quot;</span>+msg.getClass());  <span class="comment">//看看是个啥类型</span></span><br><span class="line">              <span class="comment">//收到浏览器请求后，我们需要给一个响应回去</span></span><br><span class="line">                <span class="type">FullHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultFullHttpResponse</span>(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);  <span class="comment">//HTTP版本为1.1，状态码就OK（200）即可</span></span><br><span class="line">              <span class="comment">//直接向响应内容中写入数据</span></span><br><span class="line">                response.content().writeCharSequence(<span class="string">&quot;Hello World!&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line">                ctx.channel().writeAndFlush(response);   <span class="comment">//发送响应</span></span><br><span class="line">                ctx.channel().close();   <span class="comment">//HTTP请求是一次性的，所以记得关闭</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpResponseEncoder</span>());   <span class="comment">//响应记得也要编码后发送哦</span></span><br></pre></td></tr></table></figure><p>现在我们用浏览器访问一下我们的服务器吧：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24fzjztiyj22ac0k2gox.jpg" alt="image-20220511142040941"></p><p>可以看到浏览器成功接收到服务器响应，然后控制台打印了以下类型：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24g08odmrj21e604kmyh.jpg" alt="image-20220511142121619"></p><p>可以看到一次请求是一个DefaultHttpRequest+LastHttpContent$1，这里有两组是因为浏览器请求了一个地址之后紧接着请求了我们网站的favicon图标。</p><p>这样把数据分开处理肯定是不行的，要是直接整合成一个多好，安排：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpRequestDecoder</span>())   <span class="comment">//Http请求解码器</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpObjectAggregator</span>(Integer.MAX_VALUE))  <span class="comment">//搞一个聚合器，将内容聚合为一个FullHttpRequest，参数是最大内容长度</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">FullHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> (FullHttpRequest) msg;</span><br><span class="line">                System.out.println(<span class="string">&quot;浏览器请求路径：&quot;</span>+request.uri());  <span class="comment">//直接获取请求相关信息</span></span><br><span class="line">                <span class="type">FullHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultFullHttpResponse</span>(HttpVersion.HTTP_1_1, HttpResponseStatus.OK);</span><br><span class="line">                response.content().writeCharSequence(<span class="string">&quot;Hello World!&quot;</span>, StandardCharsets.UTF_8);</span><br><span class="line">                ctx.channel().writeAndFlush(response);</span><br><span class="line">                ctx.channel().close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpResponseEncoder</span>());</span><br></pre></td></tr></table></figure><p>再次访问，我们发现可以正常读取请求路径了：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24gcntjzbj210c02e74b.jpg" alt="image-20220511143318500"></p><p>我们来试试看搞个静态页面代理玩玩，拿出我们的陈年老模板：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24gjzm12aj214i0k842b.jpg" alt="image-20220511144020424"></p><p>全部放进Resource文件夹，一会根据浏览器的请求路径，我们就可以返回对应的页面了，先安排一个解析器，用于解析路径然后将静态页面的内容返回：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">PageResolver</span> &#123;</span><br><span class="line"><span class="comment">//直接单例模式</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">PageResolver</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PageResolver</span>();</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">PageResolver</span><span class="params">()</span>&#123;&#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> PageResolver <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//请求路径给进来，接着我们需要将页面拿到，然后转换成响应数据包发回去</span></span><br><span class="line">    <span class="keyword">public</span> FullHttpResponse <span class="title function_">resolveResource</span><span class="params">(String path)</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(path.startsWith(<span class="string">&quot;/&quot;</span>))  &#123;  <span class="comment">//判断一下是不是正常的路径请求</span></span><br><span class="line">            path = path.equals(<span class="string">&quot;/&quot;</span>) ? <span class="string">&quot;index.html&quot;</span> : path.substring(<span class="number">1</span>);    <span class="comment">//如果是直接请求根路径，那就默认返回index页面，否则就该返回什么路径的文件就返回什么</span></span><br><span class="line">            <span class="keyword">try</span>(<span class="type">InputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="built_in">this</span>.getClass().getClassLoader().getResourceAsStream(path)) &#123;</span><br><span class="line">                <span class="keyword">if</span>(stream != <span class="literal">null</span>) &#123;   <span class="comment">//拿到文件输入流之后，才可以返回页面</span></span><br><span class="line">                    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[stream.available()];</span><br><span class="line">                    stream.read(bytes);</span><br><span class="line">                    <span class="keyword">return</span> <span class="built_in">this</span>.packet(HttpResponseStatus.OK, bytes);  <span class="comment">//数据先读出来，然后交给下面的方法打包</span></span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">      <span class="comment">//其他情况一律返回404</span></span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.packet(HttpResponseStatus.NOT_FOUND, <span class="string">&quot;404 Not Found!&quot;</span>.getBytes());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//包装成FullHttpResponse，把状态码和数据写进去</span></span><br><span class="line">    <span class="keyword">private</span> FullHttpResponse <span class="title function_">packet</span><span class="params">(HttpResponseStatus status, <span class="type">byte</span>[] data)</span>&#123;</span><br><span class="line">        <span class="type">FullHttpResponse</span> <span class="variable">response</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultFullHttpResponse</span>(HttpVersion.HTTP_1_1, status);</span><br><span class="line">        response.content().writeBytes(data);</span><br><span class="line">        <span class="keyword">return</span> response;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们的静态资源解析就写好了，接着：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpRequestDecoder</span>())   <span class="comment">//Http请求解码器</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpObjectAggregator</span>(Integer.MAX_VALUE))  <span class="comment">//搞一个聚合器，将内容聚合为一个FullHttpRequest，参数是最大内容长度</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">FullHttpRequest</span> <span class="variable">request</span> <span class="operator">=</span> (FullHttpRequest) msg;</span><br><span class="line">              <span class="comment">//请求进来了直接走解析</span></span><br><span class="line">                <span class="type">PageResolver</span> <span class="variable">resolver</span> <span class="operator">=</span> PageResolver.getInstance();</span><br><span class="line">                ctx.channel().writeAndFlush(resolver.resolveResource(request.uri()));</span><br><span class="line">                ctx.channel().close();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpResponseEncoder</span>());</span><br></pre></td></tr></table></figure><p>现在我们启动服务器来试试看吧：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h24hbzfrozj21dy0u0jw2.jpg" alt="image-20220511150714100"></p><p>可以看到页面可以正常展示了，是不是有Tomcat哪味了。</p><h3 id="其他内置Handler介绍"><a href="#其他内置Handler介绍" class="headerlink" title="其他内置Handler介绍"></a>其他内置Handler介绍</h3><p>Netty也为我们内置了一些其他比较好用的Handler，比如我们要打印日志：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpRequestDecoder</span>())</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpObjectAggregator</span>(Integer.MAX_VALUE))</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">LoggingHandler</span>(LogLevel.INFO))   <span class="comment">//添加一个日志Handler，在请求到来时会自动打印相关日志</span></span><br><span class="line">        ...</span><br></pre></td></tr></table></figure><p>日志级别我们选择INFO，现在我们用浏览器访问一下：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h25j8p1xc2j22ig0sutk2.jpg" alt="image-20220512125851248"></p><p>可以看到每次请求的内容和详细信息都会在日志中出现，包括详细的数据包解析过程，请求头信息都是完整地打印在控制台上的。</p><p>我们也可以使用Handler对IP地址进行过滤，比如我们不希望某些IP地址连接我们的服务器：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpRequestDecoder</span>())</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">HttpObjectAggregator</span>(Integer.MAX_VALUE))</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">RuleBasedIpFilter</span>(<span class="keyword">new</span> <span class="title class_">IpFilterRule</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">matches</span><span class="params">(InetSocketAddress inetSocketAddress)</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> !inetSocketAddress.getHostName().equals(<span class="string">&quot;127.0.0.1&quot;</span>);  </span><br><span class="line">              <span class="comment">//进行匹配，返回false表示匹配失败</span></span><br><span class="line">              <span class="comment">//如果匹配失败，那么会根据下面的类型决定该干什么，比如我们这里判断是不是本地访问的，如果是那就拒绝</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> IpFilterRuleType <span class="title function_">ruleType</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> IpFilterRuleType.REJECT;   <span class="comment">//类型，REJECT表示拒绝连接，ACCEPT表示允许连接</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;))</span><br></pre></td></tr></table></figure><p>现在我们浏览器访问一下看看：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h25jjq53pvj21r40m8abh.jpg" alt="image-20220512130926968"></p><p>我们也可以对那些长期处于空闲的进行处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">channel.pipeline()</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringDecoder</span>())</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">IdleStateHandler</span>(<span class="number">10</span>, <span class="number">10</span>, <span class="number">0</span>))  <span class="comment">//IdleStateHandler能够侦测连接空闲状态</span></span><br><span class="line">        <span class="comment">//第一个参数表示连接多少秒没有读操作时触发事件，第二个是写操作，第三个是读写操作都算，0表示禁用</span></span><br><span class="line">        <span class="comment">//事件需要在ChannelInboundHandlerAdapter中进行监听处理</span></span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">ChannelInboundHandlerAdapter</span>()&#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                System.out.println(<span class="string">&quot;收到客户端数据：&quot;</span>+msg);</span><br><span class="line">                ctx.channel().writeAndFlush(<span class="string">&quot;已收到！&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">userEventTriggered</span><span class="params">(ChannelHandlerContext ctx, Object evt)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="comment">//没想到吧，这个方法原来是在这个时候用的</span></span><br><span class="line">                <span class="keyword">if</span>(evt <span class="keyword">instanceof</span> IdleStateEvent) &#123;</span><br><span class="line">                    <span class="type">IdleStateEvent</span> <span class="variable">event</span> <span class="operator">=</span> (IdleStateEvent) evt;</span><br><span class="line">                    <span class="keyword">if</span>(event.state() == IdleState.WRITER_IDLE) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;好久都没写了，看视频的你真的有认真在跟着敲吗&quot;</span>);</span><br><span class="line">                    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(event.state() == IdleState.READER_IDLE) &#123;</span><br><span class="line">                        System.out.println(<span class="string">&quot;已经很久很久没有读事件发生了，好寂寞&quot;</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">        .addLast(<span class="keyword">new</span> <span class="title class_">StringEncoder</span>());</span><br></pre></td></tr></table></figure><p>可以看到，当我们超过一段时间不发送数据时，就会这样：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h25jteal4rj21eo07qabh.jpg" alt="image-20220512131845296"></p><p>通过这种机制，我们就可以直接关掉那些占着茅坑不拉屎的连接。</p><h3 id="启动流程源码解读"><a href="#启动流程源码解读" class="headerlink" title="启动流程源码解读"></a>启动流程源码解读</h3><p>前面我们完成了对Netty基本功能的讲解，我们最后就来看一下，Netty到底是如何启动以及进行数据处理的。</p><p>首先我们知道，整个服务端是在bind之后启动的，那么我们就从这里开始下手，不多BB直接上源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ChannelFuture <span class="title function_">bind</span><span class="params">(<span class="type">int</span> inetPort)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(inetPort));   <span class="comment">//转换成InetSocketAddress对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>进来之后发现是调用的其他绑定方法，继续：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ChannelFuture <span class="title function_">bind</span><span class="params">(SocketAddress localAddress)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.validate();   <span class="comment">//再次验证一下，看看EventLoopGroup和Channel指定了没</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.doBind((SocketAddress)ObjectUtil.checkNotNull(localAddress, <span class="string">&quot;localAddress&quot;</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们继续往下看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ChannelFuture <span class="title function_">doBind</span><span class="params">(<span class="keyword">final</span> SocketAddress localAddress)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ChannelFuture</span> <span class="variable">regFuture</span> <span class="operator">=</span> <span class="built_in">this</span>.initAndRegister();   <span class="comment">//上来第一句初始化然后注册</span></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们看看是怎么注册的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> ChannelFuture <span class="title function_">initAndRegister</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        channel = <span class="built_in">this</span>.channelFactory.newChannel();    <span class="comment">//通过channelFactory创建新的Channel，实际上就是我们在一开始设定的NioServerSocketChannel</span></span><br><span class="line">        <span class="built_in">this</span>.init(channel);    <span class="comment">//接着对创建好的NioServerSocketChannel进行初始化</span></span><br><span class="line">    ...</span><br><span class="line"></span><br><span class="line">    <span class="type">ChannelFuture</span> <span class="variable">regFuture</span> <span class="operator">=</span> <span class="built_in">this</span>.config().group().register(channel); <span class="comment">//将通道注册到bossGroup中的一个EventLoop中</span></span><br><span class="line">    ...</span><br><span class="line">    <span class="keyword">return</span> regFuture;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看是如何对创建好的ServerSocketChannel进行初始化的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">void</span> <span class="title function_">init</span><span class="params">(Channel channel)</span> &#123;</span><br><span class="line">    setChannelOptions(channel, <span class="built_in">this</span>.newOptionsArray(), logger);</span><br><span class="line">    setAttributes(channel, <span class="built_in">this</span>.newAttributesArray());</span><br><span class="line">    <span class="type">ChannelPipeline</span> <span class="variable">p</span> <span class="operator">=</span> channel.pipeline();</span><br><span class="line">    ...</span><br><span class="line">    <span class="comment">//在流水线上添加一个Handler，在Handler初始化的时候向EventLoop中提交一个任务，将ServerBootstrapAcceptor添加到流水线上</span></span><br><span class="line">    <span class="comment">//这样我们的ServerSocketChannel在客户端连接时就能Accept了</span></span><br><span class="line">    p.addLast(<span class="keyword">new</span> <span class="title class_">ChannelHandler</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ChannelInitializer</span>&lt;Channel&gt;() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">initChannel</span><span class="params">(<span class="keyword">final</span> Channel ch)</span> &#123;</span><br><span class="line">            <span class="keyword">final</span> <span class="type">ChannelPipeline</span> <span class="variable">pipeline</span> <span class="operator">=</span> ch.pipeline();</span><br><span class="line">            <span class="type">ChannelHandler</span> <span class="variable">handler</span> <span class="operator">=</span> ServerBootstrap.<span class="built_in">this</span>.config.handler();</span><br><span class="line">            <span class="keyword">if</span> (handler != <span class="literal">null</span>) &#123;</span><br><span class="line">                pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ChannelHandler</span>[]&#123;handler&#125;);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            ch.eventLoop().execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">                <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                  <span class="comment">//这里提交一个任务，将ServerBootstrapAcceptor添加到ServerSocketChannel的pipeline中</span></span><br><span class="line">                    pipeline.addLast(<span class="keyword">new</span> <span class="title class_">ChannelHandler</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ServerBootstrapAcceptor</span>(ch, currentChildGroup, currentChildHandler, currentChildOptions, currentChildAttrs)&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;&#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看一下，ServerBootstrapAcceptor怎么处理的，直接看到它的<code>channelRead</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//当底层NIO的ServerSocketChannel的Selector有OP_ACCEPT事件到达时，NioEventLoop会接收客户端连接，创建SocketChannel，并触发channelRead回调</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span> &#123;</span><br><span class="line">  <span class="comment">//此时msg就是Accept连接创建之后的Channel对象</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">child</span> <span class="operator">=</span> (Channel)msg;</span><br><span class="line">  <span class="comment">//这里直接将我们之前编写的childHandler添加到新创建的客户端连接的流水线中（是不是感觉突然就通了）</span></span><br><span class="line">    child.pipeline().addLast(<span class="keyword">new</span> <span class="title class_">ChannelHandler</span>[]&#123;<span class="built_in">this</span>.childHandler&#125;);</span><br><span class="line">    AbstractBootstrap.setChannelOptions(child, <span class="built_in">this</span>.childOptions, ServerBootstrap.logger);</span><br><span class="line">    AbstractBootstrap.setAttributes(child, <span class="built_in">this</span>.childAttrs);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//直接向workGroup中的一个EventLoop注册新创建好的客户端连接Channel，等待读写事件</span></span><br><span class="line">        <span class="built_in">this</span>.childGroup.register(child).addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">          <span class="comment">//异步操作完成后，如果没有注册成功，就强制关闭这个Channel</span></span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="keyword">if</span> (!future.isSuccess()) &#123;</span><br><span class="line">                    ServerBootstrap.ServerBootstrapAcceptor.forceClose(child, future.cause());</span><br><span class="line">                ...</span><br></pre></td></tr></table></figure><p>所以，实际上就是我们之前讲解的主从Reactor多线程模型，只要前面理解了，这里其实很好推断。</p><p>初始化完成之后，我们来看看注册，在之前NIO阶段我们也是需要将Channel注册到对应的Selector才可以开始选择：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ChannelFuture <span class="title function_">register</span><span class="params">(Channel channel)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.register((ChannelPromise)(<span class="keyword">new</span> <span class="title class_">DefaultChannelPromise</span>(channel, <span class="built_in">this</span>)));  <span class="comment">//转换成ChannelPromise继续</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> ChannelFuture <span class="title function_">register</span><span class="params">(ChannelPromise promise)</span> &#123;</span><br><span class="line">    ObjectUtil.checkNotNull(promise, <span class="string">&quot;promise&quot;</span>);</span><br><span class="line">    promise.channel().unsafe().register(<span class="built_in">this</span>, promise);   <span class="comment">//调用Channel的Unsafe接口实现进行注册</span></span><br><span class="line">    <span class="keyword">return</span> promise;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续向下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">(EventLoop eventLoop, <span class="keyword">final</span> ChannelPromise promise)</span> &#123;</span><br><span class="line">    ...</span><br><span class="line">        AbstractChannel.<span class="built_in">this</span>.eventLoop = eventLoop;</span><br><span class="line">        <span class="keyword">if</span> (eventLoop.inEventLoop()) &#123;</span><br><span class="line">            <span class="built_in">this</span>.register0(promise);    <span class="comment">//这里是继续调用register0方法在进行注册</span></span><br><span class="line">        &#125;</span><br><span class="line">  ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>继续：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register0</span><span class="params">(ChannelPromise promise)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line"></span><br><span class="line">        <span class="type">boolean</span> <span class="variable">firstRegistration</span> <span class="operator">=</span> <span class="built_in">this</span>.neverRegistered;</span><br><span class="line">        AbstractChannel.<span class="built_in">this</span>.doRegister();    <span class="comment">//这里开始执行AbstractNioChannel中的doRegister方法进行注册</span></span><br><span class="line">      AbstractChannel.<span class="built_in">this</span>.registered = <span class="literal">true</span>;</span><br><span class="line">        AbstractChannel.<span class="built_in">this</span>.pipeline.invokeHandlerAddedIfNeeded();</span><br><span class="line">        <span class="built_in">this</span>.safeSetSuccess(promise);</span><br><span class="line">      <span class="keyword">if</span> (AbstractChannel.<span class="built_in">this</span>.isActive()) &#123;</span><br><span class="line">            <span class="keyword">if</span> (firstRegistration) &#123;</span><br><span class="line">                AbstractChannel.<span class="built_in">this</span>.pipeline.fireChannelActive();   <span class="comment">//这里是关键</span></span><br><span class="line">            &#125; <span class="keyword">else</span> <span class="keyword">if</span> (AbstractChannel.<span class="built_in">this</span>.config().isAutoRead()) &#123;</span><br><span class="line">                <span class="built_in">this</span>.beginRead();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>来到最后一级：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doRegister</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">selected</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="comment">//可以看到在这里终于是真正的进行了注册，javaChannel()得到NIO的Channel对象，然后调用register方法</span></span><br><span class="line">          <span class="comment">//这里就和我们之前NIO一样了，将Channel注册到Selector中，可以看到Selector也是EventLoop中的</span></span><br><span class="line">          <span class="comment">//但是注意，这里的ops参数是0，也就是不监听任何事件</span></span><br><span class="line">            <span class="built_in">this</span>.selectionKey = <span class="built_in">this</span>.javaChannel().register(<span class="built_in">this</span>.eventLoop().unwrappedSelector(), <span class="number">0</span>, <span class="built_in">this</span>);</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们回到上一级，在doRegister完成之后，会拿到selectionKey，但是注意这时还没有监听任何事件，我们接着看到下面的fireChannelActive方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> ChannelPipeline <span class="title function_">fireChannelActive</span><span class="params">()</span> &#123;</span><br><span class="line">    AbstractChannelHandlerContext.invokeChannelActive(<span class="built_in">this</span>.head);   <span class="comment">//传的是流水线上的默认头结点</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">invokeChannelActive</span><span class="params">(<span class="keyword">final</span> AbstractChannelHandlerContext next)</span> &#123;</span><br><span class="line">    <span class="type">EventExecutor</span> <span class="variable">executor</span> <span class="operator">=</span> next.executor();</span><br><span class="line">    <span class="keyword">if</span> (executor.inEventLoop()) &#123;</span><br><span class="line">        next.invokeChannelActive();   <span class="comment">//继续向下</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        executor.execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                next.invokeChannelActive();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">invokeChannelActive</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.invokeHandler()) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ((ChannelInboundHandler)<span class="built_in">this</span>.handler()).channelActive(<span class="built_in">this</span>);   <span class="comment">//依然是调用的头结点的channelActive方法进行处理</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (Throwable var2) &#123;</span><br><span class="line">            <span class="built_in">this</span>.invokeExceptionCaught(var2);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.fireChannelActive();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelActive</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;   <span class="comment">//这里是头结点的</span></span><br><span class="line">    ctx.fireChannelActive();    </span><br><span class="line">    <span class="built_in">this</span>.readIfIsAutoRead();   <span class="comment">//继续向下</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readIfIsAutoRead</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (DefaultChannelPipeline.<span class="built_in">this</span>.channel.config().isAutoRead()) &#123;</span><br><span class="line">        DefaultChannelPipeline.<span class="built_in">this</span>.channel.read();    <span class="comment">//继续不断向下</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">read</span><span class="params">(ChannelHandlerContext ctx)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.unsafe.beginRead();   <span class="comment">//最后这里会调用beginRead方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">beginRead</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.assertEventLoop();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        AbstractChannel.<span class="built_in">this</span>.doBeginRead();    <span class="comment">//这里就是调用AbstractNioChannel的doBeginRead方法了</span></span><br><span class="line">    &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Exception var2) &#123;</span><br><span class="line">        <span class="built_in">this</span>.invokeLater(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                AbstractChannel.<span class="built_in">this</span>.pipeline.fireExceptionCaught(var2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="built_in">this</span>.close(<span class="built_in">this</span>.voidPromise());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">doBeginRead</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> <span class="built_in">this</span>.selectionKey;    <span class="comment">//先拿到之前注册好的selectionKey</span></span><br><span class="line">    <span class="keyword">if</span> (selectionKey.isValid()) &#123;</span><br><span class="line">        <span class="built_in">this</span>.readPending = <span class="literal">true</span>;</span><br><span class="line">        <span class="type">int</span> <span class="variable">interestOps</span> <span class="operator">=</span> selectionKey.interestOps();   <span class="comment">//把监听的操作取出来</span></span><br><span class="line">        <span class="keyword">if</span> ((interestOps &amp; <span class="built_in">this</span>.readInterestOp) == <span class="number">0</span>) &#123;    <span class="comment">//如果没有监听任何操作</span></span><br><span class="line">            selectionKey.interestOps(interestOps | <span class="built_in">this</span>.readInterestOp);   <span class="comment">//那就把readInterestOp事件进行监听，这里的readInterestOp实际上就是OP_ACCEPT</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，Channel在初始化完成之后也完成了底层的注册，已经可以开始等待事件了。</p><p>我们现在回到之前的<code>doBind</code>方法的注册位置，现在注册完成之后，基本上整个主从Reactor结构就已经出来了，我们来看看还要做些什么：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> ChannelFuture <span class="title function_">doBind</span><span class="params">(<span class="keyword">final</span> SocketAddress localAddress)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">ChannelFuture</span> <span class="variable">regFuture</span> <span class="operator">=</span> <span class="built_in">this</span>.initAndRegister();  <span class="comment">//目前初始化和注册都已经成功了</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">Channel</span> <span class="variable">channel</span> <span class="operator">=</span> regFuture.channel();    <span class="comment">//由于是异步操作，我们通过ChannelFuture拿到对应的ServerSocketChannel对象</span></span><br><span class="line">    <span class="keyword">if</span> (regFuture.cause() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> regFuture;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (regFuture.isDone()) &#123;   <span class="comment">//如果说初始化已经完成了</span></span><br><span class="line">        <span class="type">ChannelPromise</span> <span class="variable">promise</span> <span class="operator">=</span> channel.newPromise();</span><br><span class="line">        doBind0(regFuture, channel, localAddress, promise);   <span class="comment">//直接开始进行进一步的绑定</span></span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//如果还没搞完，那就创Promis继续等待任务完成</span></span><br><span class="line">        <span class="keyword">final</span> <span class="type">PendingRegistrationPromise</span> <span class="variable">promise</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PendingRegistrationPromise</span>(channel);</span><br><span class="line">        regFuture.addListener(<span class="keyword">new</span> <span class="title class_">ChannelFutureListener</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">operationComplete</span><span class="params">(ChannelFuture future)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">                <span class="type">Throwable</span> <span class="variable">cause</span> <span class="operator">=</span> future.cause();</span><br><span class="line">                <span class="keyword">if</span> (cause != <span class="literal">null</span>) &#123;</span><br><span class="line">                    promise.setFailure(cause);</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    promise.registered();</span><br><span class="line">                    AbstractBootstrap.doBind0(regFuture, channel, localAddress, promise);</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">        <span class="keyword">return</span> promise;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到最后都会走到<code>doBind0</code>方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">doBind0</span><span class="params">(<span class="keyword">final</span> ChannelFuture regFuture, <span class="keyword">final</span> Channel channel, <span class="keyword">final</span> SocketAddress localAddress, <span class="keyword">final</span> ChannelPromise promise)</span> &#123;</span><br><span class="line">  <span class="comment">//最后会向Channel已经注册到的EventLoop中提交一个新的任务</span></span><br><span class="line">    channel.eventLoop().execute(<span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (regFuture.isSuccess()) &#123;</span><br><span class="line">              <span class="comment">//这里才是真正调用Channel底层进行绑定操作</span></span><br><span class="line">                channel.bind(localAddress, promise).addListener(ChannelFutureListener.CLOSE_ON_FAILURE);</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                promise.setFailure(regFuture.cause());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>至此，服务端的启动流程结束。我们前面还提到了NIO的空轮询问题，这里我们来看看Netty是如何解决的，我们直接定位到NioEventLoop中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//由于代码太多，这里省略大部分代码</span></span><br><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>) &#123;</span><br><span class="line">    <span class="type">boolean</span> var34;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">                        <span class="keyword">try</span> &#123;</span><br><span class="line">                            <span class="keyword">if</span> (!<span class="built_in">this</span>.hasTasks()) &#123;</span><br><span class="line">                                strategy = <span class="built_in">this</span>.select(curDeadlineNanos);   <span class="comment">//首先会在这里进行Selector.select()操作，跟NIO是一样的</span></span><br><span class="line">                            &#125;</span><br><span class="line">           ...</span><br><span class="line"></span><br><span class="line">            ++selectCnt;    <span class="comment">//每次唤醒都会让selectCnt自增</span></span><br><span class="line">            <span class="built_in">this</span>.cancelledKeys = <span class="number">0</span>;</span><br><span class="line">            </span><br><span class="line">          ...</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span> (!ranTasks &amp;&amp; strategy &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (<span class="built_in">this</span>.unexpectedSelectorWakeup(selectCnt)) &#123;   <span class="comment">//这里会进行判断是否出现空轮询BUG</span></span><br><span class="line">           ...</span><br></pre></td></tr></table></figure><p>我们来看看是怎么进行判断的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">unexpectedSelectorWakeup</span><span class="params">(<span class="type">int</span> selectCnt)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (Thread.interrupted()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">            logger.debug(<span class="string">&quot;Selector.select() returned prematurely because Thread.currentThread().interrupt() was called. Use NioEventLoop.shutdownGracefully() to shutdown the NioEventLoop.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="comment">//如果selectCnt大于等于SELECTOR_AUTO_REBUILD_THRESHOLD（默认为512）那么会直接重建Selector</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (SELECTOR_AUTO_REBUILD_THRESHOLD &gt; <span class="number">0</span> &amp;&amp; selectCnt &gt;= SELECTOR_AUTO_REBUILD_THRESHOLD) &#123;</span><br><span class="line">        logger.warn(<span class="string">&quot;Selector.select() returned prematurely &#123;&#125; times in a row; rebuilding Selector &#123;&#125;.&quot;</span>, selectCnt, <span class="built_in">this</span>.selector);</span><br><span class="line">        <span class="built_in">this</span>.rebuildSelector();   <span class="comment">//当前的Selector出现BUG了，得重建一个Selector</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上，当每次空轮询发生时会有专门的计数器+1，如果空轮询的次数超过了512次，就认为其触发了空轮询bug，触发bug后，Netty直接重建一个Selector，将原来的Channel重新注册到新的 Selector上，将旧的 Selector关掉，这样就防止了无限循环。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2024/03/17/Java%20NIO%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/"/>
      <url>/2024/03/17/Java%20NIO%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%80%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1ixd6z9kxj21hi0dmab5.jpg" alt="image-20220422233930778"></p><h1 id="NIO基础"><a href="#NIO基础" class="headerlink" title="NIO基础"></a>NIO基础</h1><p><strong>注意：</strong>推荐完成JavaSE篇、JavaWeb篇的学习再开启这一部分的学习，如果在这之前完成了JVM篇，那么看起来就会比较轻松了。</p><p>在JavaSE的学习中，我们了解了如何使用IO进行数据传输，Java IO是阻塞的，如果在一次读写数据调用时数据还没有准备好，或者目前不可写，那么读写操作就会被阻塞直到数据准备好或目标可写为止。Java NIO则是非阻塞的，每一次数据读写调用都会立即返回，并将目前可读（或可写）的内容写入缓冲区或者从缓冲区中输出，即使当前没有可用数据，调用仍然会立即返回并且不对缓冲区做任何操作。</p><p>NIO框架是在JDK1.4推出的，它的出现就是为了解决传统IO的不足，这一期视频，我</p><p>们就将围绕着NIO开始讲解。</p><h2 id="缓冲区"><a href="#缓冲区" class="headerlink" title="缓冲区"></a>缓冲区</h2><p>一切的一切还要从缓冲区开始讲起，包括源码在内，其实这个不是很难，只是需要理清思路。</p><h3 id="Buffer类及其实现"><a href="#Buffer类及其实现" class="headerlink" title="Buffer类及其实现"></a>Buffer类及其实现</h3><p>Buffer类是缓冲区的实现，类似于Java中的数组，也是用于存放和获取数据的。但是Buffer相比Java中的数组，功能就非常强大了，它包含一系列对于数组的快捷操作。</p><p>Buffer是一个抽象类，它的核心内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">Buffer</span> &#123;</span><br><span class="line">    <span class="comment">// 这四个变量的关系: mark &lt;= position &lt;= limit &lt;= capacity</span></span><br><span class="line">  <span class="comment">// 这些变量就是Buffer操作的核心了，之后我们学习的过程中可以看源码是如何操作这些变量的</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">mark</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> <span class="variable">position</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> limit;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 直接缓冲区实现子类的数据内存地址（之后会讲解）</span></span><br><span class="line">    <span class="type">long</span> address;</span><br></pre></td></tr></table></figure><p>我们来看看Buffer类的子类，包括我们认识到的所有基本类型（除了<code>boolean</code>类型之外）：</p><ul><li>IntBuffer   -   int类型的缓冲区。</li><li>ShortBuffer   -   short类型的缓冲区。</li><li>LongBuffer   -   long类型的缓冲区。</li><li>FloatBuffer   -   float类型的缓冲区。</li><li>DoubleBuffer   -   double类型的缓冲区。</li><li>ByteBuffer   -   byte类型的缓冲区。</li><li>CharBuffer   -   char类型的缓冲区。</li></ul><p>（注意我们之前在JavaSE中学习过的StringBuffer虽然也是这种命名方式，但是不属于Buffer体系，这里不会进行介绍）</p><p>这里我们以IntBuffer为例，我们来看看如何创建一个Buffer类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">  <span class="comment">//创建一个缓冲区不能直接new，而是需要使用静态方法去生成，有两种方式：</span></span><br><span class="line">    <span class="comment">//1. 申请一个容量为10的int缓冲区</span></span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//2. 可以将现有的数组直接转换为缓冲区（包括数组中的数据）</span></span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>&#125;;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(arr);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么它的内部是本质上如何进行操作的呢？我们来看看它的源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IntBuffer <span class="title function_">allocate</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (capacity &lt; <span class="number">0</span>)   <span class="comment">//如果申请的容量小于0，那还有啥意思</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeapIntBuffer</span>(capacity, capacity);   <span class="comment">//可以看到这里会直接创建一个新的IntBuffer实现类</span></span><br><span class="line">  <span class="comment">//HeapIntBuffer是在堆内存中存放数据，本质上就数组，一会我们可以在深入看一下</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IntBuffer <span class="title function_">wrap</span><span class="params">(<span class="type">int</span>[] array, <span class="type">int</span> offset, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//可以看到这个也是创建了一个新的HeapIntBuffer对象，并且给了初始数组以及截取的起始位置和长度</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeapIntBuffer</span>(array, offset, length);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException x) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> IntBuffer <span class="title function_">wrap</span><span class="params">(<span class="type">int</span>[] array)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> wrap(array, <span class="number">0</span>, array.length);   <span class="comment">//调用的是上面的wrap方法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个HeapIntBuffer又是如何实现的呢，我们接着来看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">HeapIntBuffer(<span class="type">int</span>[] buf, <span class="type">int</span> off, <span class="type">int</span> len) &#123; <span class="comment">// 注意这个构造方法不是public，是默认的访问权限</span></span><br><span class="line">    <span class="built_in">super</span>(-<span class="number">1</span>, off, off + len, buf.length, buf, <span class="number">0</span>);   <span class="comment">//你会发现这怎么又去调父类的构造方法了，绕来绕去</span></span><br><span class="line">  <span class="comment">//mark是标记，off是当前起始下标位置，off+len是最大下标位置，buf.length是底层维护的数组真正长度，buf就是数组，最后一个0是起始偏移位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们又来看看IntBuffer中的构造方法是如何定义的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">final</span> <span class="type">int</span>[] hb;                  <span class="comment">// 只有在堆缓冲区实现时才会使用</span></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> offset;</span><br><span class="line"><span class="type">boolean</span> isReadOnly;                 <span class="comment">// 只有在堆缓冲区实现时才会使用</span></span><br><span class="line"></span><br><span class="line">IntBuffer(<span class="type">int</span> mark, <span class="type">int</span> pos, <span class="type">int</span> lim, <span class="type">int</span> cap,   <span class="comment">// 注意这个构造方法不是public，是默认的访问权限</span></span><br><span class="line">             <span class="type">int</span>[] hb, <span class="type">int</span> offset)</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">super</span>(mark, pos, lim, cap);  <span class="comment">//调用Buffer类的构造方法</span></span><br><span class="line">    <span class="built_in">this</span>.hb = hb;    <span class="comment">//hb就是真正我们要存放数据的数组，堆缓冲区底层其实就是这么一个数组</span></span><br><span class="line">    <span class="built_in">this</span>.offset = offset;   <span class="comment">//起始偏移位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们来看看Buffer中的构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">Buffer(<span class="type">int</span> mark, <span class="type">int</span> pos, <span class="type">int</span> lim, <span class="type">int</span> cap) &#123;       <span class="comment">// 注意这个构造方法不是public，是默认的访问权限</span></span><br><span class="line">    <span class="keyword">if</span> (cap &lt; <span class="number">0</span>)  <span class="comment">//容量不能小于0，小于0还玩个锤子</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;Negative capacity: &quot;</span> + cap);</span><br><span class="line">    <span class="built_in">this</span>.capacity = cap;   <span class="comment">//设定缓冲区容量</span></span><br><span class="line">    limit(lim);    <span class="comment">//设定最大position位置</span></span><br><span class="line">    position(pos);   <span class="comment">//设定起始位置</span></span><br><span class="line">    <span class="keyword">if</span> (mark &gt;= <span class="number">0</span>) &#123;  <span class="comment">//如果起始标记大于等于0</span></span><br><span class="line">        <span class="keyword">if</span> (mark &gt; pos)  <span class="comment">//并且标记位置大于起始位置，那么就抛异常（至于为啥不能大于我们后面再说）</span></span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;mark &gt; position: (&quot;</span></span><br><span class="line">                                               + mark + <span class="string">&quot; &gt; &quot;</span> + pos + <span class="string">&quot;)&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.mark = mark;   <span class="comment">//否则设定mark位置（mark默认为-1）</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对源码的观察，我们大致可以得到以下结构了：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1kkaatg47j21kk0bgmyp.jpg" alt="image-20220424093805677"></p><p>现在我们来总结一下上面这些结构的各自职责划分：</p><ul><li>Buffer：缓冲区的一些基本变量定义，比如当前的位置（position）、容量 (capacity)、最大限制 (limit)、标记 (mark)等，你肯定会疑惑这些变量有啥用，别着急，这些变量会在后面的操作中用到，我们逐步讲解。</li><li>IntBuffer等子类：定义了存放数据的数组（只有堆缓冲区实现子类才会用到）、是否只读等，也就是说数据的存放位置、以及对于底层数组的相关操作都在这里已经定义好了，并且已经实现了Comparable接口。</li><li>HeapIntBuffer堆缓冲区实现子类：数据存放在堆中，实际上就是用的父类的数组在保存数据，并且将父类定义的所有底层操作全部实现了。</li></ul><p>这样，我们对于Buffer类的基本结构就有了一个大致的认识。</p><h3 id="缓冲区写操作"><a href="#缓冲区写操作" class="headerlink" title="缓冲区写操作"></a>缓冲区写操作</h3><p>前面我们了解了Buffer类的基本操作，现在我们来看一下如何向缓冲区中存放数据以及获取数据，数据的存放包括以下四个方法：</p><ul><li>public abstract IntBuffer put(int i);   -   在当前position位置插入数据，由具体子类实现</li><li>public abstract IntBuffer put(int index, int i);   -   在指定位置存放数据，也是由具体子类实现</li><li>public final IntBuffer put(int[] src);   -   直接存放所有数组中的内容（数组长度不能超出缓冲区大小）</li><li>public IntBuffer put(int[] src, int offset, int length);   -   直接存放数组中的内容，同上，但是可以指定存放一段范围</li><li>public IntBuffer put(IntBuffer src);   -   直接存放另一个缓冲区中的内容</li></ul><p>我们从最简的开始看，是在当前位置插入一个数据，那么这个当前位置是怎么定义的呢，我们来看看源码：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">put</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    hb[ix(nextPutIndex())] = x;   <span class="comment">//这个ix和nextPutIndex()很灵性，我们来看看具体实现</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">ix</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i + offset;   <span class="comment">//将i的值加上我们之前设定的offset偏移量值，但是默认是0（非0的情况后面会介绍）</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">nextPutIndex</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> position;    <span class="comment">//获取Buffer类中的position位置（一开始也是0）</span></span><br><span class="line">    <span class="keyword">if</span> (p &gt;= limit)    <span class="comment">//位置肯定不能超过底层数组最大长度，否则越界</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BufferOverflowException</span>();</span><br><span class="line">    position = p + <span class="number">1</span>;   <span class="comment">//获取之后会使得Buffer类中的position+1</span></span><br><span class="line">    <span class="keyword">return</span> p;   <span class="comment">//返回当前的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>所以put操作实际上是将底层数组<code>hb</code>在position位置上的数据进行设定。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1knn61e76j21ra08it8y.jpg" alt="image-20220424113417640"></p><p>设定完成后，position自动后移：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1knnkm8omj21ro08gjrs.jpg" alt="image-20220424113440765"></p><p>我们可以编写代码来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    buffer</span><br><span class="line">            .put(<span class="number">1</span>)</span><br><span class="line">            .put(<span class="number">2</span>)</span><br><span class="line">            .put(<span class="number">3</span>);   <span class="comment">//我们依次存放三个数据试试看</span></span><br><span class="line">    System.out.println(buffer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过断点调试，我们来看看实际的操作情况：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1kmdmh8ypj21ks0b8gmx.jpg" alt="image-20220424105031549"></p><p>可以看到我们不断地put操作，position会一直向后移动，当然如果超出最大长度，那么会直接抛出异常：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1kmenwakbj21lu04kwfk.jpg" alt="image-20220424105131279"></p><p>接着我们来看看第二个put操作是如何进行，它能够在指定位置插入数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">put</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    hb[ix(checkIndex(i))] = x;  <span class="comment">//这里依然会使用ix，但是会检查位置是否合法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">checkIndex</span><span class="params">(<span class="type">int</span> i)</span> &#123;                       <span class="comment">// package-private</span></span><br><span class="line">    <span class="keyword">if</span> ((i &lt; <span class="number">0</span>) || (i &gt;= limit))    <span class="comment">//插入的位置不能小于0并且不能大于等于底层数组最大长度</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">    <span class="keyword">return</span> i;   <span class="comment">//没有问题就把i返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>实际上这个比我们之前的要好理解一些，注意全程不会操作position的值，这里需要注意一下。</p><p>我们接着来看第三个put操作，它是直接在IntBuffer中实现的，是基于前两个put方法的子类实现来完成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">put</span><span class="params">(<span class="type">int</span>[] src, <span class="type">int</span> offset, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    checkBounds(offset, length, src.length);   <span class="comment">//检查截取范围是否合法，给offset、调用者指定长度、数组实际长度</span></span><br><span class="line">    <span class="keyword">if</span> (length &gt; remaining())   <span class="comment">//接着判断要插入的数据量在缓冲区是否容得下，装不下也不行</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BufferOverflowException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> offset + length;   <span class="comment">//计算出最终读取位置，下面开始for</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> offset; i &lt; end; i++)</span><br><span class="line">        <span class="built_in">this</span>.put(src[i]);   <span class="comment">//注意是直接从postion位置开始插入，直到指定范围结束</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;   <span class="comment">//ojbk</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> IntBuffer <span class="title function_">put</span><span class="params">(<span class="type">int</span>[] src)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> put(src, <span class="number">0</span>, src.length);   <span class="comment">//因为不需要指定范围，所以直接0和length，然后调上面的，多捞哦</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">remaining</span><span class="params">()</span> &#123;  <span class="comment">//计算并获取当前缓冲区的剩余空间</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rem</span> <span class="operator">=</span> limit - position;   <span class="comment">//最大容量减去当前位置，就是剩余空间</span></span><br><span class="line">    <span class="keyword">return</span> rem &gt; <span class="number">0</span> ? rem : <span class="number">0</span>;  <span class="comment">//没容量就返回0</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">checkBounds</span><span class="params">(<span class="type">int</span> off, <span class="type">int</span> len, <span class="type">int</span> size)</span> &#123; <span class="comment">// package-private</span></span><br><span class="line">    <span class="keyword">if</span> ((off | len | (off + len) | (size - (off + len))) &lt; <span class="number">0</span>)  <span class="comment">//让我猜猜，看不懂了是吧</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IndexOutOfBoundsException</span>();</span><br><span class="line">  <span class="comment">//实际上就是看给定的数组能不能截取出指定的这段数据，如果都不够了那肯定不行啊</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>大致流程如下，首先来了一个数组要取一段数据全部丢进缓冲区：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1knmgx4rfj21qy0j6wga.jpg" alt="image-20220424113337189"></p><p>在检查没有什么问题并且缓冲区有容量时，就可以开始插入了：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1knm0wy6bj21rq0jaac6.jpg" alt="Img"></p><p>最后我们通过代码来看看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>,<span class="number">9</span>&#125;;</span><br><span class="line">    buffer.put(arr, <span class="number">3</span>, <span class="number">4</span>);  <span class="comment">//从下标3开始，截取4个元素</span></span><br><span class="line"></span><br><span class="line">    System.out.println(Arrays.toString(buffer.array()));  <span class="comment">//array方法可以直接获取到数组</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到最后结果为：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1knjeatbjj219y01kmx1.jpg" alt="image-20220424113040485"></p><p>当然我们也可以将一个缓冲区的内容保存到另一个缓冲区：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">put</span><span class="params">(IntBuffer src)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (src == <span class="built_in">this</span>)   <span class="comment">//不会吧不会吧，不会有人保存自己吧</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>();</span><br><span class="line">    <span class="keyword">if</span> (isReadOnly())   <span class="comment">//如果是只读的话，那么也是不允许插入操作的（我猜你们肯定会问为啥就这里会判断只读，前面四个呢）</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReadOnlyBufferException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> src.remaining();  <span class="comment">//给进来的src看看容量（注意这里不remaining的结果不是剩余容量，是转换后的，之后会说）</span></span><br><span class="line">    <span class="keyword">if</span> (n &gt; remaining())    <span class="comment">//这里判断当前剩余容量是否小于src容量</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BufferOverflowException</span>();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; n; i++)   <span class="comment">//也是从position位置开始继续写入</span></span><br><span class="line">        put(src.get());   <span class="comment">//通过get方法一个一个读取数据出来，具体过程后面讲解</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">src</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    buffer.put(src);</span><br><span class="line">    System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是如果是这样的话，会出现问题：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">src</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) src.put(i);   <span class="comment">//手动插入数据</span></span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    buffer.put(src);</span><br><span class="line">    System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们发现，结果和上面的不一样，并没有成功地将数据填到下面的IntBuffer中，这是为什么呢？实际上就是因为<code>remaining()</code>的计算问题，因为这个方法是直接计算postion的位置，但是由于我们在写操作完成之后，position跑到后面去了，也就导致<code>remaining()</code>结果最后算出来为0。</p><p>因为这里不是写操作，是接下来需要从头开始进行读操作，所以我们得想个办法把position给退回到一开始的位置，这样才可以从头开始读取，那么怎么做呢？一般我们在写入完成后需要进行读操作时（后面都是这样，不只是这里），会使用<code>flip()</code>方法进行翻转：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title function_">flip</span><span class="params">()</span> &#123;</span><br><span class="line">    limit = position;    <span class="comment">//修改limit值，当前写到哪里，下次读的最终位置就是这里，limit的作用开始慢慢体现了</span></span><br><span class="line">    position = <span class="number">0</span>;    <span class="comment">//position归零</span></span><br><span class="line">    mark = -<span class="number">1</span>;    <span class="comment">//标记还原为-1，但是现在我们还没用到</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，再次计算<code>remaining()</code>的结果就是我们需要读取的数量了，这也是为什么put方法中要用<code>remaining()</code>来计算的原因，我们再来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">src</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">5</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) src.put(i);</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.allocate(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    src.flip();   <span class="comment">//我们可以通过flip来翻转缓冲区</span></span><br><span class="line">    buffer.put(src);</span><br><span class="line">    System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>翻转之后再次进行转移，就正常了。</p><h3 id="缓冲区读操作"><a href="#缓冲区读操作" class="headerlink" title="缓冲区读操作"></a>缓冲区读操作</h3><p>前面我们看完了写操作，现在我们接着来看看读操作。读操作有四个方法：</p><ul><li><code>public abstract int get();</code>    -    直接获取当前position位置的数据，由子类实现</li><li><code>public abstract int get(int index); </code>  -    获取指定位置的数据，也是子类实现</li><li><code>public IntBuffer get(int[] dst)</code>  -   将数据读取到给定的数组中</li><li><code>public IntBuffer get(int[] dst, int offset, int length)</code>  -   同上，加了个范围</li></ul><p>我们还是从最简单的开始看，第一个get方法的实现在IntBuffer类中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> hb[ix(nextGetIndex())];    <span class="comment">//直接从数组中取就完事</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">final</span> <span class="type">int</span> <span class="title function_">nextGetIndex</span><span class="params">()</span> &#123;                          <span class="comment">// 好家伙，这不跟前面那个一模一样吗</span></span><br><span class="line">  <span class="type">int</span> <span class="variable">p</span> <span class="operator">=</span> position;</span><br><span class="line">  <span class="keyword">if</span> (p &gt;= limit)</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BufferUnderflowException</span>();</span><br><span class="line">  position = p + <span class="number">1</span>;</span><br><span class="line">  <span class="keyword">return</span> p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到每次读取操作之后，也会将postion+1，直到最后一个位置，如果还要继续读，那么就直接抛出异常。</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1kph5va26j21ry07ut94.jpg" alt="image-20220424123743020"></p><p>我们来看看第二个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> hb[ix(checkIndex(i))];   <span class="comment">//这里依然是使用checkIndex来检查位置是否非法</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看第三个和第四个：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">get</span><span class="params">(<span class="type">int</span>[] dst, <span class="type">int</span> offset, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    checkBounds(offset, length, dst.length);   <span class="comment">//跟put操作一样，也是需要检查是否越界</span></span><br><span class="line">    <span class="keyword">if</span> (length &gt; remaining())   <span class="comment">//如果读取的长度比可以读的长度大，那肯定是不行的</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">BufferUnderflowException</span>();</span><br><span class="line">    <span class="type">int</span> <span class="variable">end</span> <span class="operator">=</span> offset + length;    <span class="comment">//计算出最终读取位置</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> offset; i &lt; end; i++)</span><br><span class="line">        dst[i] = get();   <span class="comment">//开始从position把数据读到数组中，注意是在数组的offset位置开始</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">get</span><span class="params">(<span class="type">int</span>[] dst)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> get(dst, <span class="number">0</span>, dst.length);   <span class="comment">//不指定范围的话，那就直接用上面的</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看效果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    <span class="type">int</span>[] arr = <span class="keyword">new</span> <span class="title class_">int</span>[<span class="number">10</span>];</span><br><span class="line">    buffer.get(arr, <span class="number">2</span>, <span class="number">5</span>);</span><br><span class="line">    System.out.println(Arrays.toString(arr));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1kpw3b24fj21d601aq2t.jpg" alt="image-20220424125203822"></p><p>可以看到成功地将数据读取到了数组中。</p><p>当然如果我们需要直接获取数组，也可以使用<code>array()</code>方法来拿到：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="type">int</span>[] array() &#123;</span><br><span class="line">    <span class="keyword">if</span> (hb == <span class="literal">null</span>)   <span class="comment">//为空那说明底层不是数组实现的，肯定就没法转换了</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnsupportedOperationException</span>();</span><br><span class="line">    <span class="keyword">if</span> (isReadOnly)   <span class="comment">//只读也是不让直接取出的，因为一旦取出去岂不是就能被修改了</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReadOnlyBufferException</span>();</span><br><span class="line">    <span class="keyword">return</span> hb;   <span class="comment">//直接返回hb</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来试试看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，既然都已经拿到了底层的<code>hb</code>了，我们来看看如果直接修改之后是不是读取到的就是我们的修改之后的结果了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    <span class="type">int</span>[] arr = buffer.array();</span><br><span class="line">    arr[<span class="number">0</span>] = <span class="number">99999</span>;   <span class="comment">//拿到数组对象直接改</span></span><br><span class="line">    System.out.println(buffer.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到这种方式由于是直接拿到的底层数组，所有修改会直接生效在缓冲区中。</p><p>当然除了常规的读取方式之外，我们也可以通过<code>mark()</code>来实现跳转读取，这里需要介绍一下几个操作：</p><ul><li><code>public final Buffer mark()</code>   -   标记当前位置</li><li><code>public final Buffer reset()</code>   -   让当前的position位置跳转到mark当时标记的位置</li></ul><p>我们首先来看标记方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title function_">mark</span><span class="params">()</span> &#123;</span><br><span class="line">    mark = position;   <span class="comment">//直接标记到当前位置，mark变量终于派上用场了，当然这里仅仅是标记</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们再来看看重置方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title function_">reset</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">m</span> <span class="operator">=</span> mark;   <span class="comment">//存一下当前的mark位置</span></span><br><span class="line">    <span class="keyword">if</span> (m &lt; <span class="number">0</span>)    <span class="comment">//因为mark默认是-1，要是没有进行过任何标记操作，那reset个毛</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">InvalidMarkException</span>();</span><br><span class="line">    position = m;   <span class="comment">//直接让position变成mark位置</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那比如我们在读取到1号位置时进行标记：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1krtfdjjxj21qw082t96.jpg" alt="image-20220424135842228"></p><p>接着我们使用reset方法就可以直接回退回去了：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1kru5ys1aj21ru096dgg.jpg" alt="image-20220424135925501"></p><p>现在我们来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    buffer.get();   <span class="comment">//读取一位，那么position就变成1了</span></span><br><span class="line">    buffer.mark();   <span class="comment">//这时标记，那么mark = 1</span></span><br><span class="line">    buffer.get();   <span class="comment">//又读取一位，那么position就变成2了</span></span><br><span class="line">    buffer.reset();    <span class="comment">//直接将position = mark，也就是变回1</span></span><br><span class="line">    System.out.println(buffer.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，读取的位置根据我们的操作进行了变化，有关缓冲区的读操作，就暂时讲到这里。</p><h3 id="缓冲区其他操作"><a href="#缓冲区其他操作" class="headerlink" title="缓冲区其他操作"></a>缓冲区其他操作</h3><p>前面我们大致了解了一下缓冲区的读写操作，那么我们接着来看看，除了常规的读写操作之外，还有哪些其他的操作：</p><ul><li><code>public abstract IntBuffer compact()</code>   -   压缩缓冲区，由具体实现类实现</li><li><code>public IntBuffer duplicate()</code>   -   复制缓冲区，会直接创建一个新的数据相同的缓冲区</li><li><code>public abstract IntBuffer slice()</code>   -    划分缓冲区，会将原本的容量大小的缓冲区划分为更小的出来进行操作</li><li><code>public final Buffer rewind()</code>  -   重绕缓冲区，其实就是把position归零，然后mark变回-1</li><li><code>public final Buffer clear()</code>  -   将缓冲区清空，所有的变量变回最初的状态</li></ul><p>我们先从压缩缓冲区开始看起，它会将整个缓冲区的大小和数据内容变成position位置到limit之间的数据，并移动到数组头部：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">compact</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> position();   <span class="comment">//获取当前位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lim</span> <span class="operator">=</span> limit();    <span class="comment">//获取当前最大position位置</span></span><br><span class="line">    <span class="keyword">assert</span> (pos &lt;= lim);   <span class="comment">//断言表达式，position必须小于最大位置，肯定的</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rem</span> <span class="operator">=</span> (pos &lt;= lim ? lim - pos : <span class="number">0</span>);  <span class="comment">//计算pos距离最大位置的长度</span></span><br><span class="line">    System.arraycopy(hb, ix(pos), hb, ix(<span class="number">0</span>), rem);   <span class="comment">//直接将hb数组当前position位置的数据拷贝到头部去，然后长度改成刚刚计算出来的空间</span></span><br><span class="line">    position(rem);   <span class="comment">//直接将position移动到rem位置</span></span><br><span class="line">    limit(capacity());   <span class="comment">//pos最大位置修改为最大容量</span></span><br><span class="line">    discardMark();   <span class="comment">//mark变回-1</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>比如现在的状态是：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1krvhots6j21s0088aar.jpg" alt="image-20220424140040711"></p><p>那么我们在执行<code> compact()</code>方法之后，会进行截取，此时<code>limit - position = 6</code>，那么就会截取第<code>4、5、6、7、8、9</code>这6个数据然后丢到最前面，接着position跑到<code>7</code>表示这是下一个继续的位置：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1krycqrmej21ri080wfb.jpg" alt="image-20220424140326373"></p><p>现在我们通过代码来检验一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) buffer.get();   <span class="comment">//先正常读4个</span></span><br><span class="line">    buffer.compact();   <span class="comment">//压缩缓冲区</span></span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;压缩之后的情况：&quot;</span>+Arrays.toString(buffer.array()));</span><br><span class="line">    System.out.println(<span class="string">&quot;当前position位置：&quot;</span>+buffer.position());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前limit位置：&quot;</span>+buffer.limit());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到最后的结果没有问题：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1ksetaccij21b603oq35.jpg" alt="image-20220424141916082"></p><p>我们接着来看第二个方法，那么如果我们现在需要复制一个内容一模一样的的缓冲区，该怎么做？直接使用<code>duplicate()</code>方法就可以复制了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">duplicate</span><span class="params">()</span> &#123;   <span class="comment">//直接new一个新的，但是是吧hb给丢进去了，而不是拷贝一个新的</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeapIntBuffer</span>(hb,</span><br><span class="line">                                    <span class="built_in">this</span>.markValue(),</span><br><span class="line">                                    <span class="built_in">this</span>.position(),</span><br><span class="line">                                    <span class="built_in">this</span>.limit(),</span><br><span class="line">                                    <span class="built_in">this</span>.capacity(),</span><br><span class="line">                                    offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么各位猜想一下，如果通过这种方式创了一个新的IntBuffer，那么下面的例子会出现什么结果：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">duplicate</span> <span class="operator">=</span> buffer.duplicate();</span><br><span class="line"></span><br><span class="line">    System.out.println(buffer == duplicate);</span><br><span class="line">    System.out.println(buffer.array() == duplicate.array());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>由于buffer是重新new的，所以第一个为false，而底层的数组由于在构造的时候没有进行任何的拷贝而是直接传递，因此实际上两个缓冲区的底层数组是同一个对象。所以，一个发生修改，那么另一个就跟着变了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>&#125;);</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">duplicate</span> <span class="operator">=</span> buffer.duplicate();</span><br><span class="line"></span><br><span class="line">    buffer.put(<span class="number">0</span>, <span class="number">66666</span>);</span><br><span class="line">    System.out.println(duplicate.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们接着来看下一个方法，<code>slice()</code>方法会将缓冲区进行划分：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">slice</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">pos</span> <span class="operator">=</span> <span class="built_in">this</span>.position();   <span class="comment">//获取当前position</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">lim</span> <span class="operator">=</span> <span class="built_in">this</span>.limit();     <span class="comment">//获取position最大位置</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">rem</span> <span class="operator">=</span> (pos &lt;= lim ? lim - pos : <span class="number">0</span>);   <span class="comment">//求得剩余空间</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeapIntBuffer</span>(hb,    <span class="comment">//返回一个新的划分出的缓冲区，但是底层的数组用的还是同一个</span></span><br><span class="line">                                    -<span class="number">1</span>,</span><br><span class="line">                                    <span class="number">0</span>,</span><br><span class="line">                                    rem,    <span class="comment">//新的容量变成了剩余空间的大小</span></span><br><span class="line">                                    rem,</span><br><span class="line">                                    pos + offset);   <span class="comment">//可以看到offset的地址不再是0了，而是当前的position加上原有的offset值</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然现在底层依然使用的是之前的数组，但是由于设定了offset值，我们之前的操作似乎变得不太一样了：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1ksmjx76ij21ru07u75a.jpg" alt="image-20220424142642088"></p><p>回顾前面我们所讲解的内容，在读取和存放时，会被<code>ix</code>方法进行调整：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">ix</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> i + offset;   <span class="comment">//现在offset为4，那么也就是说逻辑上的i是0但是得到真实位置却是4</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> hb[ix(nextGetIndex())];   <span class="comment">//最后会经过ix方法转换为真正在数组中的位置</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，在逻辑上我们可以认为是这样的：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1ksq30gzij21pw08gt9b.jpg" alt="image-20220424143002885"></p><p>现在我们来测试一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) buffer.get();</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">slice</span> <span class="operator">=</span> buffer.slice();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="string">&quot;划分之后的情况：&quot;</span>+Arrays.toString(slice.array()));</span><br><span class="line">    System.out.println(<span class="string">&quot;划分之后的偏移地址：&quot;</span>+slice.arrayOffset());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前position位置：&quot;</span>+slice.position());</span><br><span class="line">    System.out.println(<span class="string">&quot;当前limit位置：&quot;</span>+slice.limit());</span><br><span class="line"></span><br><span class="line">    <span class="keyword">while</span> (slice.hasRemaining()) &#123;   <span class="comment">//将所有的数据全部挨着打印出来</span></span><br><span class="line">        System.out.print(slice.get()+<span class="string">&quot;, &quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，最终结果：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1ksqmk9smj21dw05q3yy.jpg" alt="image-20220424143036449"></p><p>最后两个方法就比较简单了，我们先来看<code>rewind()</code>，它相当于是对position和mark进行了一次重置：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title function_">rewind</span><span class="params">()</span> &#123;</span><br><span class="line">    position = <span class="number">0</span>;</span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是<code>clear()</code>，它相当于是将整个缓冲区回归到最初的状态了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Buffer <span class="title function_">clear</span><span class="params">()</span> &#123;</span><br><span class="line">    position = <span class="number">0</span>;    <span class="comment">//同上</span></span><br><span class="line">    limit = capacity;   <span class="comment">//limit变回capacity</span></span><br><span class="line">    mark = -<span class="number">1</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>到这里，关于缓冲区的一些其他操作，我们就讲解到此。</p><h3 id="缓冲区比较"><a href="#缓冲区比较" class="headerlink" title="缓冲区比较"></a>缓冲区比较</h3><p>缓冲区之间是可以进行比较的，我们可以看到equals方法和compareTo方法都是被重写了的，我们首先来看看<code>equals</code>方法，注意，它是判断两个缓冲区剩余的内容是否一致：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(Object ob)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span> == ob)   <span class="comment">//要是两个缓冲区是同一个对象，肯定一样</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">if</span> (!(ob <span class="keyword">instanceof</span> IntBuffer))  <span class="comment">//类型不是IntBuffer那也不用比了</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">that</span> <span class="operator">=</span> (IntBuffer)ob;   <span class="comment">//转换为IntBuffer</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">thisPos</span> <span class="operator">=</span> <span class="built_in">this</span>.position();  <span class="comment">//获取当前缓冲区的相关信息</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">thisLim</span> <span class="operator">=</span> <span class="built_in">this</span>.limit();</span><br><span class="line">    <span class="type">int</span> <span class="variable">thatPos</span> <span class="operator">=</span> that.position();  <span class="comment">//获取另一个缓冲区的相关信息</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">thatLim</span> <span class="operator">=</span> that.limit();</span><br><span class="line">    <span class="type">int</span> <span class="variable">thisRem</span> <span class="operator">=</span> thisLim - thisPos; </span><br><span class="line">    <span class="type">int</span> <span class="variable">thatRem</span> <span class="operator">=</span> thatLim - thatPos;</span><br><span class="line">    <span class="keyword">if</span> (thisRem &lt; <span class="number">0</span> || thisRem != thatRem)   <span class="comment">//如果剩余容量小于0或是两个缓冲区的剩余容量不一样，也不行</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  <span class="comment">//注意比较的是剩余的内容</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> thisLim - <span class="number">1</span>, j = thatLim - <span class="number">1</span>; i &gt;= thisPos; i--, j--)  <span class="comment">//从最后一个开始倒着往回比剩余的区域</span></span><br><span class="line">        <span class="keyword">if</span> (!equals(<span class="built_in">this</span>.get(i), that.get(j)))</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;   <span class="comment">//只要发现不一样的就不用继续了，直接false</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;   <span class="comment">//上面的比较都没问题，那么就true</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">equals</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x == y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么我们按照它的思路来验证一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer1</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer2</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    System.out.println(buffer1.equals(buffer2));   <span class="comment">//直接比较</span></span><br><span class="line">    </span><br><span class="line">    buffer1.position(<span class="number">6</span>);</span><br><span class="line">    buffer2.position(<span class="number">6</span>);</span><br><span class="line">    System.out.println(buffer1.equals(buffer2));   <span class="comment">//比较从下标6开始的剩余内容</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到结果就是我们所想的那样：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1ktaynv7nj21kw02gglg.jpg" alt="image-20220424145009464"></p><p>那么我们接着来看比较，<code>compareTo</code>方法，它实际上是<code>Comparable</code>接口提供的方法，它实际上比较的也是pos开始剩余的内容：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compareTo</span><span class="params">(IntBuffer that)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">thisPos</span> <span class="operator">=</span> <span class="built_in">this</span>.position();    <span class="comment">//获取并计算两个缓冲区的pos和remain</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">thisRem</span> <span class="operator">=</span> <span class="built_in">this</span>.limit() - thisPos;</span><br><span class="line">    <span class="type">int</span> <span class="variable">thatPos</span> <span class="operator">=</span> that.position();</span><br><span class="line">    <span class="type">int</span> <span class="variable">thatRem</span> <span class="operator">=</span> that.limit() - thatPos;</span><br><span class="line">    <span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> Math.min(thisRem, thatRem);   <span class="comment">//选取一个剩余空间最小的出来</span></span><br><span class="line">    <span class="keyword">if</span> (length &lt; <span class="number">0</span>)   <span class="comment">//如果最小的小于0，那就返回-1</span></span><br><span class="line">        <span class="keyword">return</span> -<span class="number">1</span>;</span><br><span class="line">    <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> thisPos + Math.min(thisRem, thatRem);  <span class="comment">//计算n的值当前的pos加上剩余的最小空间</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> thisPos, j = thatPos; i &lt; n; i++, j++) &#123;  <span class="comment">//从两个缓冲区的当前位置开始，一直到n结束</span></span><br><span class="line">        <span class="type">int</span> <span class="variable">cmp</span> <span class="operator">=</span> compare(<span class="built_in">this</span>.get(i), that.get(j));  <span class="comment">//比较</span></span><br><span class="line">        <span class="keyword">if</span> (cmp != <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">return</span> cmp;   <span class="comment">//只要出现不相同的，那么就返回比较出来的值</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> thisRem - thatRem; <span class="comment">//如果没比出来个所以然，那么就比长度</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> y)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> Integer.compare(x, y);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们就不多做介绍了。</p><h3 id="只读缓冲区"><a href="#只读缓冲区" class="headerlink" title="只读缓冲区"></a>只读缓冲区</h3><p>接着我们来看看只读缓冲区，只读缓冲区就像其名称一样，它只能进行读操作，而不允许进行写操作。</p><p>那么我们怎么创建只读缓冲区呢？</p><ul><li><code>public abstract IntBuffer asReadOnlyBuffer();</code>   -   基于当前缓冲区生成一个只读的缓冲区。</li></ul><p>我们来看看此方法的具体实现：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">asReadOnlyBuffer</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">HeapIntBufferR</span>(hb,    <span class="comment">//注意这里并不是直接创建了HeapIntBuffer，而是HeapIntBufferR，并且直接复制的hb数组</span></span><br><span class="line">                                 <span class="built_in">this</span>.markValue(),</span><br><span class="line">                                 <span class="built_in">this</span>.position(),</span><br><span class="line">                                 <span class="built_in">this</span>.limit(),</span><br><span class="line">                                 <span class="built_in">this</span>.capacity(),</span><br><span class="line">                                 offset);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么这个HeapIntBufferR类跟我们普通的HeapIntBuffer有什么不同之处呢？</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1ktrvyy39j221e0f8ac2.jpg" alt="image-20220424150625847"></p><p>可以看到它是继承自HeapIntBuffer的，那么我们来看看它的实现有什么不同：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">HeapIntBufferR</span><span class="params">(<span class="type">int</span>[] buf,</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> mark, <span class="type">int</span> pos, <span class="type">int</span> lim, <span class="type">int</span> cap,</span></span><br><span class="line"><span class="params">                               <span class="type">int</span> off)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">super</span>(buf, mark, pos, lim, cap, off);</span><br><span class="line">    <span class="built_in">this</span>.isReadOnly = <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在其构造方法中，除了直接调用父类的构造方法外，还会将<code>isReadOnly</code>标记修改为true，我们接着来看put操作有什么不同之处：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isReadOnly</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">put</span><span class="params">(<span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReadOnlyBufferException</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">put</span><span class="params">(<span class="type">int</span> i, <span class="type">int</span> x)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReadOnlyBufferException</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">put</span><span class="params">(<span class="type">int</span>[] src, <span class="type">int</span> offset, <span class="type">int</span> length)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReadOnlyBufferException</span>();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> IntBuffer <span class="title function_">put</span><span class="params">(IntBuffer src)</span> &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ReadOnlyBufferException</span>();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到所有的put方法全部凉凉，只要调用就会直接抛出ReadOnlyBufferException异常。但是其他get方法依然没有进行重写，也就是说get操作还是可以正常使用的，但是只要是写操作就都不行：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> IntBuffer.wrap(<span class="keyword">new</span> <span class="title class_">int</span>[]&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">0</span>&#125;);</span><br><span class="line">    <span class="type">IntBuffer</span> <span class="variable">readBuffer</span> <span class="operator">=</span> buffer.asReadOnlyBuffer();</span><br><span class="line"></span><br><span class="line">    System.out.println(readBuffer.isReadOnly());</span><br><span class="line">    System.out.println(readBuffer.get());</span><br><span class="line">    readBuffer.put(<span class="number">0</span>, <span class="number">666</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到结果为：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1ktz4pkhtj21ue04oab1.jpg" alt="image-20220424151322831"></p><p>这就是只读状态下的缓冲区。</p><h3 id="ByteBuffer和CharBuffer"><a href="#ByteBuffer和CharBuffer" class="headerlink" title="ByteBuffer和CharBuffer"></a>ByteBuffer和CharBuffer</h3><p>通过前面的学习，我们基本上已经了解了缓冲区的使用，但是都是基于IntBuffer进行讲解，现在我们来看看另外两种基本类型的缓冲区ByteBuffer和CharBuffer，因为ByteBuffer底层存放的是很多单个byte字节，所以会有更多的玩法，同样CharBuffer是一系列字节，所以也有很多便捷操作。</p><p>我们先来看看ByteBuffer，我们可以直接点进去看：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">ByteBuffer</span> <span class="keyword">extends</span> <span class="title class_">Buffer</span> <span class="keyword">implements</span> <span class="title class_">Comparable</span>&lt;ByteBuffer&gt; &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">byte</span>[] hb;                  <span class="comment">// Non-null only for heap buffers</span></span><br><span class="line">    <span class="keyword">final</span> <span class="type">int</span> offset;</span><br><span class="line">    <span class="type">boolean</span> isReadOnly;                 <span class="comment">// Valid only for heap buffers</span></span><br><span class="line">  ....</span><br></pre></td></tr></table></figure><p>可以看到如果也是使用堆缓冲区子类实现，那么依然是一个<code>byte[]</code>的形式保存数据。我们来尝试使用一下：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//除了直接丢byte进去之外，我们也可以丢其他的基本类型（注意容量消耗）</span></span><br><span class="line">    buffer.putInt(Integer.MAX_VALUE);  <span class="comment">//丢个int的最大值进去，注意一个int占4字节</span></span><br><span class="line">    System.out.println(<span class="string">&quot;当前缓冲区剩余字节数：&quot;</span>+buffer.remaining());  <span class="comment">//只剩6个字节了</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们来尝试读取一下，记得先翻转</span></span><br><span class="line">    buffer.flip();</span><br><span class="line">    <span class="keyword">while</span> (buffer.hasRemaining()) &#123;</span><br><span class="line">        System.out.println(buffer.get());   <span class="comment">//一共四个字节</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后的结果为：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1kulzci1zj21cc05kaa3.jpg" alt="image-20220424153520843"></p><p>可以看到第一个byte为127、然后三个都是-1，我们来分析一下：</p><ul><li><code>127</code> 转换为二进制补码形式就是 <code>01111111</code>，而<code>-1</code>转换为二进制补码形式为<code>11111111</code></li></ul><p>那也就是说，第一个字节是01111111，而后续字节就是11111111，把它们拼接在一起：</p><ul><li>二进制补码表示<code>01111111 11111111 11111111 11111111</code> 转换为十进制就是<code>2147483647</code>，也就是int的最大值。</li></ul><p>那么根据我们上面的推导，各位能否计算得到下面的结果呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">0</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">0</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">1</span>);</span><br><span class="line">    buffer.put((<span class="type">byte</span>) -<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">    buffer.flip();   <span class="comment">//翻转一下</span></span><br><span class="line">    System.out.println(buffer.getInt());  <span class="comment">//以int形式获取，那么就是一次性获取4个字节</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>经过上面的计算，得到的结果就是：</p><ul><li>上面的数据以二进制补码的形式表示为：<code>00000000 00000000 00000001 11111111</code></li><li>将其转换为十进制那么就是：256 + 255 &#x3D; 511</li></ul><p>好吧，再来个魔鬼问题，把第一个换成1呢：<code>10000000 00000000 00000001 11111111</code>，自己算。</p><p>我们接着来看看CharBuffer，这种缓冲区实际上也是保存一大堆char类型的数据：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">CharBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> CharBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    buffer.put(<span class="string">&quot;lbwnb&quot;</span>);  <span class="comment">//除了可以直接丢char之外，字符串也可以一次性丢进入</span></span><br><span class="line">    System.out.println(Arrays.toString(buffer.array()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>但是正是得益于char数组，它包含了很多的字符串操作，可以一次性存放一整个字符串。我们甚至还可以将其当做一个String来进行处理：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">CharBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> CharBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    buffer.put(<span class="string">&quot;lbwnb&quot;</span>);</span><br><span class="line">    buffer.append(<span class="string">&quot;!&quot;</span>);   <span class="comment">//可以像StringBuilder一样使用append来继续添加数据</span></span><br><span class="line">  </span><br><span class="line">  System.out.println(<span class="string">&quot;剩余容量：&quot;</span>+buffer.remaining());  <span class="comment">//已经用了6个字符了</span></span><br><span class="line"></span><br><span class="line">    buffer.flip();</span><br><span class="line">    System.out.println(<span class="string">&quot;整个字符串为：&quot;</span>+buffer);   <span class="comment">//直接将内容转换为字符串</span></span><br><span class="line">    System.out.println(<span class="string">&quot;第3个字符是：&quot;</span>+buffer.charAt(<span class="number">2</span>));  <span class="comment">//直接像String一样charAt</span></span><br><span class="line"></span><br><span class="line">    buffer   <span class="comment">//也可以转换为IntStream进行操作</span></span><br><span class="line">            .chars()</span><br><span class="line">            .filter(i -&gt; i &lt; <span class="string">&#x27;l&#x27;</span>)</span><br><span class="line">            .forEach(i -&gt; System.out.print((<span class="type">char</span>) i));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然除了一些常规操作之外，我们还可以直接将一个字符串作为参数创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//可以直接使用wrap包装一个字符串，但是注意，包装出来之后是只读的</span></span><br><span class="line">    <span class="type">CharBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> CharBuffer.wrap(<span class="string">&quot;收藏等于学会~&quot;</span>);</span><br><span class="line">    System.out.println(buffer);</span><br><span class="line"></span><br><span class="line">    buffer.put(<span class="string">&quot;111&quot;</span>);  <span class="comment">//这里尝试进行一下写操作</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到结果也是我们预料中的：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1kvvus5tej219a06c0u1.jpg" alt="image-20220424161925938"></p><p>对于这两个比较特殊的缓冲区，我们就暂时讲解到这里。</p><h3 id="直接缓冲区"><a href="#直接缓冲区" class="headerlink" title="直接缓冲区"></a>直接缓冲区</h3><p><strong>注意：</strong>推荐学习完成JVM篇再来学习这一部分。</p><p>最后我们来看一下直接缓冲区，我们前面一直使用的都是堆缓冲区，也就是说实际上数据是保存在一个数组中的，如果你已经完成了JVM篇的学习，一定知道实际上占用的是堆内存，而我们也可以创建一个直接缓冲区，也就是申请堆外内存进行数据保存，采用操作系统本地的IO，相比堆缓冲区会快一些。</p><p>那么怎么使用直接缓冲区呢？我们可以通过<code>allocateDirect</code>方法来创建：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//这里我们申请一个直接缓冲区</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocateDirect(<span class="number">10</span>);</span><br><span class="line">  <span class="comment">//使用方式基本和之前是一样的</span></span><br><span class="line">    buffer.put((<span class="type">byte</span>) <span class="number">66</span>);</span><br><span class="line">    buffer.flip();</span><br><span class="line">    System.out.println(buffer.get());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看这个<code>allocateDirect</code>方法是如何创建一个直接缓冲区的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> ByteBuffer <span class="title function_">allocateDirect</span><span class="params">(<span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectByteBuffer</span>(capacity);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这个方法直接创建了一个新的DirectByteBuffer对象，那么这个类又是怎么进行创建的呢？</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1kw7cc7vnj223y0f80v0.jpg" alt="image-20220424163028578"></p><p>可以看到它并不是直接继承自ByteBuffer，而是MappedByteBuffer，并且实现了接口DirectBuffer，我们先来看看这个接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">DirectBuffer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">long</span> <span class="title function_">address</span><span class="params">()</span>;   <span class="comment">//获取内存地址</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">attachment</span><span class="params">()</span>;   <span class="comment">//附加对象，这是为了保证某些情况下内存不被释放，我们后面细谈</span></span><br><span class="line">    <span class="keyword">public</span> Cleaner <span class="title function_">cleaner</span><span class="params">()</span>;   <span class="comment">//内存清理类</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">MappedByteBuffer</span> <span class="keyword">extends</span> <span class="title class_">ByteBuffer</span> &#123;</span><br><span class="line">  <span class="comment">//这三个方法目前暂时用不到，后面文件再说</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> MappedByteBuffer <span class="title function_">load</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isLoaded</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> MappedByteBuffer <span class="title function_">force</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们来看看DirectByteBuffer类的成员变量：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 把Unsafe类取出来</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Bits.unsafe();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 在内存中直接创建的内存空间地址</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">arrayBaseOffset</span> <span class="operator">=</span> (<span class="type">long</span>)unsafe.arrayBaseOffset(<span class="type">byte</span>[].class);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 是否具有非对齐访问能力，根据CPU架构而定，intel、AMD、AppleSilicon 都是支持的</span></span><br><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="variable">unaligned</span> <span class="operator">=</span> Bits.unaligned();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 直接缓冲区的内存地址，为了提升速度就放到Buffer类中去了</span></span><br><span class="line"><span class="comment">//    protected long address;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 附加对象，一会有大作用</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Object att;</span><br></pre></td></tr></table></figure><p>接着我们来看看构造方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(<span class="type">int</span> cap) &#123;                   <span class="comment">// package-private</span></span><br><span class="line">    <span class="built_in">super</span>(-<span class="number">1</span>, <span class="number">0</span>, cap, cap);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">pa</span> <span class="operator">=</span> VM.isDirectMemoryPageAligned();   <span class="comment">//是否直接内存分页对齐，需要额外计算</span></span><br><span class="line">    <span class="type">int</span> <span class="variable">ps</span> <span class="operator">=</span> Bits.pageSize();</span><br><span class="line">    <span class="type">long</span> <span class="variable">size</span> <span class="operator">=</span> Math.max(<span class="number">1L</span>, (<span class="type">long</span>)cap + (pa ? ps : <span class="number">0</span>));   <span class="comment">//计算出最终需要申请的大小</span></span><br><span class="line">  <span class="comment">//判断堆外内存是否足够，够的话就作为保留内存</span></span><br><span class="line">    Bits.reserveMemory(size, cap);</span><br><span class="line"></span><br><span class="line">    <span class="type">long</span> <span class="variable">base</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">      <span class="comment">//通过Unsafe申请内存空间，并得到内存地址</span></span><br><span class="line">        base = unsafe.allocateMemory(size);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">      <span class="comment">//申请失败就取消一开始的保留内存</span></span><br><span class="line">        Bits.unreserveMemory(size, cap);</span><br><span class="line">        <span class="keyword">throw</span> x;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//批量将申请到的这一段内存每个字节都设定为0</span></span><br><span class="line">    unsafe.setMemory(base, size, (<span class="type">byte</span>) <span class="number">0</span>);</span><br><span class="line">    <span class="keyword">if</span> (pa &amp;&amp; (base % ps != <span class="number">0</span>)) &#123;</span><br><span class="line">        <span class="comment">// Round up to page boundary</span></span><br><span class="line">        address = base + ps - (base &amp; (ps - <span class="number">1</span>));</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      <span class="comment">//将address变量（在Buffer中定义）设定为base的地址</span></span><br><span class="line">        address = base;</span><br><span class="line">    &#125;</span><br><span class="line">  <span class="comment">//创建一个针对于此缓冲区的Cleaner，由于是堆外内存，所以现在由它来进行内存清理</span></span><br><span class="line">    cleaner = Cleaner.create(<span class="built_in">this</span>, <span class="keyword">new</span> <span class="title class_">Deallocator</span>(base, size, cap));</span><br><span class="line">    att = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到在构造方法中，是直接通过Unsafe类来申请足够的堆外内存保存数据，那么当我们不使用此缓冲区时，内存会被如何清理呢？我们来看看这个Cleaner：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Cleaner</span> <span class="keyword">extends</span> <span class="title class_">PhantomReference</span>&lt;Object&gt;&#123; <span class="comment">//继承自鬼引用，也就是说此对象会存放一个没有任何引用的对象</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">//引用队列，PhantomReference构造方法需要</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> ReferenceQueue&lt;Object&gt; dummyQueue = <span class="keyword">new</span> <span class="title class_">ReferenceQueue</span>&lt;&gt;();</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//执行清理的具体流程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Runnable thunk;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">static</span> <span class="keyword">private</span> <span class="type">Cleaner</span> <span class="variable">first</span> <span class="operator">=</span> <span class="literal">null</span>;  <span class="comment">//Cleaner双向链表，每创建一个Cleaner对象都会添加一个结点</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">Cleaner</span></span><br><span class="line">        <span class="variable">next</span> <span class="operator">=</span> <span class="literal">null</span>,</span><br><span class="line">        prev = <span class="literal">null</span>;</span><br><span class="line">  </span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Cleaner <span class="title function_">add</span><span class="params">(Cleaner cl)</span> &#123;   <span class="comment">//添加操作会让新来的变成新的头结点</span></span><br><span class="line">        <span class="keyword">if</span> (first != <span class="literal">null</span>) &#123;</span><br><span class="line">            cl.next = first;</span><br><span class="line">            first.prev = cl;</span><br><span class="line">        &#125;</span><br><span class="line">        first = cl;</span><br><span class="line">        <span class="keyword">return</span> cl;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//可以看到创建鬼引用的对象就是传进的缓冲区对象</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Cleaner</span><span class="params">(Object referent, Runnable thunk)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(referent, dummyQueue);</span><br><span class="line">      <span class="comment">//清理流程实际上是外面的Deallocator</span></span><br><span class="line">        <span class="built_in">this</span>.thunk = thunk;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">//通过此方法创建一个新的Cleaner</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Cleaner <span class="title function_">create</span><span class="params">(Object ob, Runnable thunk)</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (thunk == <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">return</span> add(<span class="keyword">new</span> <span class="title class_">Cleaner</span>(ob, thunk));   <span class="comment">//调用add方法将Cleaner添加到队列</span></span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//清理操作</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">clean</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!remove(<span class="built_in">this</span>))</span><br><span class="line">            <span class="keyword">return</span>;    <span class="comment">//进行清理操作时会从双向队列中移除当前Cleaner，false说明已经移除过了，直接return</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            thunk.run();   <span class="comment">//这里就是直接执行具体清理流程</span></span><br><span class="line">        &#125; <span class="keyword">catch</span> (<span class="keyword">final</span> Throwable x) &#123;</span><br><span class="line">            ...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>那么我们先来看看具体的清理程序在做些什么，Deallocator是在直接缓冲区中声明的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Deallocator</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> Unsafe.getUnsafe();</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> address;   <span class="comment">//内存地址</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">long</span> size;    <span class="comment">//大小</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> capacity;   <span class="comment">//申请的容量</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Deallocator</span><span class="params">(<span class="type">long</span> address, <span class="type">long</span> size, <span class="type">int</span> capacity)</span> &#123;</span><br><span class="line">        <span class="keyword">assert</span> (address != <span class="number">0</span>);</span><br><span class="line">        <span class="built_in">this</span>.address = address;</span><br><span class="line">        <span class="built_in">this</span>.size = size;</span><br><span class="line">        <span class="built_in">this</span>.capacity = capacity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;   <span class="comment">//具体的清理操作</span></span><br><span class="line">        <span class="keyword">if</span> (address == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="comment">// Paranoia</span></span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        unsafe.freeMemory(address);   <span class="comment">//这里是直接调用了Unsafe进行内存释放操作</span></span><br><span class="line">        address = <span class="number">0</span>;   <span class="comment">//内存地址改为0，NULL</span></span><br><span class="line">        Bits.unreserveMemory(size, capacity);   <span class="comment">//取消一开始的保留内存</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>好了，现在我们可以明确在清理的时候实际上也是调用Unsafe类进行内存释放操作，那么，这个清理操作具体是在什么时候进行的呢？首先我们要明确，如果是普通的堆缓冲区，由于使用的数组，那么一旦此对象没有任何引用时，就随时都会被GC给回收掉，但是现在是堆外内存，只能我们手动进行内存回收，那么当DirectByteBuffer也失去引用时，会不会触发内存回收呢？</p><p>答案是可以的，还记得我们刚刚看到Cleaner是PhantomReference的子类吗，而DirectByteBuffer是被鬼引用的对象，而具体的清理操作是Cleaner类的clean方法，莫非这两者有什么联系吗？</p><p>你别说，还真有，我们直接看到PhantomReference的父类Reference，我们会发现这样一个类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">ReferenceHandler</span> <span class="keyword">extends</span> <span class="title class_">Thread</span> &#123;</span><br><span class="line">  ...</span><br><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line">            <span class="comment">// 预加载并初始化 InterruptedException 和 Cleaner 类</span></span><br><span class="line">        <span class="comment">// 以避免出现在循环运行过程中时由于内存不足而无法加载</span></span><br><span class="line">            ensureClassInitialized(InterruptedException.class);</span><br><span class="line">            ensureClassInitialized(Cleaner.class);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">            tryHandlePending(<span class="literal">true</span>);   <span class="comment">//这里是一个无限循环调用tryHandlePending方法</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> T referent;         <span class="comment">/* 会被GC回收的对象，也就是我们给过来被引用的对象 */</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">volatile</span> ReferenceQueue&lt;? <span class="built_in">super</span> T&gt; queue;  <span class="comment">//引用队列，可以和下面的next搭配使用，形成链表</span></span><br><span class="line"><span class="comment">//Reference对象也是一个一个连起来的节点，这样才能放到ReferenceQueue中形成链表</span></span><br><span class="line"><span class="keyword">volatile</span> Reference next;</span><br><span class="line"></span><br><span class="line"><span class="comment">//即将被GC的引用链表</span></span><br><span class="line"><span class="keyword">transient</span> <span class="keyword">private</span> Reference&lt;T&gt; discovered;  <span class="comment">/* 由虚拟机操作 */</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//pending与discovered一起构成了一个pending单向链表，标记为static类所有，pending为链表的头节点，discovered为链表当前</span></span><br><span class="line"><span class="comment">//Reference节点指向下一个节点的引用，这个队列是由JVM构建的，当对象除了被reference引用之外没有其它强引用了，JVM就会将指向</span></span><br><span class="line"><span class="comment">//需要回收的对象的Reference对象都放入到这个队列里面，这个队列会由下面的 Reference Hander 线程来处理。</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Reference&lt;Object&gt; pending = <span class="literal">null</span>;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;    <span class="comment">//Reference类的静态代码块</span></span><br><span class="line">    <span class="type">ThreadGroup</span> <span class="variable">tg</span> <span class="operator">=</span> Thread.currentThread().getThreadGroup();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">ThreadGroup</span> <span class="variable">tgn</span> <span class="operator">=</span> tg;</span><br><span class="line">         tgn != <span class="literal">null</span>;</span><br><span class="line">         tg = tgn, tgn = tg.getParent());</span><br><span class="line">    <span class="type">Thread</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReferenceHandler</span>(tg, <span class="string">&quot;Reference Handler&quot;</span>);   <span class="comment">//在一开始的时候就会创建</span></span><br><span class="line">    handler.setPriority(Thread.MAX_PRIORITY);   <span class="comment">//以最高优先级启动</span></span><br><span class="line">    handler.setDaemon(<span class="literal">true</span>);    <span class="comment">//此线程直接作为一个守护线程</span></span><br><span class="line">    handler.start();    <span class="comment">//也就是说在一开始的时候这个守护线程就会启动</span></span><br><span class="line"></span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>那么也就是说Reference Handler线程是在一开始就启动了，那么我们的关注点可以放在<code>tryHandlePending</code>方法上，看看这玩意到底在做个啥：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">tryHandlePending</span><span class="params">(<span class="type">boolean</span> waitForNotify)</span> &#123;</span><br><span class="line">    Reference&lt;Object&gt; r;</span><br><span class="line">    Cleaner c;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (lock) &#123;   <span class="comment">//加锁办事</span></span><br><span class="line">          <span class="comment">//当Cleaner引用的DirectByteBuffer对象即将被回收时，pending会变成此Cleaner对象</span></span><br><span class="line">          <span class="comment">//这里判断到pending不为null时就需要处理一下对象销毁了</span></span><br><span class="line">            <span class="keyword">if</span> (pending != <span class="literal">null</span>) &#123;</span><br><span class="line">                r = pending;</span><br><span class="line">                <span class="comment">// &#x27;instanceof&#x27; 有时会导致内存溢出，所以将r从链表中移除之前就进行类型判断</span></span><br><span class="line">                <span class="comment">// 如果是Cleaner类型就给到c</span></span><br><span class="line">                c = r <span class="keyword">instanceof</span> Cleaner ? (Cleaner) r : <span class="literal">null</span>;</span><br><span class="line">                <span class="comment">// 将pending更新为链表下一个待回收元素</span></span><br><span class="line">                pending = r.discovered;</span><br><span class="line">                r.discovered = <span class="literal">null</span>;   <span class="comment">//r不再引用下一个节点</span></span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">              <span class="comment">//否则就进入等待</span></span><br><span class="line">                <span class="keyword">if</span> (waitForNotify) &#123;</span><br><span class="line">                    lock.wait();</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> waitForNotify;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (OutOfMemoryError x) &#123;</span><br><span class="line">        Thread.<span class="keyword">yield</span>();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (InterruptedException x) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 如果元素是Cleaner类型，c在上面就会被赋值，这里就会执行其clean方法（破案了）</span></span><br><span class="line">    <span class="keyword">if</span> (c != <span class="literal">null</span>) &#123;</span><br><span class="line">        c.clean();</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    ReferenceQueue&lt;? <span class="built_in">super</span> Object&gt; q = r.queue;</span><br><span class="line">    <span class="keyword">if</span> (q != ReferenceQueue.NULL) q.enqueue(r);  <span class="comment">//这个是引用队列，实际上就是我们之前在JVM篇中讲解的入队机制</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过对源码的解读，我们就了解了直接缓冲区的内存加载释放整个流程。和堆缓冲区一样，当直接缓冲区没有任何强引用时，就有机会被GC正常回收掉并自动释放申请的内存。</p><p>我们接着来看看直接缓冲区的读写操作是如何进行的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span> <span class="title function_">get</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> ((unsafe.getByte(ix(nextGetIndex()))));   <span class="comment">//直接通过Unsafe类读取对应地址上的byte数据</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">long</span> <span class="title function_">ix</span><span class="params">(<span class="type">int</span> i)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> address + ((<span class="type">long</span>)i &lt;&lt; <span class="number">0</span>);   <span class="comment">//ix现在是内存地址再加上i</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接着来看看写操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">put</span><span class="params">(<span class="type">byte</span> x)</span> &#123;</span><br><span class="line">    unsafe.putByte(ix(nextPutIndex()), ((x)));</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到无论是读取还是写入操作都是通过Unsafe类操作对应的内存地址完成的。</p><p>那么它的复制操作是如何实现的呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> ByteBuffer <span class="title function_">duplicate</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">DirectByteBuffer</span>(<span class="built_in">this</span>,</span><br><span class="line">                                          <span class="built_in">this</span>.markValue(),</span><br><span class="line">                                          <span class="built_in">this</span>.position(),</span><br><span class="line">                                          <span class="built_in">this</span>.limit(),</span><br><span class="line">                                          <span class="built_in">this</span>.capacity(),</span><br><span class="line">                                          <span class="number">0</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">DirectByteBuffer(DirectBuffer db,         <span class="comment">// 这里给的db是进行复制操作的DirectByteBuffer对象</span></span><br><span class="line">                           <span class="type">int</span> mark, <span class="type">int</span> pos, <span class="type">int</span> lim, <span class="type">int</span> cap,</span><br><span class="line">                           <span class="type">int</span> off) &#123;</span><br><span class="line">    <span class="built_in">super</span>(mark, pos, lim, cap);</span><br><span class="line">    address = db.address() + off;   <span class="comment">//直接继续使用之前申请的内存空间</span></span><br><span class="line">    cleaner = <span class="literal">null</span>;   <span class="comment">//因为用的是之前的内存空间，已经有对应的Cleaner了，这里不需要再搞一个</span></span><br><span class="line">    att = db;   <span class="comment">//将att设定为此对象</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，如果是进行复制操作，那么会直接会继续使用执行复制操作的DirectByteBuffer申请的内存空间。不知道各位是否能够马上联想到一个问题，我们知道，如果执行复制操作的DirectByteBuffer对象失去了强引用被回收，那么就会触发Cleaner并进行内存释放，但是有个问题就是，这段内存空间可能复制出来的DirectByteBuffer对象还需要继续使用，这时肯定是不能进行回收的，所以说这里使用了att变量将之前的DirectByteBuffer对象进行引用，以防止其失去强引用被垃圾回收，所以只要不是原来的DirectByteBuffer对象和复制出来的DirectByteBuffer对象都失去强引用时，就不会导致这段内存空间被回收。</p><p>这样，我们之前的未解之谜为啥有个<code>att</code>也就得到答案了，有关直接缓冲区的介绍，就到这里为止。</p><hr><h2 id="通道"><a href="#通道" class="headerlink" title="通道"></a>通道</h2><p>前面我们学习了NIO的基石——缓冲区，那么缓冲区具体用在什么地方呢，在本板块我们学习通道之后，相信各位就能知道了。那么，什么是通道呢？</p><p>在传统IO中，我们都是通过流进行传输，数据会源源不断从流中传出；而在NIO中，数据是放在缓冲区中进行管理，再使用通道将缓冲区中的数据传输到目的地。</p><h3 id="通道接口层次"><a href="#通道接口层次" class="headerlink" title="通道接口层次"></a>通道接口层次</h3><p>通道的根基接口是<code>Channel</code>，所以的派生接口和类都是从这里开始的，我们来看看它定义了哪些基本功能：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Channel</span> <span class="keyword">extends</span> <span class="title class_">Closeable</span> &#123;</span><br><span class="line">    <span class="comment">//通道是否处于开启状态</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//因为通道开启也需要关闭，所以实现了Closeable接口，所以这个方法懂的都懂</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接着来看看它的一些子接口，首先是最基本的读写操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ReadableByteChannel</span> <span class="keyword">extends</span> <span class="title class_">Channel</span> &#123;</span><br><span class="line">    <span class="comment">//将通道中的数据读取到给定的缓冲区中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">read</span><span class="params">(ByteBuffer dst)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">WritableByteChannel</span> <span class="keyword">extends</span> <span class="title class_">Channel</span> &#123;</span><br><span class="line">  <span class="comment">//将给定缓冲区中的数据写入到通道中</span></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">write</span><span class="params">(ByteBuffer src)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有了读写功能后，最后整合为了一个ByteChannel接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ByteChannel</span> <span class="keyword">extends</span> <span class="title class_">ReadableByteChannel</span>, WritableByteChannel&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1lphvijimj223g0lajug.jpg" alt="image-20220425092355354"></p><p>在ByteChannel之下，还有更多的派生接口：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//允许保留position和更改position的通道，以及对通道连接实体的相关操作</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">SeekableByteChannel</span> <span class="keyword">extends</span> <span class="title class_">ByteChannel</span> &#123;</span><br><span class="line">   ...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//获取当前的position</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">position</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//修改当前的position</span></span><br><span class="line">    SeekableByteChannel <span class="title function_">position</span><span class="params">(<span class="type">long</span> newPosition)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//返回此通道连接到的实体（比如文件）的当前大小</span></span><br><span class="line">    <span class="type">long</span> <span class="title function_">size</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//将此通道连接到的实体截断（比如文件，截断之后，文件后面一半就没了）为给定大小</span></span><br><span class="line">    SeekableByteChannel <span class="title function_">truncate</span><span class="params">(<span class="type">long</span> size)</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们来看，除了读写之外，Channel还可以具有响应中断的能力：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">InterruptibleChannel</span> <span class="keyword">extends</span> <span class="title class_">Channel</span> &#123;</span><br><span class="line">  <span class="comment">//当其他线程调用此方法时，在此通道上处于阻塞状态的线程会直接抛出 AsynchronousCloseException 异常</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//这是InterruptibleChannel的抽象实现，完成了一部分功能</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractInterruptibleChannel</span> <span class="keyword">implements</span> <span class="title class_">Channel</span>, InterruptibleChannel &#123;</span><br><span class="line"><span class="comment">//加锁关闭操作用到</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="type">Object</span> <span class="variable">closeLock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">  <span class="comment">//当前Channel的开启状态</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">open</span> <span class="operator">=</span> <span class="literal">true</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">AbstractInterruptibleChannel</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//关闭操作实现</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (closeLock) &#123;   <span class="comment">//同时只能有一个线程进行此操作，加锁</span></span><br><span class="line">            <span class="keyword">if</span> (!open)   <span class="comment">//如果已经关闭了，那么就不用继续了</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            open = <span class="literal">false</span>;   <span class="comment">//开启状态变成false</span></span><br><span class="line">            implCloseChannel();   <span class="comment">//开始关闭通道</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//该方法由 close 方法调用，以执行关闭通道的具体操作，仅当通道尚未关闭时才调用此方法，不会多次调用。</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">implCloseChannel</span><span class="params">()</span> <span class="keyword">throws</span> IOException;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">final</span> <span class="type">boolean</span> <span class="title function_">isOpen</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> open;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//开始阻塞（有可能一直阻塞下去）操作之前，需要调用此方法进行标记，</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">begin</span><span class="params">()</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//阻塞操作结束之后，也需要需要调用此方法，为了防止异常情况导致此方法没有被调用，建议放在finally中</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title function_">end</span><span class="params">(<span class="type">boolean</span> completed)</span></span><br><span class="line">...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而之后的一些实现类，都是基于这些接口定义的方法去进行实现的，比如FileChannel：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1muofbqbmj22520pe0yu.jpg" alt="image-20220426090845530"></p><p>这样，我们就大致了解了一下通道相关的接口定义，那么我来看看具体是如何如何使用的。</p><p>比如现在我们要实现从输入流中读取数据然后打印出来，那么之前传统IO的写法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="comment">//数组创建好，一会用来存放从流中读取到的数据</span></span><br><span class="line">  <span class="type">byte</span>[] data = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">10</span>];</span><br><span class="line">  <span class="comment">//直接使用输入流</span></span><br><span class="line">    <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> System.in;</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="keyword">while</span> ((len = in.read(data)) &gt;= <span class="number">0</span>) &#123;  <span class="comment">//将输入流中的数据一次性读取到数组中</span></span><br><span class="line">            System.out.print(<span class="string">&quot;读取到一批数据：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(data, <span class="number">0</span>, len));  <span class="comment">//读取了多少打印多少</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而现在我们使用通道之后：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  <span class="comment">//缓冲区创建好，一会就靠它来传输数据</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    <span class="comment">//将System.in作为输入源，一会Channel就可以从这里读取数据，然后通过缓冲区装载一次性传递数据</span></span><br><span class="line">    <span class="type">ReadableByteChannel</span> <span class="variable">readChannel</span> <span class="operator">=</span> Channels.newChannel(System.in);</span><br><span class="line">    <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">        <span class="comment">//将通道中的数据写到缓冲区中，缓冲区最多一次装10个</span></span><br><span class="line">        readChannel.read(buffer);</span><br><span class="line">        <span class="comment">//写入操作结束之后，需要进行翻转，以便接下来的读取操作</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        <span class="comment">//最后转换成String打印出来康康</span></span><br><span class="line">        System.out.println(<span class="string">&quot;读取到一批数据：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">        <span class="comment">//回到最开始的状态</span></span><br><span class="line">        buffer.clear();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>乍一看，好像感觉也没啥区别，不就是把数组换成缓冲区了吗，效果都是一样的，数据也是从Channel中读取得到，并且通过缓冲区进行数据装载然后得到结果，但是，Channel不像流那样是单向的，它就像它的名字一样，一个通道可以从一端走到另一端，也可以从另一端走到这一端，我们后面进行介绍。</p><h3 id="文件传输FileChannel"><a href="#文件传输FileChannel" class="headerlink" title="文件传输FileChannel"></a>文件传输FileChannel</h3><p>前面我们介绍了通道的基本情况，这里我们就来尝试实现一下文件的读取和写入，在传统IO中，文件的写入和输出都是依靠FileOutputStream和FileInputStream来完成的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>))&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">data</span> <span class="operator">=</span> <span class="string">&quot;伞兵一号卢本伟准备就绪！&quot;</span>;</span><br><span class="line">        out.write(data.getBytes());   <span class="comment">//向文件的输出流中写入数据，也就是把数据写到文件中</span></span><br><span class="line">        out.flush();</span><br><span class="line"></span><br><span class="line">        <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[in.available()];</span><br><span class="line">        in.read(bytes);    <span class="comment">//从文件的输入流中读取文件的信息</span></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(bytes));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>而现在，我们只需要通过一个FileChannel就可以完成这两者的操作，获取文件通道的方式有以下几种：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 直接通过输入或输出流获取对应的通道</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//但是这里的通道只支持读取或是写入操作</span></span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> in.getChannel();</span><br><span class="line">    <span class="comment">//创建一个容量为128的缓冲区</span></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">    <span class="comment">//从通道中将数据读取到缓冲区中</span></span><br><span class="line">    channel.read(buffer);</span><br><span class="line">    <span class="comment">//翻转一下，接下来要读取了</span></span><br><span class="line">    buffer.flip();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到通过输入流获取的文件通道读取是没有任何问题的，但是写入操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 直接通过输入或输出流获取对应的通道</span></span><br><span class="line">    <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//但是这里的通道只支持读取或是写入操作</span></span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> in.getChannel();</span><br><span class="line">    <span class="comment">//尝试写入一下</span></span><br><span class="line">    channel.write(ByteBuffer.wrap(<span class="string">&quot;伞兵一号卢本伟准备就绪！&quot;</span>.getBytes()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1mx9in88jj21l403mgmo.jpg" alt="image-20220426103818019"></p><p>直接报错，说明只支持读取操作，那么输出流呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 直接通过输入或输出流获取对应的通道</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//但是这里的通道只支持读取或是写入操作</span></span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> out.getChannel();</span><br><span class="line">    <span class="comment">//尝试写入一下</span></span><br><span class="line">    channel.write(ByteBuffer.wrap(<span class="string">&quot;伞兵一号卢本伟准备就绪！&quot;</span>.getBytes()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到能够正常进行写入，但是读取呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//1. 直接通过输入或输出流获取对应的通道</span></span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test.txt&quot;</span>);</span><br><span class="line">    <span class="comment">//但是这里的通道只支持读取或是写入操作</span></span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> out.getChannel();</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">    <span class="comment">//从通道中将数据读取到缓冲区中</span></span><br><span class="line">    channel.read(buffer);</span><br><span class="line">    <span class="comment">//翻转一下，接下来要读取了</span></span><br><span class="line">    buffer.flip();</span><br><span class="line"></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1mxbknxa4j21gg03ijsd.jpg" alt="image-20220426104016649"></p><p>可以看到输出流生成的Channel又不支持读取，所以说本质上还是保持着输入输出流的特性，但是之前不是说Channel又可以输入又可以输出吗？这里我们来看看第二种方式：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//RandomAccessFile能够支持文件的随机访问，并且实现了数据流</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RandomAccessFile</span> <span class="keyword">implements</span> <span class="title class_">DataOutput</span>, DataInput, Closeable &#123;</span><br></pre></td></tr></table></figure><p>我们可以通过RandomAccessFile来创建通道：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      通过RandomAccessFile进行创建，注意后面的mode有几种：</span></span><br><span class="line"><span class="comment">      r        以只读的方式使用</span></span><br><span class="line"><span class="comment">      rw   读操作和写操作都可以</span></span><br><span class="line"><span class="comment">      rws  每当进行写操作，同步的刷新到磁盘，刷新内容和元数据</span></span><br><span class="line"><span class="comment">      rwd  每当进行写操作，同步的刷新到磁盘，刷新内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span>(<span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在我们来测试一下它的读写操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">      通过RandomAccessFile进行创建，注意后面的mode有几种：</span></span><br><span class="line"><span class="comment">      r        以只读的方式使用</span></span><br><span class="line"><span class="comment">      rw   读操作和写操作都可以</span></span><br><span class="line"><span class="comment">      rws  每当进行写操作，同步的刷新到磁盘，刷新内容和元数据</span></span><br><span class="line"><span class="comment">      rwd  每当进行写操作，同步的刷新到磁盘，刷新内容</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span>(<span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);  <span class="comment">//这里设定为支持读写，这样创建的通道才能具有这些功能</span></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> f.getChannel())&#123;   <span class="comment">//通过RandomAccessFile创建一个通道</span></span><br><span class="line">        channel.write(ByteBuffer.wrap(<span class="string">&quot;伞兵二号马飞飞准备就绪！&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;写操作完成之后文件访问位置：&quot;</span>+channel.position());  <span class="comment">//注意读取也是从现在的位置开始</span></span><br><span class="line">        channel.position(<span class="number">0</span>);  <span class="comment">//需要将位置变回到最前面，这样下面才能从文件的最开始进行读取</span></span><br><span class="line"></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">        channel.read(buffer);</span><br><span class="line">        buffer.flip();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，一个FileChannel既可以完成文件读取，也可以完成文件的写入。</p><p>除了基本的读写操作，我们也可以直接对文件进行截断：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> f.getChannel())&#123;</span><br><span class="line">        <span class="comment">//截断文件，只留前20个字节</span></span><br><span class="line">        channel.truncate(<span class="number">20</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">        channel.read(buffer);</span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到文件的内容直接被截断了，文件内容就只剩一半了。</p><p>当然，如果我们要进行文件的拷贝，也是很方便的，只需要使用通道就可以，比如我们现在需要将一个通道的数据写入到另一个通道，就可以直接使用transferTo方法：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test2.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">inChannel</span> <span class="operator">=</span> in.getChannel();   <span class="comment">//获取到test文件的通道</span></span><br><span class="line">        inChannel.transferTo(<span class="number">0</span>, inChannel.size(), out.getChannel());   <span class="comment">//直接将test文件通道中的数据转到test2文件的通道中</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到执行后，文件的内容全部被复制到另一个文件了。</p><p>当然，反向操作也是可以的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">FileOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;test2.txt&quot;</span>);</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;test.txt&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">inChannel</span> <span class="operator">=</span> in.getChannel();   <span class="comment">//获取到test文件的通道</span></span><br><span class="line">        out.getChannel().transferFrom(inChannel, <span class="number">0</span>, inChannel.size());   <span class="comment">//直接将从test文件通道中传来的数据转给test2文件的通道</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当我们要编辑某个文件时，通过使用MappedByteBuffer类，可以将其映射到内存中进行编辑，编辑的内容会同步更新到文件中：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//注意一定要是可写的，不然无法进行修改操作</span></span><br><span class="line"><span class="keyword">try</span>(<span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> f.getChannel())&#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过map方法映射文件的某一段内容，创建MappedByteBuffer对象</span></span><br><span class="line">    <span class="comment">//比如这里就是从第四个字节开始，映射10字节内容到内存中</span></span><br><span class="line">  <span class="comment">//注意这里需要使用MapMode.READ_WRITE模式，其他模式无法保存数据到文件</span></span><br><span class="line">    <span class="type">MappedByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> channel.map(FileChannel.MapMode.READ_WRITE, <span class="number">4</span>, <span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//我们可以直接对在内存中的数据进行编辑，也就是编辑Buffer中的内容</span></span><br><span class="line">  <span class="comment">//注意这里写入也是从pos位置开始的，默认是从0开始，相对于文件就是从第四个字节开始写</span></span><br><span class="line">  <span class="comment">//注意我们只映射了10个字节，也就是写的内容不能超出10字节了</span></span><br><span class="line">    buffer.put(<span class="string">&quot;yyds&quot;</span>.getBytes());</span><br><span class="line"></span><br><span class="line">    <span class="comment">//编辑完成后，通过force方法将数据写回文件的映射区域</span></span><br><span class="line">    buffer.force();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，文件的某一个区域已经被我们修改了，并且这里实际上使用的就是DirectByteBuffer直接缓冲区，效率还是很高的。</p><h3 id="文件锁FileLock"><a href="#文件锁FileLock" class="headerlink" title="文件锁FileLock"></a>文件锁FileLock</h3><p>我们可以创建一个跨进程文件锁来防止多个进程之间的文件争抢操作（注意这里是进程，不是线程）FileLock是文件锁，它能保证同一时间只有一个进程（程序）能够修改它，或者都只可以读，这样就解决了多进程间的同步文件，保证了安全性。但是需要注意的是，它进程级别的，不是线程级别的，他可以解决多个进程并发访问同一个文件的问题，但是它不适用于控制同一个进程中多个线程对一个文件的访问。</p><p>那么我们来看看如何使用文件锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">  <span class="comment">//创建RandomAccessFile对象，并拿到Channel</span></span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> f.getChannel();</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 正在尝试获取文件锁...&quot;</span>);</span><br><span class="line">  <span class="comment">//接着我们直接使用lock方法进行加锁操作（如果其他进程已经加锁，那么会一直阻塞在这里）</span></span><br><span class="line">  <span class="comment">//加锁操作支持对文件的某一段进行加锁，比如这里就是从0开始后的6个字节加锁，false代表这是一把独占锁</span></span><br><span class="line">  <span class="comment">//范围锁甚至可以提前加到一个还未写入的位置上</span></span><br><span class="line">    <span class="type">FileLock</span> <span class="variable">lock</span> <span class="operator">=</span> channel.lock(<span class="number">0</span>, <span class="number">6</span>, <span class="literal">false</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 已获取到文件锁！&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);   <span class="comment">//假设要处理5秒钟</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 操作完毕，释放文件锁！&quot;</span>);</span><br><span class="line">  </span><br><span class="line">  <span class="comment">//操作完成之后使用release方法进行锁释放</span></span><br><span class="line">    lock.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>有关共享锁和独占锁：</p><ul><li>进程对文件加独占锁后，当前进程对文件可读可写，独占此文件，其它进程是不能读该文件进行读写操作的。</li><li>进程对文件加共享锁后，进程可以对文件进行读操作，但是无法进行写操作，共享锁可以被多个进程添加，但是只要存在共享锁，就不能添加独占锁。</li></ul><p>现在我们来启动两个进程试试看，我们需要在IDEA中配置一下两个启动项：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1n5uyrdjij21t40hsmzt.jpg" alt="image-20220426153541728"></p><p>现在我们依次启动它们：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1n5vwim5ej21hc06ct9x.jpg" alt="image-20220426153636218"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1n5w43wzxj21ii06igmw.jpg" alt="image-20220426153648363"></p><p>可以看到确实是两个进程同一时间只能有一个进行访问，而另一个需要等待锁释放。</p><p>那么如果我们申请的是文件的不同部分呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中一个进程锁 0 - 5</span></span><br><span class="line"><span class="type">FileLock</span> <span class="variable">lock</span> <span class="operator">=</span> channel.lock(<span class="number">0</span>, <span class="number">6</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//另一个进程锁 6 - 11</span></span><br><span class="line"><span class="type">FileLock</span> <span class="variable">lock</span> <span class="operator">=</span> channel.lock(<span class="number">6</span>, <span class="number">6</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>可以看到，两个进程这时就可以同时进行加锁操作了，因为它们锁的是不同的段落。</p><p>那么要是交叉呢？</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//其中一个进程锁 0 - 5</span></span><br><span class="line"><span class="type">FileLock</span> <span class="variable">lock</span> <span class="operator">=</span> channel.lock(<span class="number">0</span>, <span class="number">6</span>, <span class="literal">false</span>);</span><br><span class="line"><span class="comment">//另一个进程锁 3 - 8</span></span><br><span class="line"><span class="type">FileLock</span> <span class="variable">lock</span> <span class="operator">=</span> channel.lock(<span class="number">3</span>, <span class="number">6</span>, <span class="literal">false</span>);</span><br></pre></td></tr></table></figure><p>可以看到交叉的情况下也是会出现阻塞的。</p><p>接着我们来看看共享锁，共享锁允许多个进程同时加锁，但是不能进行写操作：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        <span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> f.getChannel();</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 正在尝试获取文件锁...&quot;</span>);</span><br><span class="line">        <span class="comment">//现在使用共享锁</span></span><br><span class="line">        <span class="type">FileLock</span> <span class="variable">lock</span> <span class="operator">=</span> channel.lock(<span class="number">0</span>, Long.MAX_VALUE, <span class="literal">true</span>);</span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 已获取到文件锁！&quot;</span>);</span><br><span class="line">  <span class="comment">//进行写操作</span></span><br><span class="line">        channel.write(ByteBuffer.wrap(<span class="keyword">new</span> <span class="title class_">Date</span>().toString().getBytes()));</span><br><span class="line">       </span><br><span class="line">        System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 操作完毕，释放文件锁！&quot;</span>);</span><br><span class="line">        <span class="comment">//操作完成之后使用release方法进行锁释放</span></span><br><span class="line">        lock.release();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>当我们进行写操作时：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1ni0yi6vcj21t008ugo8.jpg" alt="image-20220426223636761"></p><p>可以看到直接抛出异常，说另一个程序已锁定文件的一部分，进程无法访问（某些系统或是环境实测无效，比如UP主的arm架构MacOS就不生效，这个异常是在Windows环境下运行得到的）</p><p>当然，我们也可以测试一下多个进行同时加共享锁：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> f.getChannel();</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 正在尝试获取文件锁...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">FileLock</span> <span class="variable">lock</span> <span class="operator">=</span> channel.lock(<span class="number">0</span>, Long.MAX_VALUE, <span class="literal">true</span>);</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 已获取到文件锁！&quot;</span>);</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);   <span class="comment">//假设要处理5秒钟</span></span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 操作完毕，释放文件锁！&quot;</span>);</span><br><span class="line">    </span><br><span class="line">    lock.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到结果是多个进程都能加共享锁：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1niehdyqkj21eg03wgm2.jpg" alt="image-20220426224938834"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1nier022vj21go03mwex.jpg" alt="image-20220426224954291"></p><p>当然，除了直接使用<code>lock()</code>方法进行加锁之外，我们也可以使用<code>tryLock()</code>方法以非阻塞方式获取文件锁，但是如果获取锁失败会得到null：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">f</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(<span class="string">&quot;test.txt&quot;</span>, <span class="string">&quot;rw&quot;</span>);</span><br><span class="line">    <span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> f.getChannel();</span><br><span class="line">    System.out.println(<span class="keyword">new</span> <span class="title class_">Date</span>() + <span class="string">&quot; 正在尝试获取文件锁...&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">FileLock</span> <span class="variable">lock</span> <span class="operator">=</span> channel.tryLock(<span class="number">0</span>, Long.MAX_VALUE, <span class="literal">false</span>);</span><br><span class="line">    System.out.println(lock);</span><br><span class="line">    Thread.sleep(<span class="number">5000</span>);   <span class="comment">//假设要处理5秒钟</span></span><br><span class="line"></span><br><span class="line">    lock.release();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>可以看到，两个进程都去尝试获取独占锁：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1niqbuoygj218w02mq39.jpg" alt="image-20220426230102206"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1niqlky3ij21ek04igma.jpg" alt="image-20220426230117926"></p><p>第一个成功加锁的进程获得了对应的锁对象，而第二个进程直接得到的是<code>null</code>。</p><p>到这里，有关文件锁的相关内容就差不多了。</p><hr><h2 id="多路复用网络通信"><a href="#多路复用网络通信" class="headerlink" title="多路复用网络通信"></a>多路复用网络通信</h2><p>前面我们已经介绍了NIO框架的两大核心：Buffer和Channel，我们接着来看看最后一个内容。</p><h3 id="传统阻塞I-O网络通信"><a href="#传统阻塞I-O网络通信" class="headerlink" title="传统阻塞I&#x2F;O网络通信"></a>传统阻塞I&#x2F;O网络通信</h3><p>说起网络通信，相信各位并不陌生，正是因为网络的存在我们才能走进现代化的社会，在JavaWeb阶段，我们学习了如何使用Socket建立TCP连接进行网络通信：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">ServerSocket</span> <span class="variable">server</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ServerSocket</span>(<span class="number">8080</span>))&#123;    <span class="comment">//将服务端创建在端口8080上</span></span><br><span class="line">        System.out.println(<span class="string">&quot;正在等待客户端连接...&quot;</span>);</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> server.accept();</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端已连接，IP地址为：&quot;</span>+socket.getInetAddress().getHostAddress());</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));  <span class="comment">//通过</span></span><br><span class="line">        System.out.print(<span class="string">&quot;接收到客户端数据：&quot;</span>);</span><br><span class="line">        System.out.println(reader.readLine());</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(socket.getOutputStream());</span><br><span class="line">        writer.write(<span class="string">&quot;已收到！&quot;</span>);</span><br><span class="line">        writer.flush();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">         <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in))&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已连接到服务端！&quot;</span>);</span><br><span class="line">        <span class="type">OutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> socket.getOutputStream();</span><br><span class="line">        <span class="type">OutputStreamWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">OutputStreamWriter</span>(stream);  <span class="comment">//通过转换流来帮助我们快速写入内容</span></span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要发送给服务端的内容：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        writer.write(text+<span class="string">&#x27;\n&#x27;</span>);   <span class="comment">//因为对方是readLine()这里加个换行符</span></span><br><span class="line">        writer.flush();</span><br><span class="line">        System.out.println(<span class="string">&quot;数据已发送：&quot;</span>+text);</span><br><span class="line">        <span class="type">BufferedReader</span> <span class="variable">reader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(socket.getInputStream()));</span><br><span class="line">        System.out.println(<span class="string">&quot;收到服务器返回：&quot;</span>+reader.readLine());</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;服务端连接失败！&quot;</span>);</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;客户端断开连接！&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>当然，我们也可以使用前面讲解的通道来进行通信：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个新的ServerSocketChannel，一会直接使用SocketChannel进行网络IO操作</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ServerSocketChannel</span> <span class="variable">serverChannel</span> <span class="operator">=</span> ServerSocketChannel.open())&#123;</span><br><span class="line">        <span class="comment">//依然是将其绑定到8080端口</span></span><br><span class="line">        serverChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">        <span class="comment">//同样是调用accept()方法，阻塞等待新的连接到来</span></span><br><span class="line">        <span class="type">SocketChannel</span> <span class="variable">socket</span> <span class="operator">=</span> serverChannel.accept();</span><br><span class="line">        <span class="comment">//因为是通道，两端的信息都是可以明确的，这里获取远端地址，当然也可以获取本地地址</span></span><br><span class="line">        System.out.println(<span class="string">&quot;客户端已连接，IP地址为：&quot;</span>+socket.getRemoteAddress());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//使用缓冲区进行数据接收</span></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">        socket.read(buffer);   <span class="comment">//SocketChannel同时实现了读写通道接口，所以可以直接进行双向操作</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.print(<span class="string">&quot;接收到客户端数据：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//直接向通道中写入数据就行</span></span><br><span class="line">        socket.write(ByteBuffer.wrap(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//记得关</span></span><br><span class="line">        socket.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个新的SocketChannel，一会通过通道进行通信</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> SocketChannel.open(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line">         <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in))&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已连接到服务端！&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;请输入要发送给服务端的内容：&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">        <span class="comment">//直接向通道中写入数据，真舒服</span></span><br><span class="line">        channel.write(ByteBuffer.wrap(text.getBytes()));</span><br><span class="line"></span><br><span class="line">        <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">        channel.read(buffer);   <span class="comment">//直接从通道中读取数据</span></span><br><span class="line">        buffer.flip();</span><br><span class="line">        System.out.println(<span class="string">&quot;收到服务器返回：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>虽然可以通过传统的Socket进行网络通信，但是我们发现，如果要进行IO操作，我们需要单独创建一个线程来进行处理，比如现在有很多个客户端，服务端需要同时进行处理，那么如果我们要处理这些客户端的请求，那么我们就只能单独为其创建一个线程来进行处理：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1odmx2b3yj21o60dcwgh.jpg" alt="image-20220427165019293"></p><p>虽然这样看起来比较合理，但是随着客户端数量的增加，如果要保持持续通信，那么就不能摧毁这些线程，而是需要一直保留（但是实际上很多时候只是保持连接，一直在阻塞等待客户端的读写操作，IO操作的频率很低，这样就白白占用了一条线程，很多时候都是站着茅坑不拉屎），但是我们的线程不可能无限制的进行创建，总有一天会耗尽服务端的资源，那么现在怎么办呢，关键是现在又有很多客户端源源不断地连接并进行操作，这时，我们就可以利用NIO为我们提供的多路复用编程模型。</p><p>我们来看看NIO为我们提供的模型：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24ely1h1odzw1dk3j21oi0e2goy.jpg" alt="image-20220427170247004"></p><p>服务端不再是一个单纯通过<code>accept()</code>方法来创建连接的机制了，而是根据客户端不同的状态，Selector会不断轮询，只有客户端在对应的状态时，比如真正开始读写操作时，才会创建线程或进行处理（这样就不会一直阻塞等待某个客户端的IO操作了），而不是创建之后需要一直保持连接，即使没有任何的读写操作。这样就不会因为占着茅坑不拉屎导致线程无限制地创建下去了。</p><p>通过这种方式，甚至单线程都能做到高效的复用，最典型的例子就是Redis了，因为内存的速度非常快，多线程上下文的开销就会显得有些拖后腿，还不如直接单线程简单高效，这也是为什么Redis单线程也能这么快的原因。</p><p>因此，我们就从NIO框架的第三个核心内容：Selector，开始讲起。</p><h3 id="选择器与I-O多路复用"><a href="#选择器与I-O多路复用" class="headerlink" title="选择器与I&#x2F;O多路复用"></a>选择器与I&#x2F;O多路复用</h3><p>前面我们大概了解了一下选择器，我们知道，选择器是当具体有某一个状态（比如读、写、请求）已经就绪时，才会进行处理，而不是让我们的程序主动地进行等待。</p><p>既然我们现在需要实现IO多路复用，那么我们来看看常见的IO多路复用模型，也就是Selector的实现方案，比如现在有很多个用户连接到我们的服务器：</p><ul><li><strong>select</strong>：当这些连接出现具体的某个状态时，只是知道已经就绪了，但是不知道详具体是哪一个连接已经就绪，每次调用都进行线性遍历所有连接，时间复杂度为<code>O(n)</code>，并且存在最大连接数限制。</li><li><strong>poll</strong>：同上，但是由于底层采用链表，所以没有最大连接数限制。</li><li><strong>epoll</strong>：采用事件通知方式，当某个连接就绪，能够直接进行精准通知（这是因为在内核实现中epoll是根据每个fd上面的callback函数实现的，只要就绪会会直接回调callback函数，实现精准通知，但是只有Linux支持这种方式），时间复杂度<code>O(1)</code>，Java在Linux环境下正是采用的这种模式进行实现的。</li></ul><p>好了，既然多路复用模型了解完毕了，那么我们就来看看如何让我们的网络通信实现多路复用：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> (<span class="type">ServerSocketChannel</span> <span class="variable">serverChannel</span> <span class="operator">=</span> ServerSocketChannel.open();</span><br><span class="line">         <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open())&#123;   <span class="comment">//开启一个新的Selector，这玩意也是要关闭释放资源的</span></span><br><span class="line">        serverChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">        <span class="comment">//要使用选择器进行操作，必须使用非阻塞的方式，这样才不会像阻塞IO那样卡在accept()，而是直接通过，让选择器去进行下一步操作</span></span><br><span class="line">        serverChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">        <span class="comment">//将选择器注册到ServerSocketChannel中，后面是选择需要监听的时间，只有发生对应事件时才会进行选择，多个事件用 | 连接，注意，并不是所有的Channel都支持以下全部四个事件，可能只支持部分</span></span><br><span class="line">        <span class="comment">//因为是ServerSocketChannel这里我们就监听accept就可以了，等待客户端连接</span></span><br><span class="line">        <span class="comment">//SelectionKey.OP_CONNECT --- 连接就绪事件，表示客户端与服务器的连接已经建立成功</span></span><br><span class="line">        <span class="comment">//SelectionKey.OP_ACCEPT --- 接收连接事件，表示服务器监听到了客户连接，服务器可以接收这个连接了</span></span><br><span class="line">        <span class="comment">//SelectionKey.OP_READ --- 读 就绪事件，表示通道中已经有了可读的数据，可以执行读操作了</span></span><br><span class="line">        <span class="comment">//SelectionKey.OP_WRITE --- 写 就绪事件，表示已经可以向通道写数据了（这玩意比较特殊，一般情况下因为都是可以写入的，所以可能会无限循环）</span></span><br><span class="line">        serverChannel.register(selector, SelectionKey.OP_ACCEPT);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;   <span class="comment">//无限循环等待新的用户网络操作</span></span><br><span class="line">            <span class="comment">//每次选择都可能会选出多个已经就绪的网络操作，没有操作时会暂时阻塞</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.select();</span><br><span class="line">            System.out.println(<span class="string">&quot;监听到 &quot;</span>+count+<span class="string">&quot; 个事件&quot;</span>);</span><br><span class="line">            Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">            Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">            <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> iterator.next();</span><br><span class="line">                <span class="comment">//根据不同的事件类型，执行不同的操作即可</span></span><br><span class="line">                <span class="keyword">if</span>(key.isAcceptable()) &#123;  <span class="comment">//如果当前ServerSocketChannel已经做好准备处理Accept</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> serverChannel.accept();</span><br><span class="line">                    System.out.println(<span class="string">&quot;客户端已连接，IP地址为：&quot;</span>+channel.getRemoteAddress());</span><br><span class="line">                    <span class="comment">//现在连接就建立好了，接着我们需要将连接也注册选择器，比如我们需要当这个连接有内容可读时就进行处理</span></span><br><span class="line">                    channel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">                    channel.register(selector, SelectionKey.OP_READ);</span><br><span class="line">                    <span class="comment">//这样就在连接建立时完成了注册</span></span><br><span class="line">                &#125; <span class="keyword">else</span> <span class="keyword">if</span>(key.isReadable()) &#123;    <span class="comment">//如果当前连接有可读的数据并且可以写，那么就开始处理</span></span><br><span class="line">                    <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> (SocketChannel) key.channel();</span><br><span class="line">                    <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">                    channel.read(buffer);</span><br><span class="line">                    buffer.flip();</span><br><span class="line">                    System.out.println(<span class="string">&quot;接收到客户端数据：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line"></span><br><span class="line">                    <span class="comment">//直接向通道中写入数据就行</span></span><br><span class="line">                    channel.write(ByteBuffer.wrap(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">                    <span class="comment">//别关，说不定用户还要继续通信呢</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//处理完成后，一定记得移出迭代器，不然下次还有</span></span><br><span class="line">                iterator.remove();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着我们来编写一下客户客户端：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建一个新的SocketChannel，一会通过通道进行通信</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> SocketChannel.open(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>));</span><br><span class="line">         <span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in))&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;已连接到服务端！&quot;</span>);</span><br><span class="line">        <span class="keyword">while</span> (<span class="literal">true</span>) &#123;   <span class="comment">//咱给它套个无限循环，这样就能一直发消息了</span></span><br><span class="line">            System.out.println(<span class="string">&quot;请输入要发送给服务端的内容：&quot;</span>);</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">            <span class="comment">//直接向通道中写入数据，真舒服</span></span><br><span class="line">            channel.write(ByteBuffer.wrap(text.getBytes()));</span><br><span class="line">            System.out.println(<span class="string">&quot;已发送！&quot;</span>);</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">            channel.read(buffer);   <span class="comment">//直接从通道中读取数据</span></span><br><span class="line">            buffer.flip();</span><br><span class="line">            System.out.println(<span class="string">&quot;收到服务器返回：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们来看看效果：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1wf9h1v29j213w06m74t.jpg" alt="image-20220504155104437"></p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1wf9ms12cj217005uwet.jpg" alt="image-20220504155116276"></p><p>可以看到成功实现了，当然各位也可以跟自己的室友一起开客户端进行测试，现在，我们只用了一个线程，就能够同时处理多个请求，可见多路复用是多么重要。</p><h3 id="实现Reactor模式"><a href="#实现Reactor模式" class="headerlink" title="实现Reactor模式"></a>实现Reactor模式</h3><p>前面我们简单实现了多路复用网络通信，我们接着来了解一下Reactor模式，对我们的服务端进行优化。</p><p>现在我们来看看如何进行优化，我们首先抽象出两个组件，Reactor线程和Handler处理器：</p><ul><li>Reactor线程：负责响应IO事件，并分发到Handler处理器。新的事件包含连接建立就绪、读就绪、写就绪等。</li><li>Handler处理器：执行非阻塞的操作。</li></ul><p>实际上我们之前编写的算是一种单线程Reactor的朴素模型（面向过程的写法），我们来看看标准的写法：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1wgietqmhj21fq0c6tah.jpg" alt="image-20220504163417826"></p><p>客户端还是按照我们上面的方式连接到Reactor，并通过选择器走到Acceptor或是Handler，Acceptor主要负责客户端连接的建立，Handler负责读写操作，代码如下，首先是Handler：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SocketChannel channel;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.channel = channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">128</span>);</span><br><span class="line">            channel.read(buffer);</span><br><span class="line">            buffer.flip();</span><br><span class="line">            System.out.println(<span class="string">&quot;接收到客户端数据：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">            channel.write(ByteBuffer.wrap(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>接着是Acceptor，实际上就是把上面的业务代码搬个位置罢了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Acceptor主要用于处理连接操作</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Acceptor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerSocketChannel serverChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Selector selector;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Acceptor</span><span class="params">(ServerSocketChannel serverChannel, Selector selector)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serverChannel = serverChannel;</span><br><span class="line">        <span class="built_in">this</span>.selector = selector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> serverChannel.accept();</span><br><span class="line">            System.out.println(<span class="string">&quot;客户端已连接，IP地址为：&quot;</span>+channel.getRemoteAddress());</span><br><span class="line">            channel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//这里在注册时，创建好对应的Handler，这样在Reactor中分发的时候就可以直接调用Handler了</span></span><br><span class="line">            channel.register(selector, SelectionKey.OP_READ, <span class="keyword">new</span> <span class="title class_">Handler</span>(channel));</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里我们在注册时丢了一个附加对象进去，这个附加对象会在选择器选择到此通道上时，可以通过<code>attachment()</code>方法进行获取，对于我们简化代码有大作用，一会展示，我们接着来看看Reactor：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reactor</span> <span class="keyword">implements</span> <span class="title class_">Closeable</span>, Runnable&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerSocketChannel serverChannel;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Selector selector;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Reactor</span><span class="params">()</span> <span class="keyword">throws</span> IOException&#123;</span><br><span class="line">        serverChannel = ServerSocketChannel.open();</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            serverChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">8080</span>));</span><br><span class="line">            serverChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="comment">//注册时，将Acceptor作为附加对象存放，当选择器选择后也可以获取到</span></span><br><span class="line">            serverChannel.register(selector, SelectionKey.OP_ACCEPT, <span class="keyword">new</span> <span class="title class_">Acceptor</span>(serverChannel, selector));</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.select();</span><br><span class="line">                System.out.println(<span class="string">&quot;监听到 &quot;</span>+count+<span class="string">&quot; 个事件&quot;</span>);</span><br><span class="line">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.dispatch(iterator.next());   <span class="comment">//通过dispatch方法进行分发</span></span><br><span class="line">                    iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//通过此方法进行分发</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(SelectionKey key)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">att</span> <span class="operator">=</span> key.attachment();   <span class="comment">//获取attachment，ServerSocketChannel和对应的客户端Channel都添加了的</span></span><br><span class="line">        <span class="keyword">if</span>(att <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">            ((Runnable) att).run();   <span class="comment">//由于Handler和Acceptor都实现自Runnable接口，这里就统一调用一下</span></span><br><span class="line">        &#125;   <span class="comment">//这样就实现了对应的时候调用对应的Handler或是Acceptor了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//用了记得关，保持好习惯，就像看完视频要三连一样</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        serverChannel.close();</span><br><span class="line">        selector.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>最后我们编写一下主类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="comment">//创建Reactor对象，启动，完事</span></span><br><span class="line">    <span class="keyword">try</span> (<span class="type">Reactor</span> <span class="variable">reactor</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Reactor</span>())&#123;</span><br><span class="line">        reactor.run();</span><br><span class="line">    &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，我们就实现了单线程Reactor模式，注意全程使用到的都只是一个线程，没有创建新的线程来处理任何事情。</p><p>但是单线程始终没办法应对大量的请求，如果请求量上去了，单线程还是很不够用，接着我们来看看多线程Reactor模式，它创建了多个线程处理，我们可以将数据读取完成之后的操作交给线程池来执行：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1whmt5w1sj21fq0cmac7.jpg" alt="image-20220504171307721"></p><p>其实我们只需要稍微修改一下Handler就行了：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Handler</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"><span class="comment">//把线程池给安排了，10个线程</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">POOL</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> SocketChannel channel;</span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Handler</span><span class="params">(SocketChannel channel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.channel = channel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">1024</span>);</span><br><span class="line">            channel.read(buffer);</span><br><span class="line">            buffer.flip();</span><br><span class="line">            POOL.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    System.out.println(<span class="string">&quot;接收到客户端数据：&quot;</span>+<span class="keyword">new</span> <span class="title class_">String</span>(buffer.array(), <span class="number">0</span>, buffer.remaining()));</span><br><span class="line">                    channel.write(ByteBuffer.wrap(<span class="string">&quot;已收到！&quot;</span>.getBytes()));</span><br><span class="line">                &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">                    e.printStackTrace();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这样，在数据读出之后，就可以将数据处理交给线程池执行。</p><p>但是这样感觉还是划分的不够，一个Reactor需要同时处理来自客户端的所有操作请求，显得有些乏力，那么不妨我们将Reactor做成一主多从的模式，让主Reactor只负责Accept操作，而其他的Reactor进行各自的其他操作：</p><p><img src="https://tva1.sinaimg.cn/large/e6c9d24egy1h1xgciyet7j21f40cijtp.jpg" alt="image-20220505131410997"></p><p>现在我们来重新设计一下我们的代码，Reactor类就作为主节点，不进行任何修改，我们来修改一下其他的：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//SubReactor作为从Reactor</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SubReactor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>, Closeable &#123;</span><br><span class="line"><span class="comment">//每个从Reactor也有一个Selector</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> Selector selector;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//创建一个4线程的线程池，也就是四个从Reactor工作</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">POOL</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">4</span>);</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> SubReactor[] reactors = <span class="keyword">new</span> <span class="title class_">SubReactor</span>[<span class="number">4</span>];</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="type">int</span> <span class="variable">selectedIndex</span> <span class="operator">=</span> <span class="number">0</span>;  <span class="comment">//采用轮询机制，每接受一个新的连接，就轮询分配给四个从Reactor</span></span><br><span class="line">    <span class="keyword">static</span> &#123;   <span class="comment">//在一开始的时候就让4个从Reactor跑起来</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">4</span>; i++) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                reactors[i] = <span class="keyword">new</span> <span class="title class_">SubReactor</span>();</span><br><span class="line">                POOL.submit(reactors[i]);</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//轮询获取下一个Selector（Acceptor用）</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Selector <span class="title function_">nextSelector</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> reactors[selectedIndex].selector;</span><br><span class="line">        selectedIndex = (selectedIndex + <span class="number">1</span>) % <span class="number">4</span>;</span><br><span class="line">        <span class="keyword">return</span> selector;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">SubReactor</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        selector = Selector.open();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;   <span class="comment">//启动后直接等待selector监听到对应的事件即可，其他的操作逻辑和Reactor一致</span></span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">count</span> <span class="operator">=</span> selector.select();</span><br><span class="line">                System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &gt;&gt; 监听到 &quot;</span>+count+<span class="string">&quot; 个事件&quot;</span>);</span><br><span class="line">                Set&lt;SelectionKey&gt; selectionKeys = selector.selectedKeys();</span><br><span class="line">                Iterator&lt;SelectionKey&gt; iterator = selectionKeys.iterator();</span><br><span class="line">                <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">                    <span class="built_in">this</span>.dispatch(iterator.next());</span><br><span class="line">                    iterator.remove();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(SelectionKey key)</span>&#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">att</span> <span class="operator">=</span> key.attachment();</span><br><span class="line">        <span class="keyword">if</span>(att <span class="keyword">instanceof</span> Runnable) &#123;</span><br><span class="line">            ((Runnable) att).run();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">close</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        selector.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>我们接着来修改一下Acceptor类：</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Acceptor</span> <span class="keyword">implements</span> <span class="title class_">Runnable</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> ServerSocketChannel serverChannel;   <span class="comment">//只需要一个ServerSocketChannel就行了</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Acceptor</span><span class="params">(ServerSocketChannel serverChannel)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.serverChannel = serverChannel;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="type">SocketChannel</span> <span class="variable">channel</span> <span class="operator">=</span> serverChannel.accept();   <span class="comment">//还是正常进行Accept操作，得到SocketChannel</span></span><br><span class="line">            System.out.println(Thread.currentThread().getName()+<span class="string">&quot; &gt;&gt; 客户端已连接，IP地址为：&quot;</span>+channel.getRemoteAddress());</span><br><span class="line">            channel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">            <span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> SubReactor.nextSelector();   <span class="comment">//选取下一个从Reactor的Selector</span></span><br><span class="line">            selector.wakeup();    <span class="comment">//在注册之前唤醒一下防止卡死</span></span><br><span class="line">            channel.register(selector, SelectionKey.OP_READ, <span class="keyword">new</span> <span class="title class_">Handler</span>(channel));  <span class="comment">//注意现在注册的是从Reactor的Selector</span></span><br><span class="line">        &#125;<span class="keyword">catch</span> (IOException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>现在，SocketChannel相关的操作就由从Reactor进行处理了，而不是一律交给主Reactor进行操作。</p><p>至此，我们已经了解了NIO的三大组件：<em>Buffer、Channel、Selector</em>，有关NIO基础相关的内容，就讲解到这里。下一章我们将继续讲解基于NIO实现的高性能网络通信框架Netty。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>简历投递</title>
      <link href="/2024/02/21/%E7%AE%80%E5%8E%86%E6%8A%95%E9%80%92/"/>
      <url>/2024/02/21/%E7%AE%80%E5%8E%86%E6%8A%95%E9%80%92/</url>
      
        <content type="html"><![CDATA[<h1 id="已经投递公司"><a href="#已经投递公司" class="headerlink" title="已经投递公司"></a>已经投递公司</h1>]]></content>
      
      
      <categories>
          
          <category> 实习3 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 实习简历 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>设计模式</title>
      <link href="/2023/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
      <url>/2023/12/21/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="面向对象设计原则"><a href="#面向对象设计原则" class="headerlink" title="面向对象设计原则"></a>面向对象设计原则</h1><h2 id="单一职责原则"><a href="#单一职责原则" class="headerlink" title="单一职责原则"></a>单一职责原则</h2><ul><li>是最简单的面向对象设计原则，它用于控制类的粒度大小</li></ul><h2 id="开闭原则"><a href="#开闭原则" class="headerlink" title="开闭原则"></a>开闭原则</h2><ul><li>通过定义一个抽象类，而不去实现，使得业务可以灵活拓展</li></ul><h2 id="里氏替换原则"><a href="#里氏替换原则" class="headerlink" title="里氏替换原则"></a>里氏替换原则</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312212349936.webp" alt="image-20231221234927788"></p><ul><li>如果出现JavaCoder必须重写父类的方法的时候， 就不符合里氏替换原则了，那么这个时候，我们可以把自己的思维抬高，定义一个更高级的抽象类， 他没有实现某个方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">People</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span>;   <span class="comment">//这个行为还是定义出来，但是不实现</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">Coder</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;</span><br><span class="line">        <span class="meta">@Override</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;我会打代码&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="keyword">class</span> <span class="title class_">JavaCoder</span> <span class="keyword">extends</span> <span class="title class_">People</span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">game</span><span class="params">()</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;艾欧尼亚最强王者已上号&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">coding</span><span class="params">()</span> &#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;摆烂了，啊对对对&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="依赖倒转原则"><a href="#依赖倒转原则" class="headerlink" title="依赖倒转原则"></a>依赖倒转原则</h2><blockquote><p>高层模块不应依赖于底层模块，它们都应该依赖抽象。抽象不应依赖于细节，细节应该依赖于抽象。</p></blockquote><h2 id="接口隔离原则"><a href="#接口隔离原则" class="headerlink" title="接口隔离原则"></a>接口隔离原则</h2><blockquote><p>客户端不应依赖那些它不需要的接口。</p></blockquote><ul><li>接口的定义要尽可能的细致</li></ul><h2 id="合成复用原则"><a href="#合成复用原则" class="headerlink" title="合成复用原则"></a>合成复用原则</h2><blockquote><p>合成复用原则（Composite Reuse Principle）的核心就是委派。</p></blockquote><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20231222000735918.png" alt="image-20231222000735918"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20231222000744496.png" alt="image-20231222000744496"></p><h2 id="迪米特法则"><a href="#迪米特法则" class="headerlink" title="迪米特法则"></a>迪米特法则</h2><blockquote><p>每一个软件单位对其他单位都只有最少的知识，而且局限于那些与本单位密切相关的软件单位</p></blockquote><ul><li>降低类与类之间的耦合度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);   <span class="comment">//假设我们当前的程序需要进行网络通信</span></span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.test(socket);   <span class="comment">//现在需要执行test方法来做一些事情</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="comment">/**</span></span><br><span class="line"><span class="comment">         * 比如test方法需要得到我们当前Socket连接的本地地址</span></span><br><span class="line"><span class="comment">         */</span></span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Socket socket)</span>&#123;</span><br><span class="line">            System.out.println(<span class="string">&quot;IP地址：&quot;</span>+socket.getLocalAddress());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">Socket</span> <span class="variable">socket</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Socket</span>(<span class="string">&quot;localhost&quot;</span>, <span class="number">8080</span>);</span><br><span class="line">        <span class="type">Test</span> <span class="variable">test</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line">        test.test(socket.getLocalAddress().getHostAddress());  <span class="comment">//在外面解析好就行了</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Test</span> &#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(String str)</span>&#123;   <span class="comment">//一个字符串就能搞定，就没必要丢整个对象进来</span></span><br><span class="line">            System.out.println(<span class="string">&quot;IP地址：&quot;</span>+str);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="创建型"><a href="#创建型" class="headerlink" title="创建型"></a>创建型</h1><h2 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h2><ul><li>原本</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FruitFactory</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 这里就直接来一个静态方法根据指定类型进行创建</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> type 水果类型</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 对应的水果对象</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Fruit <span class="title function_">getFruit</span><span class="params">(String type)</span> &#123;</span><br><span class="line">        <span class="keyword">switch</span> (type) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="string">&quot;苹果&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">           <span class="keyword">case</span> <span class="string">&quot;橘子&quot;</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Orange</span>();</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Fruit</span> <span class="variable">fruit</span> <span class="operator">=</span> FruitFactory.getFruit(<span class="string">&quot;橘子&quot;</span>);   <span class="comment">//直接问工厂要，而不是我们自己去创建</span></span><br><span class="line">        System.out.println(fruit);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>优化后<ul><li>满足了开闭原则</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">FruitFactory</span>&lt;T <span class="keyword">extends</span> <span class="title class_">Fruit</span>&gt; &#123;   <span class="comment">//将水果工厂抽象为抽象类，添加泛型T由子类指定水果类型</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> T <span class="title function_">getFruit</span><span class="params">()</span>;  <span class="comment">//不同的水果工厂，通过此方法生产不同的水果</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AppleFactory</span> <span class="keyword">extends</span> <span class="title class_">FruitFactory</span>&lt;Apple&gt; &#123;  <span class="comment">//苹果工厂，直接返回Apple，一步到位</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Apple <span class="title function_">getFruit</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Apple</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Main</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        test(<span class="keyword">new</span> <span class="title class_">AppleFactory</span>()::getFruit);   <span class="comment">//比如我们现在要吃一个苹果，那么就直接通过苹果工厂来获取苹果</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//此方法模拟吃掉一个水果</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">(Supplier&lt;Fruit&gt; supplier)</span>&#123;</span><br><span class="line">        System.out.println(supplier.get()+<span class="string">&quot; 被吃掉了，真好吃。&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="抽象工厂模式"><a href="#抽象工厂模式" class="headerlink" title="抽象工厂模式"></a>抽象工厂模式</h2><ul><li><p>上面的方法对于产品类较少的时候，还可以用，但是一旦数量过多了，就会出现问题</p></li><li><p>但是违背了开闭原则</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Router</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Table</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Phone</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">class</span> <span class="title class_">AbstractFactory</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Phone <span class="title function_">getPhone</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Table <span class="title function_">getTable</span><span class="params">()</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">abstract</span> Router <span class="title function_">getRouter</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title="建造者模式"></a>建造者模式</h2><blockquote><p>实际上我们是通过建造者来不断配置参数或是内容，当我们配置完所有内容后，最后再进行对象的构建。</p><p>相比直接去new一个新的对象，建造者模式的重心更加关注在如何完成每一步的配置，同时如果一个类的构造方法参数过多，我们通过建造者模式来创建这个对象，会更加优雅。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">    <span class="comment">//一律使用建造者来创建，不对外直接开放</span></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Student</span><span class="params">(<span class="type">int</span> id, <span class="type">int</span> age, <span class="type">int</span> grade, String name, String college, String profession, List&lt;String&gt; awards)</span> &#123;</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> StudentBuilder <span class="title function_">builder</span><span class="params">()</span>&#123;   <span class="comment">//通过builder方法直接获取建造者</span></span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">StudentBuilder</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">StudentBuilder</span>&#123;   <span class="comment">//这里就直接创建一个内部类</span></span><br><span class="line">        <span class="comment">//Builder也需要将所有的参数都进行暂时保存，所以Student怎么定义的这里就怎么定义</span></span><br><span class="line">        <span class="type">int</span> id;</span><br><span class="line">        <span class="type">int</span> age;</span><br><span class="line">        <span class="type">int</span> grade;</span><br><span class="line">        String name;</span><br><span class="line">        String college;</span><br><span class="line">        String profession;</span><br><span class="line">        List&lt;String&gt; awards;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">id</span><span class="params">(<span class="type">int</span> id)</span>&#123;    <span class="comment">//直接调用建造者对应的方法，为对应的属性赋值</span></span><br><span class="line">            <span class="built_in">this</span>.id = id;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;   <span class="comment">//为了支持链式调用，这里直接返回建造者本身，下同</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">age</span><span class="params">(<span class="type">int</span> age)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.age = age;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">      </span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> StudentBuilder <span class="title function_">awards</span><span class="params">(String... awards)</span>&#123;</span><br><span class="line">            <span class="built_in">this</span>.awards = Arrays.asList(awards);</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">public</span> Student <span class="title function_">build</span><span class="params">()</span>&#123;    <span class="comment">//最后我们只需要调用建造者提供的build方法即可根据我们的配置返回一个对象</span></span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Student</span>(id, age, grade, name, college, profession, awards);</span><br><span class="line">        toolbarsFlag&#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h2><blockquote><p>那么，什么是单例模式呢？顾名思义，单例那么肯定就是只有一个实例对象，在我们的整个程序中，同一个类始终只会有一个对象来进行操作。比如数据库连接类，实际上我们只需要创建一个对象或是直接使用静态方法就可以了，没必要去创建多个对象。</p></blockquote><h3 id="普通模式"><a href="#普通模式" class="headerlink" title="普通模式"></a>普通模式</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();   <span class="comment">//用于引用全局唯一的单例对象，在一开始就创建好</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;   <span class="comment">//不允许随便new，需要对象直接找getInstance</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;   <span class="comment">//获取全局唯一的单例对象</span></span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="懒汉模式"><a href="#懒汉模式" class="headerlink" title="懒汉模式"></a>懒汉模式</h3><ul><li><p>在多线程环境下， 懒汉模式存在安全问题</p></li><li><p>等到用的时候，才去创建对象</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> Singleton INSTANCE;   <span class="comment">//在一开始先不进行对象创建</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;   <span class="comment">//不用多说了吧</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;   <span class="comment">//将对象的创建延后到需要时再进行</span></span><br><span class="line">        <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>) &#123;    <span class="comment">//如果实例为空，那么就进行创建，不为空说明已经创建过了，那么就直接返回</span></span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> INSTANCE;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>然而，我们可以对这个方法进行加锁优化</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;   <span class="comment">//方法必须添加synchronized关键字加锁</span></span><br><span class="line">    <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">        INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>但是这样速度又太慢了， 我们可以降低锁的粒度</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(INSTANCE == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (Singleton.class) &#123;    <span class="comment">//实际上只需要对赋值这一步进行加锁即可</span></span><br><span class="line">            INSTANCE = <span class="keyword">new</span> <span class="title class_">Singleton</span>();   </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> INSTANCE;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>可以看到，这种情况下，IDEA会要求我们添加一个<code>volatile</code>给<code>INSTANCE</code>，各位还记得这个关键字有什么作用吗？没错，我们还需要保证<code>INSTANCE</code>在线程之间的可见性，这样当其他线程进入之后才会拿<code>INSTANCE</code>由其他线程更新的最新值去判断，这样，就差不多完美了。</p></blockquote><ul><li>最完美的懒汉模式<ul><li>只有真正使用内部类的时候， 才会进行初始化</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Singleton</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Singleton</span><span class="params">()</span> &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">Holder</span> &#123;   <span class="comment">//由静态内部类持有单例对象，但是根据类加载特性，我们仅使用Singleton类时，不会对静态内部类进行初始化</span></span><br><span class="line">        <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> <span class="type">Singleton</span> <span class="variable">INSTANCE</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Singleton</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title function_">getInstance</span><span class="params">()</span>&#123;   <span class="comment">//只有真正使用内部类时，才会进行类初始化</span></span><br><span class="line">        <span class="keyword">return</span> Holder.INSTANCE;   <span class="comment">//直接获取内部类中的</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="原型模式"><a href="#原型模式" class="headerlink" title="原型模式"></a>原型模式</h2><blockquote><p>并且通过复制这个原型来创建新的对象。也就是说，原型对象作为模板，通过克隆操作，来产生更多的对象，就像细胞的复制一样。</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> <span class="keyword">implements</span> <span class="title class_">Cloneable</span>&#123;</span><br><span class="line">    </span><br><span class="line">    String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Student</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">super</span>.clone();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>使用这个方式，虽然这个对象是新创建的， 但是其中的属性和方法，确还是引用类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student0</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Student</span>(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">    <span class="type">Student</span> <span class="variable">student1</span> <span class="operator">=</span> (Student) student0.clone();</span><br><span class="line">    System.out.println(student0.getName() == student1.getName());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>我们修改成这样， 就可以真正实现深拷贝了</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">clone</span><span class="params">()</span> <span class="keyword">throws</span> CloneNotSupportedException &#123;   <span class="comment">//这里我们改进一下，针对成员变量也进行拷贝</span></span><br><span class="line">    <span class="type">Student</span> <span class="variable">student</span> <span class="operator">=</span> (Student) <span class="built_in">super</span>.clone();</span><br><span class="line">    student.name = <span class="keyword">new</span> <span class="title class_">String</span>(name);</span><br><span class="line">    <span class="keyword">return</span> student;   <span class="comment">//成员拷贝完成后，再返回</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 设计模式 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务学习</title>
      <link href="/2023/12/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/12/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="服务拆分"><a href="#服务拆分" class="headerlink" title="服务拆分"></a>服务拆分</h1><ul><li>之前的远程访问存在着一些问题， 引入下面的服务治理</li></ul><h1 id="服务治理"><a href="#服务治理" class="headerlink" title="服务治理"></a>服务治理</h1><h2 id="注册中心"><a href="#注册中心" class="headerlink" title="注册中心"></a>注册中心</h2><p>注册中心类似于家政服务， 服务调用者就是 需要服务的人， 服务提供者就是 提供服务的人。</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312091244220.webp" alt="image-20231209124413012"></p><p>他类似于nginx的负载均衡</p><p>为了维持服务的生命，服务提供者会发送心跳续约，来告知注册中心， 服务调用者向注册中心续约</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312091245213.webp" alt="image-20231209124551055"></p><h2 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h2><ul><li>首先你要先弄一个数据源用户存储Nacos的一些 信息， 这里我们选择的是mysql</li><li>直接导入你的数据库即可</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- --------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- 主机:                           192.168.150.101</span></span><br><span class="line"><span class="comment">-- 服务器版本:                        8.0.27 - MySQL Community Server - GPL</span></span><br><span class="line"><span class="comment">-- 服务器操作系统:                      Linux</span></span><br><span class="line"><span class="comment">-- HeidiSQL 版本:                  12.2.0.6576</span></span><br><span class="line"><span class="comment">-- --------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET NAMES utf8mb4 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出 nacos 的数据库结构</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> `nacos`;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `nacos` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */</span> <span class="comment">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span>;</span><br><span class="line">USE `nacos`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_info 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text <span class="keyword">COLLATE</span> utf8_bin COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text <span class="keyword">COLLATE</span> utf8_bin,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_info 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_info`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_info_aggr 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_info_aggr`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_info_aggr 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_info_aggr`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_info_beta 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_info_beta`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text <span class="keyword">COLLATE</span> utf8_bin COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_info_beta 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_info_beta`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_info_tag 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_info_tag`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text <span class="keyword">COLLATE</span> utf8_bin COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_info_tag 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_info_tag`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_tags_relation 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_tags_relation`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_tags_relation 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_tags_relation`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.group_capacity 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `group_capacity`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.group_capacity 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `group_capacity`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.his_config_info 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `his_config_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text <span class="keyword">COLLATE</span> utf8_bin,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.his_config_info 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `his_config_info`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.permissions 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `permissions`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `permissions` (</span><br><span class="line">  `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.permissions 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `permissions`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.roles 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `roles`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `roles` (</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_user_role` (`username`,`role`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.roles 的数据：~1 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `roles`;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `roles` (`username`, `role`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.tenant_capacity 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tenant_capacity`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.tenant_capacity 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `tenant_capacity`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.tenant_info 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tenant_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.tenant_info 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `tenant_info`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.users 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `users` (</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `enabled` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.users 的数据：~1 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `users`;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` (`username`, `password`, `enabled`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, &#x27;system&#x27;) */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, &#x27;&#x27;) */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后我们还需要配置它的custom.env</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312091307790.webp" alt="image-20231209130748630"></p><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PREFER_HOST_MODE=hostname</span><br><span class="line">MODE=standalone</span><br><span class="line">SPRING_DATASOURCE_PLATFORM=mysql</span><br><span class="line">MYSQL_SERVICE_HOST=192.168.139.128</span><br><span class="line">MYSQL_SERVICE_DB_NAME=nacos</span><br><span class="line">MYSQL_SERVICE_PORT=3307</span><br><span class="line">MYSQL_SERVICE_USER=root</span><br><span class="line">MYSQL_SERVICE_PASSWORD=123</span><br><span class="line">MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=true&amp;useSSL=false&amp;allowPublicKeyRetrieval=true</span><br></pre></td></tr></table></figure><ul><li>docker 配置</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 注意我这里是建了一个文件夹/docker, 然后把nacos那个文件夹全部放到里面了， 可以根据你自己的需求来调整</span></span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">--name nacos \</span><br><span class="line">--env-file /docker/nacos/custom.env \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">-p 9848:9848 \</span><br><span class="line">-p 9849:9849 \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server:v2.1.0-slim</span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p><code>ip地址:8848/nacos</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312091319381.webp" alt="image-20231209131927166"></p><p>用户名和密码默认都是nacos</p><h2 id="服务注册"><a href="#服务注册" class="headerlink" title="服务注册"></a>服务注册</h2><ul><li>依赖</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.alibaba.cloud&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-cloud-starter-alibaba-nacos-discovery&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2021.0</span><span class="number">.4</span><span class="number">.0</span>&lt;version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>地址</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">item-service</span> <span class="comment"># 服务名称</span></span><br><span class="line">  <span class="attr">cloud:</span></span><br><span class="line">    <span class="attr">nacos:</span></span><br><span class="line">      <span class="attr">server-addr:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span><span class="string">:8848</span> <span class="comment"># nacos地址</span></span><br></pre></td></tr></table></figure><ul><li>配置成功就会得到下面的结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312091338343.webp" alt="image-20231209133802202"></p><ul><li>bash</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cloud:</span><br><span class="line">  nacos:</span><br><span class="line">    server-addr: 192.168.139.128:8848</span><br></pre></td></tr></table></figure><h2 id="服务发现"><a href="#服务发现" class="headerlink" title="服务发现"></a>服务发现</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111831162.webp" alt="image-20231211183117824"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">List&lt;ServiceInstance&gt; instances = discoveryClient.getInstances(<span class="string">&quot;item-service&quot;</span>);</span><br><span class="line">       <span class="comment">// 2.2 手写负载均衡</span></span><br><span class="line">       <span class="type">ServiceInstance</span> <span class="variable">instance</span> <span class="operator">=</span> instances.get(RandomUtil.randomInt(instances.size()));</span><br><span class="line"></span><br><span class="line">       <span class="comment">// 2.3 获取当前实例的ip和端口</span></span><br><span class="line"><span class="comment">//获取到实例之后调用访问函数，后面我们还有更好的方法来改进这里</span></span><br><span class="line">       ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; response = restTemplate.exchange(</span><br><span class="line">               instance.getUri() + <span class="string">&quot;/items?ids=&#123;ids&#125;&quot;</span>,</span><br><span class="line">               HttpMethod.GET,</span><br><span class="line">               <span class="literal">null</span>,</span><br><span class="line">               <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;ItemDTO&gt;&gt;() &#123;</span><br><span class="line">               &#125;,</span><br><span class="line">               StrUtil.join(<span class="string">&quot;,&quot;</span>, itemIds)</span><br><span class="line">       );</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(!response.getStatusCode().is2xxSuccessful()) &#123;</span><br><span class="line">           <span class="keyword">return</span>;</span><br><span class="line">       &#125;</span><br><span class="line">       List&lt;ItemDTO&gt; items = response.getBody();</span><br></pre></td></tr></table></figure><h2 id="openfeign"><a href="#openfeign" class="headerlink" title="openfeign"></a>openfeign</h2><ul><li>优化上面的 rpc</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">  ResponseEntity&lt;List&lt;ItemDTO&gt;&gt; response = restTemplate.exchange(</span><br><span class="line">    instance.getUri() + <span class="string">&quot;/items?ids=&#123;ids&#125;&quot;</span>,</span><br><span class="line">    HttpMethod.GET,</span><br><span class="line">    <span class="literal">null</span>,</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">ParameterizedTypeReference</span>&lt;List&lt;ItemDTO&gt;&gt;() &#123;</span><br><span class="line">    &#125;,</span><br><span class="line">    StrUtil.join(<span class="string">&quot;,&quot;</span>, itemIds)</span><br><span class="line">);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111842853.webp" alt="image-20231211184253605"></p><ul><li>然后就可以优化为， 下面这样</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111844399.webp" alt="image-20231211184425226"></p><p><a href="https://blog.csdn.net/hkk666123/article/details/113964715">【feign】OpenFeign设置header的5种方式_feign @headers-CSDN博客</a> openfeign 携带请求头的方法</p><h3 id="连接池优化"><a href="#连接池优化" class="headerlink" title="连接池优化"></a>连接池优化</h3><ul><li>连接池的优化方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111850986.webp" alt="image-20231211185018756"></p><h3 id="优化接口放置"><a href="#优化接口放置" class="headerlink" title="优化接口放置"></a>优化接口放置</h3><ul><li><p>我们把这些远程调用的操作独立放入到 api模块里面</p></li><li><p>然后我们就会发现，放入到 api模块之后， 当前模块， 找不到 对于api的bean ， 所以需要额外添加一些扫描包的操作</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111855903.webp" alt="image-20231211185533713"></p><h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111856776.webp" alt="image-20231211185653624"></p><ul><li>添加配置类</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111857926.webp" alt="image-20231211185715782"></p><ul><li>全局配置</li></ul><p>这样才能全局配置</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111857564.webp" alt="image-20231211185745450"></p><h3 id="登录拦截操作"><a href="#登录拦截操作" class="headerlink" title="登录拦截操作"></a>登录拦截操作</h3><p>放入到 api模块里面</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111928694.webp" alt="image-20231211192844473"></p><p>调用的启动类， 还需要加入这个东西</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111930106.webp" alt="image-20231211193035002"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111933805.webp" alt="image-20231211193355601"></p><h2 id="微服务"><a href="#微服务" class="headerlink" title="微服务"></a>微服务</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111901854.webp" alt="image-20231211190117622"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111901026.webp" alt="image-20231211190136836"></p><h1 id="微服务的问题分析"><a href="#微服务的问题分析" class="headerlink" title="微服务的问题分析"></a>微服务的问题分析</h1><ul><li><p>tomcat 连接数超过了， 现在的访问量， 就是单点项目的缺点</p></li><li><p>但是在多服务项目， 里面会出现多个线程阻塞问题</p></li></ul><h2 id="雪崩问题"><a href="#雪崩问题" class="headerlink" title="雪崩问题"></a>雪崩问题</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292119292.webp" alt="image-20231229211947913"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292121573.webp" alt="image-20231229212101302"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292121429.webp" alt="image-20231229212129265"></p><h2 id="服务保护方案"><a href="#服务保护方案" class="headerlink" title="服务保护方案"></a>服务保护方案</h2><h3 id="流量整型"><a href="#流量整型" class="headerlink" title="流量整型"></a>流量整型</h3><ul><li>我们使用限流器， 来保护服务</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292125409.webp" alt="image-20231229212526185"></p><p>这个方法， 叫做流量整形</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292128269.webp" alt="image-20231229212857022"></p><h3 id="线程隔离"><a href="#线程隔离" class="headerlink" title="线程隔离"></a>线程隔离</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292132269.webp" alt="image-20231229213203084"></p><h3 id="服务熔断"><a href="#服务熔断" class="headerlink" title="服务熔断"></a>服务熔断</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292132789.webp" alt="image-20231229213216574"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292133455.webp" alt="image-20231229213310215"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292133020.webp" alt="image-20231229213332793"></p><h2 id="服务保护技术"><a href="#服务保护技术" class="headerlink" title="服务保护技术"></a>服务保护技术</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292301926.webp" alt="image-20231229230115680"></p><h2 id="Sentinel"><a href="#Sentinel" class="headerlink" title="Sentinel"></a>Sentinel</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292304909.webp" alt="image-20231229230433531"></p><ul><li><p>我们这里使用 1.8.6 版本的 Sentinel 中</p></li><li><p>然后就是启动容器</p></li></ul><h2 id="整形解决"><a href="#整形解决" class="headerlink" title="整形解决"></a>整形解决</h2><h3 id="配置maven"><a href="#配置maven" class="headerlink" title="配置maven"></a>配置maven</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292309421.webp" alt="image-20231229230926285"></p><h3 id="配置-yaml"><a href="#配置-yaml" class="headerlink" title="配置 yaml"></a>配置 yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line"><span class="attr">cloud:</span></span><br><span class="line"><span class="attr">sentinel:</span></span><br><span class="line"><span class="attr">transport:</span></span><br><span class="line"><span class="attr">dashport:</span> <span class="string">localhost:8090</span> <span class="comment"># 控制台地址</span></span><br><span class="line">        </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292313587.webp" alt="image-20231229231305296"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292314228.webp" alt="image-20231229231443006"></p><p>429就是请求频率太高了， 限流了</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292333657.webp" alt="image-20231229233351506"></p><h2 id="线程隔离-1"><a href="#线程隔离-1" class="headerlink" title="线程隔离"></a>线程隔离</h2><h3 id="配置yaml"><a href="#配置yaml" class="headerlink" title="配置yaml"></a>配置yaml</h3><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">feign:</span></span><br><span class="line"><span class="attr">sentinal:</span></span><br><span class="line"><span class="attr">enabled:</span> <span class="literal">true</span> </span><br></pre></td></tr></table></figure><ul><li>还是会占用一定的服务资源。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292335086.webp" alt="image-20231229233549834"></p><p>设置 它的线程数 获取qps 为xx</p><h3 id="添加FallBack"><a href="#添加FallBack" class="headerlink" title="添加FallBack"></a>添加FallBack</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292344986.webp" alt="image-20231229234428761"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292344001.webp" alt="image-20231229234458727"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202312292345928.webp" alt="image-20231229234550699"></p>]]></content>
      
      
      <categories>
          
          <category> 后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微服务 </tag>
            
            <tag> openfeign </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>minio学习</title>
      <link href="/2023/12/08/minio%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/12/08/minio%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="快速上手java"><a href="#快速上手java" class="headerlink" title="快速上手java"></a>快速上手java</h1><p>[minio安装配置教程及整合springboot（史上最强保姆级教程—minio入门）_minio配置-CSDN博客](<a href="https://blog.csdn.net/qq_51073233/article/details/127673489#:~:text=minio%E5%AE%89%E8%A3%85%E9%85%8D%E7%BD%AE%E6%95%99%E7%A8%8B%E5%8F%8A%E6%95%B4%E5%90%88springboot%EF%BC%88%E5%8F%B2%E4%B8%8A%E6%9C%80%E5%BC%BA%E4%BF%9D%E5%A7%86%E7%BA%A7%E6%95%99%E7%A8%8B---minio%E5%85%A5%E9%97%A8%EF%BC%89">https://blog.csdn.net/qq_51073233/article/details/127673489#:~:text=minio安装配置教程及整合springboot（史上最强保姆级教程---minio入门）</a> 1 1、进入minio官网 2 2、选择放置minio文件路径 3 3、根据命令行提示访问minio面板,4 4、minio配置（yaml文件版） 5 5、编写minio的配置文件MinIoClientConfig 6 6、新建minio工具类需要的实体类ObjectItem 7 7、编写minio的工具类MinioUtils)</p><blockquote><p>我这里直接把它的搬运过来了😜</p><p>这些建议弄完docker 部署在来搞</p></blockquote><h2 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- 高版本的会报okhttp不兼容--&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;io.minio&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;minio&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">8.2</span><span class="number">.2</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h2 id="yaml配置"><a href="#yaml配置" class="headerlink" title="yaml配置"></a>yaml配置</h2><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="comment"># 配置文件上传大小限制（minio文件上传）</span></span><br><span class="line">  <span class="attr">servlet:</span></span><br><span class="line">    <span class="attr">multipart:</span></span><br><span class="line">      <span class="attr">max-file-size:</span> <span class="string">500MB</span></span><br><span class="line">      <span class="attr">max-request-size:</span> <span class="string">500MB</span></span><br><span class="line"></span><br><span class="line"><span class="attr">minio:</span></span><br><span class="line">  <span class="attr">endpoint:</span> <span class="string">http://localhost:9000</span></span><br><span class="line">  <span class="attr">accessKey:</span> <span class="string">minioadmin</span></span><br><span class="line">  <span class="attr">secretKey:</span>  <span class="string">minioadmin</span></span><br><span class="line"><span class="comment"># 文件夹的名字（如果没有需要可以先到界面端端口创建）</span></span><br><span class="line">  <span class="attr">bucketName:</span> <span class="string">community-web</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Config-配置"><a href="#Config-配置" class="headerlink" title="Config 配置"></a>Config 配置</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.javatest.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.minio.MinioClient;</span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinIoClientConfig</span> &#123;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String endpoint;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.accessKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String accessKey;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.secretKey&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String secretKey;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 注入minio 客户端</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span></span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> MinioClient <span class="title function_">minioClient</span><span class="params">()</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> MinioClient.builder()</span><br><span class="line">                .endpoint(endpoint)</span><br><span class="line">                .credentials(accessKey, secretKey)</span><br><span class="line">                .build();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="entity"><a href="#entity" class="headerlink" title="entity"></a>entity</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.javatest.entity;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> lombok.Data;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ObjectItem</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String objectName;</span><br><span class="line">    <span class="keyword">private</span> Long size;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="utils"><a href="#utils" class="headerlink" title="utils"></a>utils</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.javatest.utils;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.javatest.entity.ObjectItem;</span><br><span class="line"><span class="keyword">import</span> io.minio.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.errors.*;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteError;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.DeleteObject;</span><br><span class="line"><span class="keyword">import</span> io.minio.messages.Item;</span><br><span class="line"><span class="keyword">import</span> org.apache.tomcat.util.http.fileupload.IOUtils;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpHeaders;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.HttpStatus;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.MediaType;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.ResponseEntity;</span><br><span class="line"><span class="keyword">import</span> org.springframework.stereotype.Component;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.ByteArrayOutputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.InputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.UnsupportedEncodingException;</span><br><span class="line"><span class="keyword">import</span> java.net.URLEncoder;</span><br><span class="line"><span class="keyword">import</span> java.security.InvalidKeyException;</span><br><span class="line"><span class="keyword">import</span> java.security.NoSuchAlgorithmException;</span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Arrays;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.stream.Collectors;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@description</span>： minio工具类</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@version</span>：1.0</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioUtils</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioClient minioClient;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 判断bucket是否存在，不存在则创建</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: void</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">existBucket</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> minioClient.bucketExists(BucketExistsArgs.builder().bucket(name).build());</span><br><span class="line">            <span class="keyword">if</span> (!exists) &#123;</span><br><span class="line">                minioClient.makeBucket(MakeBucketArgs.builder().bucket(name).build());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 创建存储bucket</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.makeBucket(MakeBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 删除存储bucket</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> Boolean</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Boolean <span class="title function_">removeBucket</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            minioClient.removeBucket(RemoveBucketArgs.builder()</span><br><span class="line">                    .bucket(bucketName)</span><br><span class="line">                    .build());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 上传文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> multipartFile</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: java.lang.String</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;String&gt; <span class="title function_">upload</span><span class="params">(MultipartFile[] multipartFile)</span> &#123;</span><br><span class="line">        List&lt;String&gt; names = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;(multipartFile.length);</span><br><span class="line">        <span class="keyword">for</span> (MultipartFile file : multipartFile) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> file.getOriginalFilename();</span><br><span class="line">            String[] split = fileName.split(<span class="string">&quot;\\.&quot;</span>);</span><br><span class="line">            <span class="keyword">if</span> (split.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">                fileName = split[<span class="number">0</span>] + <span class="string">&quot;_&quot;</span> + System.currentTimeMillis() + <span class="string">&quot;.&quot;</span> + split[<span class="number">1</span>];</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                fileName = fileName + System.currentTimeMillis();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                in = file.getInputStream();</span><br><span class="line">                minioClient.putObject(PutObjectArgs.builder()</span><br><span class="line">                        .bucket(bucketName)</span><br><span class="line">                        .object(fileName)</span><br><span class="line">                        .stream(in, in.available(), -<span class="number">1</span>)</span><br><span class="line">                        .contentType(file.getContentType())</span><br><span class="line">                        .build()</span><br><span class="line">                );</span><br><span class="line">            &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            names.add(fileName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> names;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * description: 下载文件</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> fileName</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span>: org.springframework.http.ResponseEntity&lt;byte [ ]&gt;</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> ResponseEntity&lt;<span class="type">byte</span>[]&gt; download(String fileName) &#123;</span><br><span class="line">        ResponseEntity&lt;<span class="type">byte</span>[]&gt; responseEntity = <span class="literal">null</span>;</span><br><span class="line">        <span class="type">InputStream</span> <span class="variable">in</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="type">ByteArrayOutputStream</span> <span class="variable">out</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = minioClient.getObject(GetObjectArgs.builder().bucket(bucketName).object(fileName).build());</span><br><span class="line">            out = <span class="keyword">new</span> <span class="title class_">ByteArrayOutputStream</span>();</span><br><span class="line">            IOUtils.copy(in, out);</span><br><span class="line">            <span class="comment">//封装返回值</span></span><br><span class="line">            <span class="type">byte</span>[] bytes = out.toByteArray();</span><br><span class="line">            <span class="type">HttpHeaders</span> <span class="variable">headers</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HttpHeaders</span>();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                headers.add(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(fileName, <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">            &#125; <span class="keyword">catch</span> (UnsupportedEncodingException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">            headers.setContentLength(bytes.length);</span><br><span class="line">            headers.setContentType(MediaType.APPLICATION_OCTET_STREAM);</span><br><span class="line">            headers.setAccessControlExposeHeaders(Arrays.asList(<span class="string">&quot;*&quot;</span>));</span><br><span class="line">            responseEntity = <span class="keyword">new</span> <span class="title class_">ResponseEntity</span>&lt;<span class="type">byte</span>[]&gt;(bytes, headers, HttpStatus.OK);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                <span class="keyword">if</span> (in != <span class="literal">null</span>) &#123;</span><br><span class="line">                    <span class="keyword">try</span> &#123;</span><br><span class="line">                        in.close();</span><br><span class="line">                    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                        e.printStackTrace();</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">if</span> (out != <span class="literal">null</span>) &#123;</span><br><span class="line">                    out.close();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">                e.printStackTrace();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> responseEntity;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 查看文件对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> 存储bucket内文件对象信息</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> List&lt;ObjectItem&gt; <span class="title function_">listObjects</span><span class="params">(String bucketName)</span> &#123;</span><br><span class="line">        Iterable&lt;Result&lt;Item&gt;&gt; results = minioClient.listObjects(</span><br><span class="line">                ListObjectsArgs.builder().bucket(bucketName).build());</span><br><span class="line">        List&lt;ObjectItem&gt; objectItems = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">for</span> (Result&lt;Item&gt; result : results) &#123;</span><br><span class="line">                <span class="type">Item</span> <span class="variable">item</span> <span class="operator">=</span> result.get();</span><br><span class="line">                <span class="type">ObjectItem</span> <span class="variable">objectItem</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectItem</span>();</span><br><span class="line">                objectItem.setObjectName(item.objectName());</span><br><span class="line">                objectItem.setSize(item.size());</span><br><span class="line">                objectItems.add(objectItem);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> objectItems;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 批量删除文件对象</span></span><br><span class="line"><span class="comment">     *</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> bucketName 存储bucket名称</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> objects    对象名称集合</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">public</span> Iterable&lt;Result&lt;DeleteError&gt;&gt; <span class="title function_">removeObjects</span><span class="params">(String bucketName, List&lt;String&gt; objects)</span> &#123;</span><br><span class="line">        List&lt;DeleteObject&gt; dos = objects.stream().map(e -&gt; <span class="keyword">new</span> <span class="title class_">DeleteObject</span>(e)).collect(Collectors.toList());</span><br><span class="line">        Iterable&lt;Result&lt;DeleteError&gt;&gt; results = minioClient.removeObjects(RemoveObjectsArgs.builder().bucket(bucketName).objects(dos).build());</span><br><span class="line">        <span class="comment">// 判断是否出现文件删除错误</span></span><br><span class="line"><span class="comment">//        for (Result&lt;DeleteError&gt; result : results) &#123;</span></span><br><span class="line"><span class="comment">//            DeleteError deleteError = null;</span></span><br><span class="line"><span class="comment">//            try &#123;</span></span><br><span class="line"><span class="comment">//                deleteError = result.get();</span></span><br><span class="line"><span class="comment">//            &#125; catch (ErrorResponseException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125; catch (InsufficientDataException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125; catch (InternalException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125; catch (InvalidKeyException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125; catch (InvalidResponseException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125; catch (IOException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125; catch (NoSuchAlgorithmException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125; catch (ServerException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125; catch (XmlParserException e) &#123;</span></span><br><span class="line"><span class="comment">//                throw new RuntimeException(e);</span></span><br><span class="line"><span class="comment">//            &#125;</span></span><br><span class="line"><span class="comment">//            System.out.println(deleteError);</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line">        <span class="keyword">return</span> results;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.demo.javatest.controller;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.demo.javatest.utils.MinioUtils;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Autowired;</span><br><span class="line"><span class="keyword">import</span> org.springframework.beans.factory.annotation.Value;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.DeleteMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.GetMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.PostMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.multipart.MultipartFile;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MinioController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> MinioUtils minioUtils;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.endpoint&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String address;</span><br><span class="line">    <span class="meta">@Value(&quot;$&#123;minio.bucketName&#125;&quot;)</span></span><br><span class="line">    <span class="keyword">private</span> String bucketName;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">upload</span><span class="params">(MultipartFile file)</span> &#123;</span><br><span class="line"></span><br><span class="line">        List&lt;String&gt; upload = minioUtils.upload(<span class="keyword">new</span> <span class="title class_">MultipartFile</span>[]&#123;file&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> address + <span class="string">&quot;/&quot;</span> + bucketName + <span class="string">&quot;/&quot;</span> + upload.get(<span class="number">0</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@DeleteMapping(&quot;/delete&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">delete</span><span class="params">(String bucketName, String fileName)</span>&#123;</span><br><span class="line">        List&lt;String&gt; list = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">        list.add(fileName);</span><br><span class="line"><span class="comment">//        return  ;</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> minioUtils.removeObjects(bucketName, list);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/get&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(String name)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioUtils.download(name);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@GetMapping(&quot;/makeBucket&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">makeBucket</span><span class="params">(String bucketName)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> minioUtils.makeBucket(bucketName);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="测试实例"><a href="#测试实例" class="headerlink" title="测试实例"></a>测试实例</h2><ul><li>上传</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111129645.webp" alt="image-20231211112944485"></p><ul><li>删除</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111130423.webp" alt="image-20231211113004313"></p><ul><li>下载<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111130751.webp" alt="image-20231211113021621"></li><li>创建minio文件夹</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312111130973.webp" alt="image-20231211113037848"></p><h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><ul><li>他封装了一系列的指令， 所以特别的有用啊， 当然我们到时候是要学java</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082027029.webp" alt="image-20231208202712873"></p><h2 id="分布式文件系统应用场景"><a href="#分布式文件系统应用场景" class="headerlink" title="分布式文件系统应用场景"></a>分布式文件系统应用场景</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082029161.webp" alt="image-20231208202941064"></p><ul><li>优点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082040788.webp" alt="image-20231208204051612"></p><h1 id="基础介绍"><a href="#基础介绍" class="headerlink" title="基础介绍"></a>基础介绍</h1><h2 id="基础概念"><a href="#基础概念" class="headerlink" title="基础概念"></a>基础概念</h2><ul><li>bucket ：（顶层目录）不同项目可以使用不同的bucket 分隔开</li><li>Object：存储到Minio的基本对象，比如文件，字节流</li><li>Drive：存储数据的磁盘，再Minio启动时，以参数的方式传入，Minio中所有的对象数据都被存储到Drive中</li><li>set：就是Drive的集合<ul><li>一个集群可以划分出多个set</li><li>一个对象存储在一个set中</li></ul></li></ul><h2 id="纠删码（EC）"><a href="#纠删码（EC）" class="headerlink" title="纠删码（EC）"></a>纠删码（EC）</h2><ul><li>BIT Rot Protection 处理数据损坏</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082044117.webp" alt="image-20231208204418998"></p><h2 id="存储形式"><a href="#存储形式" class="headerlink" title="存储形式"></a>存储形式</h2><p>奇数， 偶数存储法， 奇数和偶数分别存储的是编码前，和编码后的文件， 前者为编码数据块以及校验块、后者是元数据文件</p><h1 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h1><ul><li>centos7 和 docker单机部署</li></ul><h2 id="单机部署"><a href="#单机部署" class="headerlink" title="单机部署"></a>单机部署</h2><ul><li>比较适合学习</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">wget https://dl.minio.org.cn/server/minio/release/linux-amd64/minio</span><br><span class="line"><span class="comment"># 添加执行权限</span></span><br><span class="line"><span class="built_in">chmod</span> +x minio</span><br><span class="line">sudo <span class="built_in">mv</span> minio /docker/minio/</span><br><span class="line"></span><br><span class="line"><span class="comment"># 移动到对应目录</span></span><br><span class="line"><span class="built_in">cd</span> /docker/minio/</span><br><span class="line"><span class="comment"># /mnt/data 磁盘位置</span></span><br><span class="line">./minio server /mnt/data</span><br></pre></td></tr></table></figure><ul><li>进入测试阶段</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082102087.webp" alt="image-20231208210242943"></p><p>46446是界面端口， 9000是真正访问数据的端口</p><p>需要注意的是，如果你是用远程服务器弄的，它给你的是内网的ip地址，你访问的时候访问外网的即可</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082107972.webp" alt="image-20231208210731740"></p><h3 id="修改用户和密码设置静态端"><a href="#修改用户和密码设置静态端" class="headerlink" title="修改用户和密码设置静态端"></a>修改用户和密码设置静态端</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082109016.webp" alt="image-20231208210927889"></p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 修改用户名和密码 （注意你的用户名长度至少是3位， 密码至少是8位</span></span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_USER=root</span><br><span class="line"><span class="built_in">export</span> MINIO_ROOT_PASSWORD=114514114514</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改配置文件路径(这个看你自己的想法来修改)</span></span><br><span class="line">./minio server --config-dir /mnt/config /mnt/data</span><br><span class="line"><span class="comment"># 设置静态端口</span></span><br><span class="line">./minio server --console-address <span class="string">&quot;:44619&quot;</span> /mnt/data</span><br></pre></td></tr></table></figure><ul><li>但是这个是没有EC模式的， 数据不安全</li></ul><h2 id="docker-部署"><a href="#docker-部署" class="headerlink" title="docker 部署"></a>docker 部署</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 44619:44619 --name minio \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_USER=root&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=114514114514&quot;</span> \</span><br><span class="line">  -v /mnt/data:/data \</span><br><span class="line">  -v /mnt/config:/root/.minio \</span><br><span class="line">  minio/minio server --console-address <span class="string">&quot;:44619&quot;</span> /data</span><br></pre></td></tr></table></figure><h2 id="具有纠删码功能部署"><a href="#具有纠删码功能部署" class="headerlink" title="具有纠删码功能部署"></a>具有纠删码功能部署</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312092028414.webp" alt="image-20231209202808161"></p><ul><li>再minio 中一个block 就是10MB</li><li>如果一个文件有多个block 就会把他拆分</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -p 44619:44619 --name minio \</span><br><span class="line">  -v /mnt/data1:/data1 \</span><br><span class="line">  -v /mnt/data2:/data2 \</span><br><span class="line">  -v /mnt/data3:/data3 \</span><br><span class="line">  -v /mnt/data4:/data4 \</span><br><span class="line">  -v /mnt/data5:/data5 \</span><br><span class="line">  -v /mnt/data6:/data6 \</span><br><span class="line">  -v /mnt/data7:/data7 \</span><br><span class="line">  -v /mnt/data8:/data8 \</span><br><span class="line">  minio/minio server /data&#123;1...8&#125; --console-address <span class="string">&quot;:44619&quot;</span> </span><br><span class="line">  </span><br><span class="line"><span class="comment"># tree， 你要添加文件之后， tree才有作用</span></span><br></pre></td></tr></table></figure><h2 id="Minio-分布式"><a href="#Minio-分布式" class="headerlink" title="Minio 分布式"></a>Minio 分布式</h2><p>略</p><h2 id="Minio-客户端设置"><a href="#Minio-客户端设置" class="headerlink" title="Minio 客户端设置"></a>Minio 客户端设置</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">wget http://dl.minio.org.cn/client/mc/release/linux-amd64/mc</span><br><span class="line"></span><br><span class="line"><span class="built_in">chmod</span> +x mc</span><br><span class="line"><span class="built_in">mv</span> mc /docker/minio</span><br></pre></td></tr></table></figure><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p>略（有时间再看）</p><ul><li><p>mc config 查看配置</p></li><li><p>mc config host ls 查看所有的ip主机地址</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312092054267.webp" alt="image-20231209205437045"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql高级篇</title>
      <link href="/2023/12/08/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/"/>
      <url>/2023/12/08/mysql%E9%AB%98%E7%BA%A7%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h1 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h1><ul><li>innodb的逻辑存储结构为： 表空间， 段、区、页、行</li></ul><h2 id="各种索引的数据结构"><a href="#各种索引的数据结构" class="headerlink" title="各种索引的数据结构"></a>各种索引的数据结构</h2><h3 id="b树"><a href="#b树" class="headerlink" title="b树"></a>b树</h3><p><a href="cs.usfca.edu/~galles/visualization/BTree.html">可视化网站</a></p><ul><li>结论： 当当前集合的元素大于等于当前设置的度数的时候，就会向上分裂，如果上层也出现了上诉的条件， 那么重复这个过程。</li></ul><h3 id="b-树"><a href="#b-树" class="headerlink" title="b+树"></a>b+树</h3><ul><li><p>以一颗最大度数为4的b+tree</p></li><li><p>所有的元素都会出现在叶子节点， 叶子节点会构成一个单向链表， 而且叶子节点是一个单向链表</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081841183.webp" alt="image-20231208184133928"></p><h3 id="Hash索引结构"><a href="#Hash索引结构" class="headerlink" title="Hash索引结构"></a>Hash索引结构</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081843149.webp" alt="image-20231208184358916"></p><ul><li>特点<ul><li>不支持范围查询</li><li>无法进行索引完成排序操作</li><li>查询效率高，通常只需要一次检索就好了</li></ul></li></ul><p>在索引里面， 支持hash索引的是Memory引擎，而InnoDB具有自适应hash功能，hash索引是存储引擎根据B+Tree索引在指定条件下自动构建的</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081848091.webp" alt="image-20231208184822916"></p><h2 id="索引分类"><a href="#索引分类" class="headerlink" title="索引分类"></a>索引分类</h2><ul><li>聚集索引</li><li>二级索引</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081849158.webp" alt="image-20231208184955909"></p><p>先通过找到arm， 然后获得数值（这个就是二级索引）， 利用这个数值，到上面查找聚集索引</p><p>Innob主键索引的高度是多少</p><p>不是很懂是怎么计算的？？</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081858629.webp" alt="image-20231208185854434"></p><p>主键个数 * 主键字节数 + 指针数量 * 6个字节 &#x3D; 16kb(每页占16kb，每区占1MB)</p><p>我们可以得出记录， 即使， 我们存储千万级别的数据量， 树的高度也只有3层高度</p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 深入学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>前端遇到的问题</title>
      <link href="/2023/12/05/%E5%89%8D%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/12/05/%E5%89%8D%E7%AB%AF%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="HTML"><a href="#HTML" class="headerlink" title="HTML"></a>HTML</h1><h1 id="CSS"><a href="#CSS" class="headerlink" title="CSS"></a>CSS</h1><h2 id="页面超出问题"><a href="#页面超出问题" class="headerlink" title="页面超出问题"></a>页面超出问题</h2><ul><li><p>当页面超过 视窗的基本高度的时候， 会出现底部是白色的问题</p><p>后来发现可以设置margin 来解决这个问题， </p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">margin-bottom</span>: <span class="number">10px</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="JS"><a href="#JS" class="headerlink" title="JS"></a>JS</h1><h2 id="请求的发送"><a href="#请求的发送" class="headerlink" title="请求的发送"></a>请求的发送</h2><h3 id="axios-get"><a href="#axios-get" class="headerlink" title="axios-get"></a>axios-get</h3><blockquote><p>之前，使用get 请求，一直有点问题， 然后就回避了，这次解决</p></blockquote><p>这是post请求的发送类型</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export const logoutuser = params =&gt; <span class="punctuation">&#123;</span></span><br><span class="line">    return axios(<span class="punctuation">&#123;</span></span><br><span class="line">      method<span class="punctuation">:</span> &#x27;post&#x27;<span class="punctuation">,</span></span><br><span class="line">      baseURL<span class="punctuation">:</span> `$<span class="punctuation">&#123;</span>baseUrl<span class="punctuation">&#125;</span>/api/logout`<span class="punctuation">,</span></span><br><span class="line">      data<span class="punctuation">:</span> params</span><br><span class="line">    <span class="punctuation">&#125;</span>).then(res =&gt; res.data)</span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这是get请求的发送类型</p><p>区别在于 一个是<strong>data：， 一个是params：</strong> </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">const</span> <span class="title function_">findFriend</span> = (<span class="params">params</span>) =&gt; &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="title function_">axios</span>(&#123;</span><br><span class="line">      <span class="attr">method</span>: <span class="string">&#x27;get&#x27;</span>,</span><br><span class="line">      <span class="attr">baseURL</span>: <span class="string">`<span class="subst">$&#123;baseUrl&#125;</span>/api/findFriend`</span>,</span><br><span class="line">      <span class="attr">params</span>: params</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">res</span> =&gt;</span> res.<span class="property">data</span>)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>同时你的params 的形式是这样的</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    id<span class="punctuation">:</span> xxx</span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 得到的请求为</span></span><br><span class="line">http<span class="punctuation">:</span><span class="comment">//localhost:8080/api/yyy?id=xxx</span></span><br></pre></td></tr></table></figure><h2 id="消息位置跳转"><a href="#消息位置跳转" class="headerlink" title="消息位置跳转"></a>消息位置跳转</h2><p>我们可以利用scrollTo来跳转到对应的位置</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082146737.webp" alt="image-20231208214607592"></p><ul><li>比如这里有一串消息的div， 我们先通过document.querySelector(“div”);， 获取到div。</li><li>然后使用rect &#x3D; getBoundingClientRect()， 来获取到div中的x和y</li><li>然后调用scrollTo(rect[0], rect[1])</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082202204.webp" alt="image-20231208220255113"></p><ul><li>当在写路由的匹配的时候， 比如网页时&#x2F;component&#x2F;:id&#x2F;:pid， </li><li>如果我要获取到id 就是 <code>router.currentRoute.value.params.id</code></li><li>如果我要获取的pid时候<code>router.currentRoute.value.params.pid</code></li></ul><h2 id="前端-行尾序列问题"><a href="#前端-行尾序列问题" class="headerlink" title="前端 行尾序列问题"></a>前端 行尾序列问题</h2><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install --save-dev --save-exact prettier</span><br><span class="line">npx prettier --write --end-of-line lf .（点为要修改的文件路径，可以改改）</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis实战遇到的问题</title>
      <link href="/2023/12/05/redis%E5%AE%9E%E6%88%98%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/12/05/redis%E5%AE%9E%E6%88%98%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="序列化与反序列化的问题"><a href="#序列化与反序列化的问题" class="headerlink" title="序列化与反序列化的问题"></a>序列化与反序列化的问题</h1><h2 id="hutool-解决"><a href="#hutool-解决" class="headerlink" title="hutool 解决"></a>hutool 解决</h2><ul><li>Object - &gt; String</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Object o;</span><br><span class="line"><span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> JSONUtil.toJsonStr(o);</span><br></pre></td></tr></table></figure><ul><li><p>String -&gt; Object</p><ul><li>如果这里是一个集合 类型的</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONUtils.parseArray(object).toList(type) （type 代表元素的类型）</span><br></pre></td></tr></table></figure><ul><li>如果这里就是一个普通的对象类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSONUtil.toBean(json, type) </span><br></pre></td></tr></table></figure></li></ul><h2 id="fastjson-解决"><a href="#fastjson-解决" class="headerlink" title="fastjson 解决"></a>fastjson 解决</h2><h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><ul><li><p>这个方法有时候有点问题。</p></li><li><p>直接在配置类里面， 使用 fastjson的序列化</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedisConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="meta">@SuppressWarnings(value = &#123; &quot;unchecked&quot;, &quot;rawtypes&quot; &#125;)</span></span><br><span class="line">    <span class="keyword">public</span> RedisTemplate&lt;Object, Object&gt; <span class="title function_">redisTemplate</span><span class="params">(RedisConnectionFactory connectionFactory)</span></span><br><span class="line">    &#123;</span><br><span class="line">        RedisTemplate&lt;Object, Object&gt; template = <span class="keyword">new</span> <span class="title class_">RedisTemplate</span>&lt;&gt;();</span><br><span class="line">        template.setConnectionFactory(connectionFactory);</span><br><span class="line"></span><br><span class="line">        <span class="type">FastJsonRedisSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FastJsonRedisSerializer</span>(Object.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 使用StringRedisSerializer来序列化和反序列化redis的key值</span></span><br><span class="line">        template.setKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// Hash的key也采用StringRedisSerializer的序列化方式</span></span><br><span class="line">        template.setHashKeySerializer(<span class="keyword">new</span> <span class="title class_">StringRedisSerializer</span>());</span><br><span class="line">        template.setHashValueSerializer(serializer);</span><br><span class="line"></span><br><span class="line">        template.afterPropertiesSet();</span><br><span class="line">        <span class="keyword">return</span> template;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>string - &gt; object</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">object</span> <span class="variable">list</span> <span class="operator">=</span>  redisTemplate.opsForValue().get(FRIEND_PERSON_KEY + curid);</span><br><span class="line">具体要转成什么类型， 直接强转即可</span><br></pre></td></tr></table></figure><ul><li>object -&gt; string</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">redisTemplate.opsForValue().set(USER_INFO_KEY + id, userInfo, USER_INFO_TTL, TimeUnit.SECONDS);</span><br></pre></td></tr></table></figure><h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><ul><li>Object -》 string</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">object o;</span><br><span class="line"><span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> JSON.toJSONString(o)</span><br></pre></td></tr></table></figure><ul><li><p>string - &gt; object</p></li><li><p>string -&gt;list</p></li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parseArray(<span class="string">&quot;11&quot;</span>, Friend.class).stream().collect(Collectors.toList)</span><br></pre></td></tr></table></figure><ul><li>String -&gt; map</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parseArray(<span class="string">&quot;11&quot;</span>, Friend.class).stream().collect(Collectors.toSet)</span><br></pre></td></tr></table></figure><ul><li>string -&gt; object</li></ul>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JSON.parseObject(<span class="string">&quot;11&quot;</span>, xx.class)</span><br></pre></td></tr></table></figure><h1 id="写板子的问题"><a href="#写板子的问题" class="headerlink" title="写板子的问题"></a>写板子的问题</h1><h2 id="回调函数"><a href="#回调函数" class="headerlink" title="回调函数"></a>回调函数</h2><h3 id="Function"><a href="#Function" class="headerlink" title="Function&lt;R,T&gt; "></a>Function<code>&lt;R,T&gt; </code></h3><blockquote><p>R代表的是函数的形参， T 代表函数返回的类型</p></blockquote><p>通过调用apply(R s)调用 该函数</p><h3 id="Suppiler"><a href="#Suppiler" class="headerlink" title="Suppiler&lt;R&gt;"></a>Suppiler<code>&lt;R&gt;</code></h3><blockquote><p>R代表的是函数的返回类型，这个函数是无参的</p></blockquote><p>通过调用 get() 方法来调用该函数</p><h1 id="常用板子"><a href="#常用板子" class="headerlink" title="常用板子"></a>常用板子</h1><h2 id="redis常见问题板子"><a href="#redis常见问题板子" class="headerlink" title="redis常见问题板子"></a>redis常见问题板子</h2><blockquote><p>缓存穿透</p><p>缓存击穿 逻辑过期</p><p>缓存击穿 互斥锁</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Component</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CacheClient</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> StringRedisTemplate stringRedisTemplate;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">ExecutorService</span> <span class="variable">CACHE_REBUILD_EXECUTOR</span> <span class="operator">=</span> Executors.newFixedThreadPool(<span class="number">10</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CacheClient</span><span class="params">(StringRedisTemplate stringRedisTemplate)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.stringRedisTemplate = stringRedisTemplate;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">set</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(value), time, unit);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setWithLogicalExpire</span><span class="params">(String key, Object value, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="comment">// 设置逻辑过期</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RedisData</span>();</span><br><span class="line">        redisData.setData(value);</span><br><span class="line">        redisData.setExpireTime(LocalDateTime.now().plusSeconds(unit.toSeconds(time)));</span><br><span class="line">        <span class="comment">// 写入Redis</span></span><br><span class="line">        stringRedisTemplate.opsForValue().set(key, JSONUtil.toJsonStr(redisData));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;R,ID&gt; R <span class="title function_">queryWithPassThrough</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(json)) &#123;</span><br><span class="line">            <span class="comment">// 3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(json, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断命中的是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (json != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回一个错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.不存在，根据id查询数据库</span></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">        <span class="comment">// 5.不存在，返回错误</span></span><br><span class="line">        <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 将空值写入redis</span></span><br><span class="line">            stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>, FRIEND_ALL_TTL, TimeUnit.MINUTES);</span><br><span class="line">            <span class="comment">// 返回错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.存在，写入redis</span></span><br><span class="line">        <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;R&gt; List&lt;R&gt; <span class="title function_">querywithLogicalExpireFriend</span><span class="params">(String keyPrefix, Class&lt;R&gt;type, Supplier&lt;List&lt;R&gt;&gt; dbFallback, Long time, TimeUnit unit)</span>&#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(keyPrefix);</span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line">        List&lt;R&gt; r = JSONUtil.parseArray(redisData.getData()).toList(type);</span><br><span class="line"></span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="keyword">if</span>(expireTime.isAfter(LocalDateTime.now()))&#123;</span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> FRIEND_ALL_KEY + <span class="string">&quot;:lock&quot;</span>;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="keyword">if</span> (isLock)&#123;</span><br><span class="line">            <span class="comment">// 6.3.成功，开启独立线程，实现缓存重建</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 查询数据库</span></span><br><span class="line">                    List&lt;R&gt; newR = dbFallback.get();</span><br><span class="line">                    <span class="comment">// 重建缓存</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(keyPrefix, newR, time, unit);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.4.返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithLogicalExpire</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isBlank(json)) &#123;</span><br><span class="line">            <span class="comment">// 3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 4.命中，需要先把json反序列化为对象</span></span><br><span class="line">        <span class="type">RedisData</span> <span class="variable">redisData</span> <span class="operator">=</span> JSONUtil.toBean(json, RedisData.class);</span><br><span class="line"></span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> JSONUtil.toBean((JSONObject) redisData.getData(), type);</span><br><span class="line">        <span class="type">LocalDateTime</span> <span class="variable">expireTime</span> <span class="operator">=</span> redisData.getExpireTime();</span><br><span class="line">        <span class="comment">// 5.判断是否过期</span></span><br><span class="line">        <span class="keyword">if</span>(expireTime.isAfter(LocalDateTime.now())) &#123;</span><br><span class="line">            <span class="comment">// 5.1.未过期，直接返回店铺信息</span></span><br><span class="line">            <span class="keyword">return</span> r;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 5.2.已过期，需要缓存重建</span></span><br><span class="line">        <span class="comment">// 6.缓存重建</span></span><br><span class="line">        <span class="comment">// 6.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> FRIEND_ALL_KEY + id;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">        <span class="comment">// 6.2.判断是否获取锁成功</span></span><br><span class="line">        <span class="keyword">if</span> (isLock)&#123;</span><br><span class="line">            <span class="comment">// 6.3.成功，开启独立线程，实现缓存重建</span></span><br><span class="line">            CACHE_REBUILD_EXECUTOR.submit(() -&gt; &#123;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="comment">// 查询数据库</span></span><br><span class="line">                    <span class="type">R</span> <span class="variable">newR</span> <span class="operator">=</span> dbFallback.apply(id);</span><br><span class="line">                    <span class="comment">// 重建缓存</span></span><br><span class="line">                    <span class="built_in">this</span>.setWithLogicalExpire(key, newR, time, unit);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">                &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">                    <span class="comment">// 释放锁</span></span><br><span class="line">                    unlock(lockKey);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 6.4.返回过期的商铺信息</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> &lt;R, ID&gt; R <span class="title function_">queryWithMutex</span><span class="params">(</span></span><br><span class="line"><span class="params">            String keyPrefix, ID id, Class&lt;R&gt; type, Function&lt;ID, R&gt; dbFallback, Long time, TimeUnit unit)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> keyPrefix + id;</span><br><span class="line">        <span class="comment">// 1.从redis查询商铺缓存</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">shopJson</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().get(key);</span><br><span class="line">        <span class="comment">// 2.判断是否存在</span></span><br><span class="line">        <span class="keyword">if</span> (StrUtil.isNotBlank(shopJson)) &#123;</span><br><span class="line">            <span class="comment">// 3.存在，直接返回</span></span><br><span class="line">            <span class="keyword">return</span> JSONUtil.toBean(shopJson, type);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 判断命中的是否是空值</span></span><br><span class="line">        <span class="keyword">if</span> (shopJson != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">// 返回一个错误信息</span></span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 4.实现缓存重建</span></span><br><span class="line">        <span class="comment">// 4.1.获取互斥锁</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">lockKey</span> <span class="operator">=</span> FRIEND_ALL_KEY + id;</span><br><span class="line">        <span class="type">R</span> <span class="variable">r</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">isLock</span> <span class="operator">=</span> tryLock(lockKey);</span><br><span class="line">            <span class="comment">// 4.2.判断是否获取成功</span></span><br><span class="line">            <span class="keyword">if</span> (!isLock) &#123;</span><br><span class="line">                <span class="comment">// 4.3.获取锁失败，休眠并重试</span></span><br><span class="line">                Thread.sleep(<span class="number">50</span>);</span><br><span class="line">                <span class="keyword">return</span> queryWithMutex(keyPrefix, id, type, dbFallback, time, unit);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 4.4.获取锁成功，根据id查询数据库</span></span><br><span class="line">            r = dbFallback.apply(id);</span><br><span class="line">            <span class="comment">// 5.不存在，返回错误</span></span><br><span class="line">            <span class="keyword">if</span> (r == <span class="literal">null</span>) &#123;</span><br><span class="line">                <span class="comment">// 将空值写入redis</span></span><br><span class="line">                stringRedisTemplate.opsForValue().set(key, <span class="string">&quot;&quot;</span>,FRIEND_ALL_TTL, TimeUnit.MINUTES);</span><br><span class="line">                <span class="comment">// 返回错误信息</span></span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 6.存在，写入redis</span></span><br><span class="line">            <span class="built_in">this</span>.set(key, r, time, unit);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;<span class="keyword">finally</span> &#123;</span><br><span class="line">            <span class="comment">// 7.释放锁</span></span><br><span class="line">            unlock(lockKey);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 8.返回</span></span><br><span class="line">        <span class="keyword">return</span> r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="title function_">tryLock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        <span class="type">Boolean</span> <span class="variable">flag</span> <span class="operator">=</span> stringRedisTemplate.opsForValue().setIfAbsent(key, <span class="string">&quot;1&quot;</span>, <span class="number">10</span>, TimeUnit.SECONDS);</span><br><span class="line">        <span class="keyword">return</span> BooleanUtil.isTrue(flag);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">unlock</span><span class="params">(String key)</span> &#123;</span><br><span class="line">        stringRedisTemplate.delete(key);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="简化redistemplate板子"><a href="#简化redistemplate板子" class="headerlink" title="简化redistemplate板子"></a>简化redistemplate板子</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">```</span><br><span class="line"></span><br><span class="line"># RedisTemplate</span><br><span class="line"></span><br><span class="line">&gt; 当你的一个集合里面的一个属性为<span class="literal">null</span>的时候，redis会丢弃这个属性</span><br><span class="line"></span><br><span class="line">## opsForValue</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## opsForList</span><br><span class="line"></span><br><span class="line">### push</span><br><span class="line"></span><br><span class="line">* 如果你想要维护一个栈的结构</span><br><span class="line"></span><br><span class="line">  ```java</span><br><span class="line">  rightPush</span><br></pre></td></tr></table></figure><ul><li><p>如果你想要维护一个队列的结构</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">leftPush</span><br></pre></td></tr></table></figure></li></ul><h3 id="range"><a href="#range" class="headerlink" title="range"></a>range</h3><ul><li>获取指定位置的所有数据形成一个列表</li></ul><h3 id="remove"><a href="#remove" class="headerlink" title="remove"></a>remove</h3><ul><li>第一个参数是key， 第二个参数是0， 第三个参数是 value</li><li>第二个参数如果， 大于0，代表删除左边第一个， 小于0删除右边第一个， 等于0代表删除所有</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312062004367.webp" alt="image-20231206200430181"></p><h2 id="opsForSet"><a href="#opsForSet" class="headerlink" title="opsForSet"></a>opsForSet</h2><ul><li><p>添加成员</p><p>add(key, …var2)</p></li><li><p>获得成员</p><p>member(key)</p></li></ul><h2 id="opsForZSet"><a href="#opsForZSet" class="headerlink" title="opsForZSet"></a>opsForZSet</h2><ul><li>这个会对数据的分数进行设置。更加适合一些需要添加权重的排行榜</li></ul><h2 id="opsForHash"><a href="#opsForHash" class="headerlink" title="opsForHash"></a>opsForHash</h2><ul><li>put(name, key, value)</li><li>get(name, key)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312062048319.webp" alt="image-20231206204845895"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312062048395.webp" alt="image-20231206204857125"></p><h2 id="delete-key"><a href="#delete-key" class="headerlink" title="delete key"></a>delete key</h2><blockquote><p>redisTemplate.delete(key); 删除当前键</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>rabbitmq</title>
      <link href="/2023/12/03/rabbitmq/"/>
      <url>/2023/12/03/rabbitmq/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前后端 </tag>
            
            <tag> rabbitmq </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法板子</title>
      <link href="/2023/12/02/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/"/>
      <url>/2023/12/02/%E7%AE%97%E6%B3%95%E6%9D%BF%E5%AD%90/</url>
      
        <content type="html"><![CDATA[<h1 id="计划"><a href="#计划" class="headerlink" title="计划"></a>计划</h1><p>动态规划 </p><p>模拟</p><p>图论</p><p>数据结构</p><p>构造</p><p>模拟</p><p>动态规划</p><h1 id="Dijkstra"><a href="#Dijkstra" class="headerlink" title="Dijkstra"></a>Dijkstra</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">        <span class="type">int</span> to,nxt,w;</span><br><span class="line">    &#125;e[N];</span><br><span class="line">    <span class="type">int</span> cnt = <span class="number">0</span>;</span><br><span class="line">    <span class="type">int</span> head[N];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> u,<span class="type">int</span> v,<span class="type">int</span> w)</span></span>&#123;</span><br><span class="line">        e[++cnt].nxt = head[u];</span><br><span class="line">        e[cnt].to = v;</span><br><span class="line">        e[cnt].w = w;</span><br><span class="line">        head[u] = cnt;</span><br><span class="line">    &#125;   </span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countRestrictedPaths</span><span class="params">(<span class="type">int</span> n, vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> mod = <span class="number">1e9</span> + <span class="number">7</span>;</span><br><span class="line">        <span class="type">int</span> m = edges.<span class="built_in">size</span>();  </span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; m;++i)&#123;</span><br><span class="line">            <span class="type">int</span> u = edges[i][<span class="number">0</span>],v = edges[i][<span class="number">1</span>] , w = edges[i][<span class="number">2</span>];</span><br><span class="line">            <span class="built_in">add</span>(v - <span class="number">1</span>, u - <span class="number">1</span>, w);</span><br><span class="line">            <span class="built_in">add</span>(u - <span class="number">1</span>, v - <span class="number">1</span>, w);</span><br><span class="line">        &#125;</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">d</span>(n, INT_MAX);</span><br><span class="line">        priority_queue&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;&gt;q;</span><br><span class="line">        q.<span class="built_in">push</span>(&#123;<span class="number">0</span>, n - <span class="number">1</span>&#125;);</span><br><span class="line">        d[n - <span class="number">1</span>] = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span>(!q.<span class="built_in">empty</span>())&#123;</span><br><span class="line">            <span class="keyword">auto</span> p = q.<span class="built_in">top</span>();</span><br><span class="line">            q.<span class="built_in">pop</span>();</span><br><span class="line">            <span class="type">int</span> u = p.second;</span><br><span class="line">            <span class="type">int</span> w = p.first;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i = head[u];i; i = e[i].nxt)&#123;</span><br><span class="line">                <span class="type">int</span> v = e[i].to;</span><br><span class="line">                <span class="type">int</span> w = e[i].w;</span><br><span class="line">                <span class="keyword">if</span>(w + d[u] &lt; d[v])&#123;</span><br><span class="line">                    d[v] = w + d[u];</span><br><span class="line">                    q.<span class="built_in">push</span>(&#123;d[v], v&#125;);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="弗罗伊德算法"><a href="#弗罗伊德算法" class="headerlink" title="弗罗伊德算法"></a>弗罗伊德算法</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> d[n + <span class="number">1</span>][n + <span class="number">1</span>];</span><br><span class="line"><span class="built_in">memset</span>(d, <span class="number">0x3f</span>, <span class="keyword">sizeof</span> d);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">0</span>; k &lt; n; ++k)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; n; ++j)&#123;</span><br><span class="line">            d[i][j] = <span class="built_in">min</span>(d[i][j], d[i][k] + d[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="树状数组"><a href="#树状数组" class="headerlink" title="树状数组"></a>树状数组</h1><ul><li>权值树状数组</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">   <span class="type">int</span> tree[<span class="number">26000</span>];</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">lowbit</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">       <span class="keyword">return</span> i&amp;-i;</span><br><span class="line">    &#125;</span><br><span class="line">   <span class="function"><span class="type">int</span> <span class="title">sum</span><span class="params">(<span class="type">int</span> i)</span></span>&#123;</span><br><span class="line">       <span class="type">int</span> a = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(;i;i-=<span class="built_in">lowbit</span>(i))</span><br><span class="line">       a+=tree[i];</span><br><span class="line">        <span class="keyword">return</span> a;</span><br><span class="line">   &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> i,<span class="type">int</span> val)</span></span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(; i&lt;=<span class="number">26999</span>; i+=<span class="built_in">lowbit</span>(i))&#123;</span><br><span class="line">            tree[i] += val;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">countSmaller</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = nums.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;<span class="built_in">ans</span>(n);</span><br><span class="line">        <span class="comment">//memset(tree,0,sizeof(tree));</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;++i)&#123;</span><br><span class="line">            nums[i] += (<span class="number">1e4</span>+<span class="number">1</span>);</span><br><span class="line"> </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(nums.<span class="built_in">begin</span>(),nums.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i&lt;n;++i)&#123;</span><br><span class="line">            ans[i] = <span class="built_in">sum</span>(nums[i]<span class="number">-1</span>);</span><br><span class="line">            <span class="built_in">add</span>(nums[i],<span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">reverse</span>(ans.<span class="built_in">begin</span>(),ans.<span class="built_in">end</span>());</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><ul><li>普通树状数组</li></ul><p>维护某个区间小于 x的个数</p><p>可以 从小的数， 开始维护到大的数， 这样子就可以，实现这个功能</p><h1 id="并查集"><a href="#并查集" class="headerlink" title="并查集"></a>并查集</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="type">int</span> f[<span class="number">1001</span>];</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">find</span><span class="params">(<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(x!=f[x])f[x] = <span class="built_in">find</span>(f[x]);</span><br><span class="line">        <span class="keyword">return</span> f[x]; </span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">un</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="type">int</span> fx = <span class="built_in">find</span>(x);</span><br><span class="line">        <span class="type">int</span> fy = <span class="built_in">find</span>(y);</span><br><span class="line">        <span class="keyword">if</span>(fx!=fy)</span><br><span class="line">        f[fy] = fx;</span><br><span class="line">        <span class="comment">// 可以设置一个sum ， 表示当前节点的所在联通分量大小</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">findRedundantConnection</span><span class="params">(vector&lt;vector&lt;<span class="type">int</span>&gt;&gt;&amp; edges)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = edges.<span class="built_in">size</span>();</span><br><span class="line">        vector&lt;<span class="type">int</span>&gt;ans;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n;++i)&#123;</span><br><span class="line">            f[i] = i;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">auto</span> t : edges)&#123;</span><br><span class="line">            <span class="type">int</span> x = t[<span class="number">0</span>], y = t[<span class="number">1</span>];</span><br><span class="line">            <span class="keyword">if</span>(<span class="built_in">find</span>(x)!=<span class="built_in">find</span>(y))&#123;</span><br><span class="line">                <span class="built_in">un</span>(x,y);</span><br><span class="line">            &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">                ans.<span class="built_in">push_back</span>(x);</span><br><span class="line">                ans.<span class="built_in">push_back</span>(y);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="拓扑排序"><a href="#拓扑排序" class="headerlink" title="拓扑排序"></a>拓扑排序</h1><ul><li>判断环</li><li>内向基环树找环</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> &amp;&amp;dfs, <span class="type">int</span> u, <span class="type">int</span> from) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    v[u] = <span class="literal">true</span>;</span><br><span class="line">    ins[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [j, id] : g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == from) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!v[j]) <span class="built_in">dfs</span>(dfs, j, id);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ins[j])&#123;</span><br><span class="line">            <span class="type">int</span> t = j;</span><br><span class="line">            cycle.<span class="built_in">clear</span>();</span><br><span class="line">            cycle.<span class="built_in">push_back</span>(j);</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                t = a[t];</span><br><span class="line">                <span class="keyword">if</span> (t == j) <span class="keyword">break</span>;</span><br><span class="line">                cycle.<span class="built_in">push_back</span>(t);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 找到环了 </span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ins[u] = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="异或树"><a href="#异或树" class="headerlink" title="异或树"></a>异或树</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> T,l,r,a[N],cnt,trie[N][<span class="number">30</span>],b[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> sum)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">bool</span> tmp=(<span class="number">1</span>&lt;&lt;i)&amp;sum;</span><br><span class="line"><span class="keyword">if</span>(!trie[now][tmp])trie[now][tmp]=++cnt;</span><br><span class="line">now=trie[now][tmp];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> sum)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">bool</span> tmp=(<span class="number">1</span>&lt;&lt;i)&amp;sum;</span><br><span class="line"><span class="keyword">if</span>(!trie[now][tmp^<span class="number">1</span>])now=trie[now][tmp];</span><br><span class="line"><span class="keyword">else</span> now=trie[now][tmp^<span class="number">1</span>],res+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> sum)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">bool</span> tmp=(<span class="number">1</span>&lt;&lt;i)&amp;sum;</span><br><span class="line"><span class="keyword">if</span>(!trie[now][tmp])now=trie[now][tmp^<span class="number">1</span>],res+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line"><span class="keyword">else</span> now=trie[now][tmp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="线段树"><a href="#线段树" class="headerlink" title="线段树"></a>线段树</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;Info&gt; info;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SegmentTree</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n, Info _init = <span class="built_in">Info</span>())&#123;</span><br><span class="line">        <span class="built_in">init</span>(<span class="built_in">vector</span>&lt;Info&gt;(n, _init));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">const</span> vector&lt;Info&gt; &amp;_init)&#123;</span><br><span class="line">        <span class="built_in">init</span>(_init);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">const</span> vector&lt;Info&gt; &amp;_init)</span></span>&#123;</span><br><span class="line">        n = (<span class="type">int</span>)_init.<span class="built_in">size</span>();</span><br><span class="line">        info.<span class="built_in">assign</span>((n &lt;&lt; <span class="number">2</span>) + <span class="number">1</span>, <span class="built_in">Info</span>());</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">                info[p] = _init[l - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= m)&#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span></span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Info <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; y || r &lt; x)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)&#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">query</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Info <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">        <span class="type">int</span> l,r, cnt = <span class="number">0</span>; </span><br><span class="line">    &#125;t[<span class="number">500000</span>];</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r ,<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">        t[p].l = l, t[p].r = r;</span><br><span class="line">        <span class="keyword">if</span>(t[p].l == t[p].r)&#123;</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(l , m , p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="built_in">build</span>(m+<span class="number">1</span>, r, p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>);</span><br><span class="line">        t[p].cnt = <span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].cnt, t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> p,<span class="type">int</span> res)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[p].l == t[p].r)&#123;</span><br><span class="line">            t[p].cnt = <span class="built_in">max</span>(t[p].cnt, res);</span><br><span class="line">            <span class="keyword">return</span> ;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (t[p].l +t[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= m)<span class="built_in">modify</span>(l ,p&lt;&lt;<span class="number">1</span>, res);</span><br><span class="line">        <span class="keyword">else</span> <span class="built_in">modify</span>(l, p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, res);</span><br><span class="line">        t[p].cnt = <span class="built_in">max</span>(t[p&lt;&lt;<span class="number">1</span>].cnt, t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r)&#123;</span><br><span class="line">            <span class="keyword">return</span> t[p].cnt;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (t[p].l + t[p].r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span>(l &lt;= m)ans = <span class="built_in">query</span>(l, r, p&lt;&lt;<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">if</span>(r &gt; m)ans = <span class="built_in">max</span>(ans, <span class="built_in">query</span>(l, r, p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>));</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">lengthOfLIS</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; nums, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1</span>;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">100030</span>,<span class="number">1</span>);</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> v : nums)&#123;</span><br><span class="line">            <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">            <span class="keyword">if</span>(v == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, <span class="number">1</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                res = <span class="built_in">query</span>(<span class="built_in">max</span>(<span class="number">1</span>, v - k), v - <span class="number">1</span>, <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">                ans = <span class="built_in">max</span>(res, ans);</span><br><span class="line">                <span class="built_in">modify</span>(v, <span class="number">1</span>, res);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;   </span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e6</span> + <span class="number">7</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line">ll a[N];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span> &#123;</span><br><span class="line">    ll lazy = <span class="number">0</span>, l = <span class="number">0</span>, r = <span class="number">0</span>, cnt = <span class="number">0</span>;</span><br><span class="line">&#125;t[N * <span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">build</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)</span> </span>&#123;</span><br><span class="line">    t[p].l = l, t[p].r = r;</span><br><span class="line">    <span class="keyword">if</span> (l == r) &#123;</span><br><span class="line">        t[p].cnt = a[l];</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">int</span> m = (t[p].l + t[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>, l, m);</span><br><span class="line">    <span class="built_in">build</span>(p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">    t[p].cnt=t[p&lt;&lt;<span class="number">1</span>].cnt+t[p&lt;&lt;<span class="number">1</span>|<span class="number">1</span>].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">spread</span><span class="params">(<span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> k = t[p].lazy;</span><br><span class="line">    <span class="keyword">if</span>(k==<span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line">    <span class="type">int</span> l = t[p].l, r = t[p].r;</span><br><span class="line">    <span class="type">int</span> m = (l + r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    t[p &lt;&lt; <span class="number">1</span>].cnt += <span class="number">1ll</span>*(m - l + <span class="number">1</span>)*(ll)k;</span><br><span class="line">    t[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].cnt += <span class="number">1ll</span>*(r - m)*(ll)k;</span><br><span class="line">    t[p &lt;&lt; <span class="number">1</span>].lazy += k;</span><br><span class="line">    t[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].lazy += k;</span><br><span class="line">    t[p].lazy = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, ll plus, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) &#123;</span><br><span class="line">        t[p].cnt += (t[p].r - t[p].l + <span class="number">1</span>)*plus;</span><br><span class="line">        t[p].lazy += plus;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spread</span>(p);</span><br><span class="line">    <span class="type">int</span> m = (t[p].l + t[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= m)<span class="built_in">add</span>(l, r, plus, p &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; m)<span class="built_in">add</span>(l, r, plus, p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    t[p].cnt = t[p &lt;&lt; <span class="number">1</span>].cnt + t[p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>].cnt;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function">ll <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> p)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (t[p].l &gt;= l &amp;&amp; t[p].r &lt;= r) &#123;</span><br><span class="line">        <span class="keyword">return</span> t[p].cnt;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">spread</span>(p);</span><br><span class="line">    <span class="type">int</span> m = (t[p].l + t[p].r) &gt;&gt; <span class="number">1</span>;</span><br><span class="line">    ll ans = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">if</span> (l &lt;= m)ans += <span class="built_in">query</span>(l, r, p &lt;&lt; <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span> (r &gt; m)ans += <span class="built_in">query</span>(l, r, p &lt;&lt; <span class="number">1</span> | <span class="number">1</span>);</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;    </span><br><span class="line">    <span class="type">int</span> n, m;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i)cin &gt;&gt; a[i];</span><br><span class="line">    <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; ++i) &#123;</span><br><span class="line">        <span class="type">int</span> status, x, y, k;</span><br><span class="line">        cin &gt;&gt; status &gt;&gt; x &gt;&gt; y;</span><br><span class="line">        <span class="keyword">if</span> (status == <span class="number">1</span>) &#123;</span><br><span class="line">            cin &gt;&gt; k;</span><br><span class="line">            <span class="built_in">add</span>(x, y, k, <span class="number">1</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span> &#123;</span><br><span class="line">            cout &lt;&lt; <span class="built_in">query</span>(x, y, <span class="number">1</span>) &lt;&lt; endl;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="倍增树"><a href="#倍增树" class="headerlink" title="倍增树"></a>倍增树</h1><p>最近公共祖先类似思路</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">using</span> ll = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">1e5</span> + <span class="number">10</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> L = <span class="number">35</span>;</span><br><span class="line"><span class="type">int</span> nxt[N][L];</span><br><span class="line">ll val[N][L];</span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">long</span> <span class="type">long</span> <span class="title">getMaxFunctionValue</span><span class="params">(vector&lt;<span class="type">int</span>&gt;&amp; a, <span class="type">long</span> <span class="type">long</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = a.<span class="built_in">size</span>();</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">            nxt[i][<span class="number">0</span>] = a[i];</span><br><span class="line">            val[i][<span class="number">0</span>] = a[i];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j=<span class="number">1</span>; j&lt;L; ++j)&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">                nxt[i][j] = nxt[nxt[i][j<span class="number">-1</span>]][j<span class="number">-1</span>];</span><br><span class="line">                val[i][j] = val[nxt[i][j<span class="number">-1</span>]][j<span class="number">-1</span>] + val[i][j<span class="number">-1</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        ll ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">0</span>; i&lt;n; ++i)&#123;</span><br><span class="line">            ll cur = i;</span><br><span class="line">            <span class="type">int</span> u = i;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> j= L<span class="number">-1</span>; j&gt;=<span class="number">0</span>; --j)&#123;</span><br><span class="line">                <span class="keyword">if</span>(k &gt;&gt; j &amp; <span class="number">1</span>)&#123;</span><br><span class="line">                    cur += val[u][j];</span><br><span class="line">                    u = nxt[u][j];</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            ans = <span class="built_in">max</span>(ans, cur);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="kmp"><a href="#kmp" class="headerlink" title="kmp"></a>kmp</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">string part = <span class="string">&quot;abc&quot;</span>;</span><br><span class="line">vector&lt;<span class="type">int</span>&gt;<span class="built_in">nt</span>(part.<span class="built_in">size</span>(), <span class="number">-1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt; part.<span class="built_in">size</span>() ;++i)&#123;</span><br><span class="line">    <span class="type">int</span> j = nt[i - <span class="number">1</span>];</span><br><span class="line">    <span class="keyword">while</span>(j != <span class="number">-1</span> &amp;&amp; part[j + <span class="number">1</span>] != part[i])j = nt[j];</span><br><span class="line">    <span class="keyword">if</span>(part[j + <span class="number">1</span>] == part[i])j++;</span><br><span class="line">    nt[i] = j;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!s.<span class="built_in">empty</span>())&#123;</span><br><span class="line">    <span class="type">int</span> k = <span class="number">-1</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>,j = <span class="number">-1</span>; i &lt; s.<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">        <span class="keyword">while</span>(j != <span class="number">-1</span> &amp;&amp; part[j + <span class="number">1</span>] != s[i])j = nt[j];</span><br><span class="line">        <span class="keyword">if</span>(part[j + <span class="number">1</span>] == s[i])j++;</span><br><span class="line">        <span class="keyword">if</span>(j == part.<span class="built_in">size</span>() - <span class="number">1</span>)&#123;</span><br><span class="line">            k = i - part.<span class="built_in">size</span>() + <span class="number">1</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(k == <span class="number">-1</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    string cur = s.<span class="built_in">substr</span>(<span class="number">0</span>, k) + s.<span class="built_in">substr</span>(k + part.<span class="built_in">size</span>());</span><br><span class="line">    s = cur;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="预处理阶乘"><a href="#预处理阶乘" class="headerlink" title="预处理阶乘"></a>预处理阶乘</h1><ul><li>可以用来计算 组合数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    fac[i]=fac[i<span class="number">-1</span>]*i%p;</span><br><span class="line">ifac[n]=<span class="built_in">qpow</span>(fac[n],p<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">    ifac[j]=ifac[j+<span class="number">1</span>]*(j+<span class="number">1</span>)%p;</span><br></pre></td></tr></table></figure><ul><li>计算组合数</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function">ll <span class="title">c</span><span class="params">(ll n,ll m)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> fac[n]*ifac[m]%p*ifac[n-m]%p;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="二进制枚举"><a href="#二进制枚举" class="headerlink" title="二进制枚举"></a>二进制枚举</h1><ul><li>枚举所有的子集</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; (<span class="number">1</span> &lt;&lt; n); ++i)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">31</span>; ++j)&#123;</span><br><span class="line">        <span class="keyword">if</span>(i &gt;&gt; j &amp; <span class="number">1</span>)&#123;</span><br><span class="line">            <span class="comment">/// 执行流程</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 处理结果</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="树的直径"><a href="#树的直径" class="headerlink" title="树的直径"></a>树的直径</h1><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i)&#123;</span><br><span class="line">       <span class="type">int</span> u, v;</span><br><span class="line">       cin&gt;&gt;u&gt;&gt;v;</span><br><span class="line">       u--, v--;</span><br><span class="line">       e[u].<span class="built_in">push_back</span>(v);</span><br><span class="line">       e[v].<span class="built_in">push_back</span>(u);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">   function&lt;<span class="type">int</span>(<span class="type">int</span>, <span class="type">int</span> )&gt;dfs = [&amp;](<span class="type">int</span> u, <span class="type">int</span> fa)&#123;</span><br><span class="line">       <span class="type">int</span> max1 = <span class="number">0</span>, max2 = <span class="number">0</span>;</span><br><span class="line">       <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; e[u].<span class="built_in">size</span>(); ++i)&#123;</span><br><span class="line">           <span class="type">int</span> to = e[u][i];</span><br><span class="line">           <span class="keyword">if</span>(to == fa) <span class="keyword">continue</span>;</span><br><span class="line">           <span class="type">int</span> maxv = <span class="built_in">dfs</span>(to, u);</span><br><span class="line">           <span class="keyword">if</span>(maxv &gt; max1)&#123;</span><br><span class="line">               max2 = max1;</span><br><span class="line">               max1 = maxv;</span><br><span class="line">           &#125;</span><br><span class="line">           <span class="keyword">else</span> <span class="keyword">if</span>(maxv &gt; max2)&#123;</span><br><span class="line">               max2 = maxv;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;     </span><br><span class="line">ans = <span class="built_in">max</span>(ans, max1, max2);</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">max</span>(max1, max2)  + <span class="number">1</span>;</span><br><span class="line">   &#125;;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法板子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法题目记录</title>
      <link href="/2023/11/27/%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/11/27/%E7%AE%97%E6%B3%95%E9%A2%98%E7%9B%AE%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<ul><li>格式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 题目来源 ， 什么算法 </span></span><br><span class="line"><span class="comment">// 提交代码</span></span><br></pre></td></tr></table></figure><h1 id="2023-11-27"><a href="#2023-11-27" class="headerlink" title="2023-11-27"></a>2023-11-27</h1><blockquote><p>异或树</p><p>cf   <a href="https://www.luogu.com.cn/problem/solution/CF1658D2">CF1658D2 388535 (Hard Version) - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">int</span> T,l,r,a[N],cnt,trie[N][<span class="number">30</span>],b[N];</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">insert</span><span class="params">(<span class="type">int</span> sum)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">bool</span> tmp=(<span class="number">1</span>&lt;&lt;i)&amp;sum;</span><br><span class="line"><span class="keyword">if</span>(!trie[now][tmp])trie[now][tmp]=++cnt;</span><br><span class="line">now=trie[now][tmp];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Max</span><span class="params">(<span class="type">int</span> sum)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">bool</span> tmp=(<span class="number">1</span>&lt;&lt;i)&amp;sum;</span><br><span class="line"><span class="keyword">if</span>(!trie[now][tmp^<span class="number">1</span>])now=trie[now][tmp];</span><br><span class="line"><span class="keyword">else</span> now=trie[now][tmp^<span class="number">1</span>],res+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">Min</span><span class="params">(<span class="type">int</span> sum)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> now=<span class="number">0</span>,res=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">17</span>;i&gt;=<span class="number">0</span>;i--)&#123;</span><br><span class="line"><span class="type">bool</span> tmp=(<span class="number">1</span>&lt;&lt;i)&amp;sum;</span><br><span class="line"><span class="keyword">if</span>(!trie[now][tmp])now=trie[now][tmp^<span class="number">1</span>],res+=(<span class="number">1</span>&lt;&lt;i);</span><br><span class="line"><span class="keyword">else</span> now=trie[now][tmp];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> res;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>floyd </p><p>预赛</p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="type">int</span> k = <span class="number">1</span>; k &lt;= n; ++k)&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; ++i))&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= n; ++j)&#123;</span><br><span class="line">dp[i][j] = <span class="built_in">min</span>(dp[i][j], dp[i][k] + dp[k][j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>拓扑排序</p><p>cf <a href="https://zhuanlan.zhihu.com/p/655684265">Codeforces Round 897 (Div. 2) A - F - 知乎 (zhihu.com)</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">auto</span> dfs = [&amp;](<span class="keyword">auto</span> &amp;&amp;dfs, <span class="type">int</span> u, <span class="type">int</span> from) -&gt; <span class="type">void</span> &#123;</span><br><span class="line">    v[u] = <span class="literal">true</span>;</span><br><span class="line">    ins[u] = <span class="literal">true</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">auto</span> [j, id] : g[u])&#123;</span><br><span class="line">        <span class="keyword">if</span> (id == from) <span class="keyword">continue</span>;</span><br><span class="line">        <span class="keyword">if</span> (!v[j]) <span class="built_in">dfs</span>(dfs, j, id);</span><br><span class="line">        <span class="keyword">else</span> <span class="keyword">if</span> (ins[j])&#123;</span><br><span class="line">            <span class="type">int</span> t = j;</span><br><span class="line">            cycle.<span class="built_in">clear</span>();</span><br><span class="line">            cycle.<span class="built_in">push_back</span>(j);</span><br><span class="line">            <span class="keyword">while</span>(<span class="number">1</span>)&#123;</span><br><span class="line">                t = a[t];</span><br><span class="line">                <span class="keyword">if</span> (t == j) <span class="keyword">break</span>;</span><br><span class="line">                cycle.<span class="built_in">push_back</span>(t);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    ins[u] = <span class="literal">false</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h1 id="2023-11-28"><a href="#2023-11-28" class="headerlink" title="2023-11-28"></a>2023-11-28</h1><blockquote><p>拓扑排序</p><p>CF   <a href="https://www.luogu.com.cn/problem/solution/CF1593E">CF1593E Gardener and Tree - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">toposort</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    queue&lt;<span class="type">int</span>&gt; q;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span>(deg[i] == <span class="number">1</span>) &#123;</span><br><span class="line">            q.<span class="built_in">push</span>(i);</span><br><span class="line">            rnk[i] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">while</span>(!q.<span class="built_in">empty</span>()) &#123;</span><br><span class="line">        <span class="type">int</span> u = q.<span class="built_in">front</span>(); q.<span class="built_in">pop</span>();</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; G[u].<span class="built_in">size</span>(); i++) &#123;</span><br><span class="line">            <span class="type">int</span> v = G[u][i];</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(--deg[v] == <span class="number">1</span>) &#123;</span><br><span class="line">                rnk[v] = rnk[u] + <span class="number">1</span>;</span><br><span class="line">                q.<span class="built_in">push</span>(v);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>分治</p><p>leetcode <a href="https://leetcode.cn/problems/beautiful-array/description/">932. 漂亮数组 - 力扣（LeetCode）</a></p></blockquote><p>奇数 + 偶数 等于 奇数</p><p>题目的原理， 可以进行映射处理， 所有，对于每一层</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281024388.webp" alt="image-20231128102547476"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    unordered_map&lt;<span class="type">int</span>,vector&lt;<span class="type">int</span>&gt; &gt; mp;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">beautifulArray</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">f</span>(N);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">f</span><span class="params">(<span class="type">int</span> N)</span> </span>&#123;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">ans</span><span class="params">(N, <span class="number">0</span>)</span></span>;</span><br><span class="line">        <span class="type">int</span> t = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">if</span> (mp.<span class="built_in">find</span>(N) != mp.<span class="built_in">end</span>()) &#123;</span><br><span class="line">            <span class="keyword">return</span> mp[N];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (N != <span class="number">1</span>) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : <span class="built_in">f</span>((N+<span class="number">1</span>)/<span class="number">2</span>))&#123;</span><br><span class="line">                ans[t++]= <span class="number">2</span> * x - <span class="number">1</span>;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">auto</span> x : <span class="built_in">f</span>(N/<span class="number">2</span>))&#123;</span><br><span class="line">                ans[t++] =  <span class="number">2</span> * x;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;<span class="keyword">else</span> &#123;</span><br><span class="line">            ans[<span class="number">0</span>] = <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        mp[N] = ans;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>构造题</p><p>CF <a href="https://codeforces.com/problemset/problem/1582/D">Problem - 1582D - Codeforces</a></p></blockquote><p>构造题目， 需要大胆猜测， 这里说全部加起来为0， 这有点难想， 但是转换更小的情况取思考） 我们设 b i + 1 &#x3D; ai， bi &#x3D; ai + 1， 这样子就会好像很多了</p><h1 id="2023-11-29"><a href="#2023-11-29" class="headerlink" title="2023-11-29"></a>2023-11-29</h1><blockquote><p>数据结构 ， 规律</p><p>CF  <a href="https://www.luogu.com.cn/problem/solution/CF1899F">CF1899F Alex’s whims - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p></blockquote><p>a[i] &#x3D; i + 1这种处理数据结构的方式， 可以解决那种 一个点， 后面的所有点， 移动到另外一个点的后面, 而且需要记录节点编号</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> ll long long</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> ll <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line">ll x=<span class="number">0</span>,y=<span class="number">1</span>;</span><br><span class="line"><span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;</span><br><span class="line"><span class="keyword">if</span>(ch==<span class="string">&#x27;-&#x27;</span>)y=<span class="number">-1</span>;</span><br><span class="line">ch=<span class="built_in">getchar</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch&amp;<span class="number">15</span>),ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">return</span> x*y;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N=<span class="number">5e2</span>+<span class="number">7</span>;</span><br><span class="line">ll T,n,q,u[N],ut,v[N],vt;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">moveu</span><span class="params">(ll y)</span></span>&#123;</span><br><span class="line">ll U,V1,V2;</span><br><span class="line">U=u[ut-y+<span class="number">1</span>];</span><br><span class="line">V1=u[ut-y];</span><br><span class="line">V2=v[vt];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld %lld\n&quot;</span>,U,V1,V2);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=ut-y+<span class="number">1</span>;i&lt;=ut;i++)</span><br><span class="line">v[++vt]=u[i];</span><br><span class="line">ut-=y; </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">movev</span><span class="params">(ll y)</span></span>&#123;</span><br><span class="line">ll U,V1,V2;</span><br><span class="line">U=v[vt-y+<span class="number">1</span>];</span><br><span class="line">V1=v[vt-y];</span><br><span class="line">V2=u[ut];</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%lld %lld %lld\n&quot;</span>,U,V1,V2);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=vt-y+<span class="number">1</span>;i&lt;=vt;i++)</span><br><span class="line">u[++ut]=v[i];</span><br><span class="line">vt-=y;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">T=<span class="built_in">read</span>();</span><br><span class="line">u[<span class="number">1</span>]=v[<span class="number">1</span>]=<span class="number">2</span>;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line">n=<span class="built_in">read</span>();q=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;n;i++)</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d %d\n&quot;</span>,i,i+<span class="number">1</span>);</span><br><span class="line">ut=n<span class="number">-1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">2</span>;i&lt;=ut;i++)</span><br><span class="line">u[i]=i+<span class="number">1</span>;</span><br><span class="line">vt=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">while</span>(q--)&#123;</span><br><span class="line">ll x=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(x==vt||x==ut)<span class="built_in">printf</span>(<span class="string">&quot;-1 -1 -1\n&quot;</span>);</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x&gt;ut) <span class="built_in">movev</span>(x-ut);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">moveu</span>(ut-x);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2023-11-30"><a href="#2023-11-30" class="headerlink" title="2023-11-30"></a>2023-11-30</h1><blockquote><p>逆序对</p><p>CF  <a href="https://zhuanlan.zhihu.com/p/424592841">Codeforces Global Round 16 - 知乎 (zhihu.com)</a></p></blockquote><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"> </span><br><span class="line"><span class="type">int</span> t, n, m;</span><br><span class="line">std::vector&lt;std::pair&lt;<span class="type">int</span>, <span class="type">int</span>&gt;&gt; a;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;t);</span><br><span class="line">    <span class="keyword">while</span> (t--) &#123;</span><br><span class="line">        <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>, &amp;n, &amp;m);</span><br><span class="line">        a.<span class="built_in">resize</span>(n*m);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n * m; ++i) <span class="built_in">scanf</span>(<span class="string">&quot;%d&quot;</span>, &amp;a[i].first), a[i].second = i;</span><br><span class="line">        std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>(), a.<span class="built_in">end</span>());</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; ++i) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) a[i*m+j].second *= <span class="number">-1</span>;</span><br><span class="line">            std::<span class="built_in">sort</span>(a.<span class="built_in">begin</span>()+i*m, a.<span class="built_in">begin</span>()+(i+<span class="number">1</span>)*m);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> k = <span class="number">0</span>; k &lt; j; ++k)</span><br><span class="line">                    <span class="keyword">if</span> (a[i*m+k].second &gt; a[i*m+j].second) ++ans;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, ans);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>回文串</p><p>CF <a href="https://www.luogu.com.cn/problem/solution/CF1555D">CF1555D Say No to Palindromes - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p></blockquote><ul><li><p>一开始就可以取考虑 循环 串的方向， </p><p>然后我们发现一个字符串如果不按照 abc 的全排列构成的循环串 就不可能实现回文</p><p>所以考虑把当i个字符串变成abc 全排列的一种，需要消耗多少费用， 然后来解决这个问题。（别再当蠢猪了）</p></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstdio&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="type">const</span> <span class="type">int</span> N = <span class="number">2e5</span> + <span class="number">10</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> n,m;</span><br><span class="line"><span class="type">int</span> sum[<span class="number">7</span>][N];</span><br><span class="line">string s;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(<span class="type">char</span> x , <span class="type">char</span> y , <span class="type">char</span> z , <span class="type">int</span> t)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        sum[t][i + <span class="number">1</span>] += sum[t][i];</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">0</span> &amp;&amp; s[i] != x) sum[t][i + <span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">1</span> &amp;&amp; s[i] != y) sum[t][i + <span class="number">1</span>]++;</span><br><span class="line">        <span class="keyword">if</span>(i % <span class="number">3</span> == <span class="number">2</span> &amp;&amp; s[i] != z) sum[t][i + <span class="number">1</span>]++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">//  freopen(&quot;aa.in&quot;,&quot;r&quot;,stdin);</span></span><br><span class="line">    <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;n,&amp;m);</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">work</span>(<span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;b&#x27;</span> , <span class="string">&#x27;c&#x27;</span> , <span class="number">1</span>);</span><br><span class="line">    <span class="built_in">work</span>(<span class="string">&#x27;b&#x27;</span> , <span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;c&#x27;</span> , <span class="number">2</span>);</span><br><span class="line">    <span class="built_in">work</span>(<span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;b&#x27;</span> , <span class="number">3</span>);</span><br><span class="line">    <span class="built_in">work</span>(<span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;b&#x27;</span> , <span class="string">&#x27;a&#x27;</span> , <span class="number">4</span>);</span><br><span class="line">    <span class="built_in">work</span>(<span class="string">&#x27;a&#x27;</span> , <span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;b&#x27;</span> , <span class="number">5</span>);</span><br><span class="line">    <span class="built_in">work</span>(<span class="string">&#x27;b&#x27;</span> , <span class="string">&#x27;c&#x27;</span> , <span class="string">&#x27;a&#x27;</span> , <span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= m; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="type">int</span> l , r; <span class="built_in">scanf</span>(<span class="string">&quot;%d%d&quot;</span>,&amp;l,&amp;r);</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">1e9</span> + <span class="number">10</span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">1</span>; j &lt;= <span class="number">6</span>; j++)</span><br><span class="line">            ans = <span class="built_in">min</span>(ans , sum[j][r] - sum[j][l - <span class="number">1</span>]);</span><br><span class="line">        <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数学</p><p>CF <a href="https://www.luogu.com.cn/problem/solution/CF1542C">CF1542C Strange Function - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p></blockquote><p>如果一个数， 可以被 1， 2， 3， 4， 5 ， 6 除， 那么这个数最小是多少， 1 * 2 * 3 * 4 * 5 * 6， 然后一个这个单位增加的数， 依旧满足这个特征， 那么我们就可以计算出来， 一个数x里面有多少个 可以 被 1 ~ 6 相除的个数</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311301908117.webp" alt="image-20231130190804898"></p><h1 id="2023-12-1"><a href="#2023-12-1" class="headerlink" title="2023-12-1"></a>2023-12-1</h1><blockquote><p>构造题， 字符串</p><p>CF <a href="https://www.luogu.com.cn/problem/CF1537E2">Erase and Extend (Hard Version) - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p></blockquote><p>直接从长度为 0 开始往后构造数组就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    n = <span class="built_in">read</span>(); K = <span class="built_in">read</span>();</span><br><span class="line">    cin &gt;&gt; s;</span><br><span class="line">    <span class="type">int</span> p = <span class="number">1</span>, i = <span class="number">0</span>, n = s.<span class="built_in">length</span>();</span><br><span class="line">    <span class="keyword">for</span> (; i &lt; n; ++ i) &#123;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &gt; s[i % p]) <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">if</span> (s[i] &lt; s[i % p]) p = i + <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; K; ++ i) <span class="built_in">putchar</span>(s[i % p]);</span><br><span class="line">    <span class="built_in">puts</span>(<span class="string">&quot;&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>数学 </p><p>CF <a href="https://www.luogu.com.cn/problem/solution/CF1603B">CF1603B Moderate Modular Mode - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312012332784.webp" alt="image-20231201233232623"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> T; cin&gt;&gt;T;</span><br><span class="line"><span class="keyword">while</span>(T--)&#123;</span><br><span class="line"><span class="type">int</span> x,y; cin&gt;&gt;x&gt;&gt;y;</span><br><span class="line"><span class="keyword">if</span>(x&gt;y) cout&lt;&lt;x+y&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(x==y) cout&lt;&lt;x&lt;&lt;endl;</span><br><span class="line"><span class="keyword">else</span> cout&lt;&lt;y-(y%x)/<span class="number">2</span>&lt;&lt;endl;</span><br><span class="line">&#125;<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2023-12-3"><a href="#2023-12-3" class="headerlink" title="2023-12-3"></a>2023-12-3</h1><blockquote><p>思维题</p><p>leetcode <a href="https://leetcode.cn/problems/minimum-number-of-coins-to-be-added/">100153. 需要添加的硬币的最小数量 - 力扣（LeetCode）</a></p></blockquote><ul><li>一开始想成了背包问题，实际上不是， 考虑一个情况， 如果 你能凑出前m个元素， 当前元素是x， <ul><li>如果x 《&#x3D; m， 那么 【1， m + x】，你都可以凑出来</li><li>否则， 我们在添加一个m， 尽可能扩大元素， 使得后面的x 《&#x3D; m</li></ul></li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="type">int</span> <span class="title">minimumAddedCoins</span><span class="params">(<span class="type">int</span>[] coins, <span class="type">int</span> target)</span> </span>&#123;</span><br><span class="line">        Arrays.<span class="built_in">sort</span>(coins);</span><br><span class="line">        <span class="type">int</span> addedCoins = <span class="number">0</span>;</span><br><span class="line">        <span class="type">int</span> value = <span class="number">1</span>;</span><br><span class="line">        <span class="type">int</span> m = coins.length;</span><br><span class="line">        <span class="type">int</span> index = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">while</span> (value &lt;= target) &#123;</span><br><span class="line">            <span class="keyword">if</span> (index &lt; m &amp;&amp; coins[index] &lt;= value) &#123;</span><br><span class="line">                value += coins[index];</span><br><span class="line">                index++;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                addedCoins++;</span><br><span class="line">                value *= <span class="number">2</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> addedCoins;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>滑动窗口 模拟题</p><p>leetcode <a href="https://leetcode.cn/problems/minimum-number-of-coins-to-be-added/"><a href="https://leetcode.cn/problems/count-complete-substrings/">100145. 统计完全子字符串 - 力扣（LeetCode）</a></a></p></blockquote><ul><li>这道题目， 一开始就往 哈希的方向去想， 但是这是错误， 因为 当前cur 可能可以与多种情况进行匹配（分类思考能力不行），</li><li>实际上这题就是枚举 不同字符的个数， 这个时候窗口的长度就已经固定住了， 那么就直接最基础的滑动窗口就可以过掉了</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Solution</span> &#123;</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">f</span><span class="params">(string s, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> res = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> m = <span class="number">1</span>; m &lt;= <span class="number">26</span> &amp;&amp; k * m &lt;= s.<span class="built_in">length</span>(); m++) &#123;</span><br><span class="line">            <span class="type">int</span> cnt[<span class="number">26</span>]&#123;&#125;;</span><br><span class="line">            <span class="keyword">auto</span> check = [&amp;]() &#123;</span><br><span class="line">                <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">26</span>; i++) &#123;</span><br><span class="line">                    <span class="keyword">if</span> (cnt[i] &amp;&amp; cnt[i] != k) &#123;</span><br><span class="line">                        <span class="keyword">return</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">                res++;</span><br><span class="line">            &#125;;</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> right = <span class="number">0</span>; right &lt; s.<span class="built_in">length</span>(); right++) &#123;</span><br><span class="line">                cnt[s[right] - <span class="string">&#x27;a&#x27;</span>]++;</span><br><span class="line">                <span class="type">int</span> left = right + <span class="number">1</span> - k * m;</span><br><span class="line">                <span class="keyword">if</span> (left &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="built_in">check</span>();</span><br><span class="line">                    cnt[s[left] - <span class="string">&#x27;a&#x27;</span>]--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> res;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span>:</span><br><span class="line">    <span class="function"><span class="type">int</span> <span class="title">countCompleteSubstrings</span><span class="params">(string word, <span class="type">int</span> k)</span> </span>&#123;</span><br><span class="line">        <span class="type">int</span> n = word.<span class="built_in">length</span>();</span><br><span class="line">        <span class="type">int</span> ans = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n;) &#123;</span><br><span class="line">            <span class="type">int</span> st = i;</span><br><span class="line">            <span class="keyword">for</span> (i++; i &lt; n &amp;&amp; <span class="built_in">abs</span>(<span class="built_in">int</span>(word[i]) - <span class="built_in">int</span>(word[i - <span class="number">1</span>])) &lt;= <span class="number">2</span>; i++);</span><br><span class="line">            ans += <span class="built_in">f</span>(word.<span class="built_in">substr</span>(st, i - st), k);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ans;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><blockquote><p>数学</p><p>leetcode <a href="https://leetcode.cn/problems/count-the-number-of-infection-sequences/description/">100146. 统计感冒序列的数目 - 力扣（LeetCode）</a></p></blockquote><ul><li>没时间看了</li><li>就是第一种是 序列之间各个元素之间的插入顺序（然后这个时候插入的元素还没有指定是序列中的哪一个元素），然后第二部在对同一个序列之内进行方案计算</li></ul><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">fac[<span class="number">0</span>]=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)</span><br><span class="line">    fac[i]=fac[i<span class="number">-1</span>]*i%p;</span><br><span class="line">ifac[n]=<span class="built_in">qpow</span>(fac[n],p<span class="number">-2</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> j=n<span class="number">-1</span>;j&gt;=<span class="number">0</span>;j--)</span><br><span class="line">    ifac[j]=ifac[j+<span class="number">1</span>]*(j+<span class="number">1</span>)%p;</span><br></pre></td></tr></table></figure><h1 id="2023-12-4"><a href="#2023-12-4" class="headerlink" title="2023-12-4"></a>2023-12-4</h1><blockquote><p>数学题</p><p>CF <a href="https://codeforces.com/contest/1902/problem/D">Problem - D - Codeforces</a></p></blockquote><p>考虑下面几个等式</p><p>我们就可以推出结论， 然后二分判断 即可</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041341134.webp" alt="0fc3725a6c1fc6ee2458cc4a295add1"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">map&lt;pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;,vector&lt;<span class="type">int</span>&gt; &gt;V;</span><br><span class="line"><span class="function"><span class="keyword">inline</span> <span class="type">bool</span> <span class="title">Ask</span><span class="params">(re <span class="type">int</span> x,re <span class="type">int</span> y,re <span class="type">int</span> l,re <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">pair&lt;<span class="type">int</span>,<span class="type">int</span>&gt;tmp=<span class="built_in">make_pair</span>(x,y);</span><br><span class="line"><span class="type">int</span> o=<span class="built_in">lower_bound</span>(V[tmp].<span class="built_in">begin</span>(),V[tmp].<span class="built_in">end</span>(),l)-V[tmp].<span class="built_in">begin</span>();</span><br><span class="line"><span class="keyword">if</span>(o&gt;=V[tmp].<span class="built_in">size</span>())<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span> V[tmp][o]&lt;=r;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">n=<span class="built_in">read</span>(),m=<span class="built_in">read</span>();</span><br><span class="line"><span class="built_in">scanf</span>(<span class="string">&quot;%s&quot;</span>,s+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">X[i]=X[i<span class="number">-1</span>],Y[i]=Y[i<span class="number">-1</span>];</span><br><span class="line"><span class="keyword">if</span>(s[i]==<span class="string">&#x27;R&#x27;</span>)++X[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;L&#x27;</span>)--X[i];</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(s[i]==<span class="string">&#x27;U&#x27;</span>)++Y[i];</span><br><span class="line"><span class="keyword">else</span> --Y[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(re <span class="type">int</span> i=<span class="number">0</span>;i&lt;=n;++i)V[<span class="built_in">make_pair</span>(X[i],Y[i])].<span class="built_in">push_back</span>(i);</span><br><span class="line"><span class="keyword">while</span>(m--)&#123;</span><br><span class="line">re <span class="type">int</span> x=<span class="built_in">read</span>(),y=<span class="built_in">read</span>(),l=<span class="built_in">read</span>(),r=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">Ask</span>(x,y,<span class="number">0</span>,l<span class="number">-1</span>))<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Ask</span>(x,y,r,n))<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(<span class="built_in">Ask</span>(X[l<span class="number">-1</span>]*<span class="number">2</span>+(X[r]-X[l<span class="number">-1</span>])-x,Y[l<span class="number">-1</span>]*<span class="number">2</span>+(Y[r]-Y[l<span class="number">-1</span>])-y,l,r))<span class="built_in">puts</span>(<span class="string">&quot;YES&quot;</span>);</span><br><span class="line"><span class="keyword">else</span> <span class="built_in">puts</span>(<span class="string">&quot;NO&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>模拟题</p><p>CF <a href="https://codeforces.com/contest/1898/standings">Standings - Codeforces Round 910 (Div. 2) - Codeforces</a></p></blockquote><p>题目思路不难想， 但是代码有点难写， 就在结尾设置可以绕圈的地方就好了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">solve</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="type">int</span> n, m, k;</span><br><span class="line">    cin &gt;&gt; n &gt;&gt; m &gt;&gt; k;</span><br><span class="line">    <span class="keyword">if</span> (k &lt; n - <span class="number">1</span> + m - <span class="number">1</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (k % <span class="number">2</span> != (n + m) % <span class="number">2</span>) &#123;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;NO\n&quot;</span>;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    cout &lt;&lt; <span class="string">&quot;YES\n&quot;</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> t = <span class="number">0</span>; t &lt; n; ++t) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; m - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">0</span>) &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;R &quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; <span class="string">&quot;B &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">char</span> ch = (m % <span class="number">2</span> == <span class="number">0</span> ? <span class="string">&#x27;B&#x27;</span> : <span class="string">&#x27;R&#x27;</span>);</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; n - <span class="number">1</span>; ++i) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; m; ++j) &#123;</span><br><span class="line">            <span class="keyword">if</span> (i % <span class="number">2</span> == <span class="number">1</span> &amp;&amp; j == m - <span class="number">1</span>) &#123;</span><br><span class="line">                <span class="type">char</span> c = <span class="string">&#x27;B&#x27;</span> + <span class="string">&#x27;R&#x27;</span> - ch;</span><br><span class="line">                cout &lt;&lt; c &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                cout &lt;&lt; ch &lt;&lt; <span class="string">&quot; &quot;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cout &lt;&lt; <span class="string">&quot;\n&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br></pre></td></tr></table></figure><h1 id="2023-12-5"><a href="#2023-12-5" class="headerlink" title="2023-12-5"></a>2023-12-5</h1><blockquote><p>二分</p><p>CF <a href="https://codeforces.com/contest/1907/problem/D">Problem - D - Codeforces</a></p></blockquote><ul><li>想到了二分，但是不知道怎么写check函数， 实际上，就是把他能走到的边界算出来就好了</li></ul><blockquote><p>模拟题</p><p>CF <a href="https://codeforces.com/contest/1907/problem/F">Problem - F - Codeforces</a></p></blockquote><ul><li>知道怎么做，但是就是打不出来代码， 实际上观察可以发现， 满足添加的模型一定满足 (a[i] &lt;&#x3D; (a[(i + 1) %n])) &lt;&#x3D; 1或者 (a[i] &gt;&#x3D; (a[(i + 1) %n])) &lt;&#x3D; 1</li><li>然后就好搞了</li></ul><blockquote><p>思维题</p><p>CF <a href="https://codeforces.com/contest/1907/problem/E">Problem - E - Codeforces</a></p></blockquote><ul><li>实际上这题 你可以这么想如果我想要进位， 那么就得dig就是当前位加上10， 那么对于下一位因为进位了， 所以我可以少要1， 但是你的dig 还是多出来了 9个， 我们不可能从前面省下来</li></ul><h1 id="2023-12-6"><a href="#2023-12-6" class="headerlink" title="2023-12-6"></a>2023-12-6</h1><blockquote><p>线段树</p><p>CF <a href="https://www.luogu.com.cn/problem/CF1896D">Ones and Twos - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a> <a href="https://zhuanlan.zhihu.com/p/668825638">CodeTON Round 7 (Div. 1 + Div. 2, Rated, Prizes!) A - E - 知乎 (zhihu.com)</a></p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312071336723.webp" alt="image-20231207133657587"></p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;numeric&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;functional&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;array&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="keyword">using</span> LL = <span class="type">long</span> <span class="type">long</span>;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> INF = <span class="number">1e9</span>;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">Info</span> &#123;</span><br><span class="line">    array&lt;<span class="type">int</span>, 2&gt; mx = &#123;<span class="number">0</span>, -INF&#125;, ls = &#123;<span class="number">0</span>, -INF&#125;, rs = &#123;<span class="number">0</span>, -INF&#125;;</span><br><span class="line">    <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Info <span class="keyword">operator</span>+(<span class="type">const</span> Info &amp;a, <span class="type">const</span> Info &amp;b)&#123;</span><br><span class="line">    Info ret = &#123;&#125;;</span><br><span class="line">    ret.sum = a.sum + b.sum;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">        ret.mx[i] = <span class="built_in">max</span>(a.mx[i], b.mx[i]);</span><br><span class="line">        ret.ls[i] = <span class="built_in">max</span>(a.ls[i], a.sum + b.ls[i ^ (a.sum % <span class="number">2</span>)]);</span><br><span class="line">        ret.rs[i] = <span class="built_in">max</span>(b.rs[i], b.sum + a.rs[i ^ (b.sum % <span class="number">2</span>)]);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">0</span>; i &lt; <span class="number">2</span>; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> j = <span class="number">0</span>; j &lt; <span class="number">2</span>; j++)&#123;</span><br><span class="line">            ret.mx[i ^ j] = <span class="built_in">max</span>(ret.mx[i ^ j], a.rs[i] + b.ls[j]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ret;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> <span class="title class_">Info</span>&gt;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">SegmentTree</span>&#123;</span><br><span class="line">    <span class="type">int</span> n;</span><br><span class="line">    vector&lt;Info&gt; info;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SegmentTree</span>() &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">int</span> n, Info _init = <span class="built_in">Info</span>())&#123;</span><br><span class="line">        <span class="built_in">init</span>(<span class="built_in">vector</span>&lt;Info&gt;(n, _init));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">SegmentTree</span>(<span class="type">const</span> vector&lt;Info&gt; &amp;_init)&#123;</span><br><span class="line">        <span class="built_in">init</span>(_init);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">init</span><span class="params">(<span class="type">const</span> vector&lt;Info&gt; &amp;_init)</span></span>&#123;</span><br><span class="line">        n = (<span class="type">int</span>)_init.<span class="built_in">size</span>();</span><br><span class="line">        info.<span class="built_in">assign</span>((n &lt;&lt; <span class="number">2</span>) + <span class="number">1</span>, <span class="built_in">Info</span>());</span><br><span class="line">        function&lt;<span class="type">void</span>(<span class="type">int</span>, <span class="type">int</span>, <span class="type">int</span>)&gt; build = [&amp;](<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r)&#123;</span><br><span class="line">            <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">                info[p] = _init[l - <span class="number">1</span>];</span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p, l, m);</span><br><span class="line">            <span class="built_in">build</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r);</span><br><span class="line">            <span class="built_in">pull</span>(p);</span><br><span class="line">        &#125;;</span><br><span class="line">        <span class="built_in">build</span>(<span class="number">1</span>, <span class="number">1</span>, n);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">pull</span><span class="params">(<span class="type">int</span> p)</span></span>&#123;</span><br><span class="line">        info[p] = info[<span class="number">2</span> * p] + info[<span class="number">2</span> * p + <span class="number">1</span>];</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">const</span> Info &amp;v)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l == r)&#123;</span><br><span class="line">            info[p] = v;</span><br><span class="line">            <span class="keyword">return</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">if</span> (x &lt;= m)&#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p, l, m, x, v);</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            <span class="built_in">modify</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r, x, v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">pull</span>(p);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="type">void</span> <span class="title">modify</span><span class="params">(<span class="type">int</span> p, <span class="type">const</span> Info &amp;v)</span></span>&#123;</span><br><span class="line">        <span class="built_in">modify</span>(<span class="number">1</span>, <span class="number">1</span>, n, p, v);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Info <span class="title">query</span><span class="params">(<span class="type">int</span> p, <span class="type">int</span> l, <span class="type">int</span> r, <span class="type">int</span> x, <span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (l &gt; y || r &lt; x)&#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="built_in">Info</span>();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (l &gt;= x &amp;&amp; r &lt;= y)&#123;</span><br><span class="line">            <span class="keyword">return</span> info[p];</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">int</span> m = (l + r) / <span class="number">2</span>;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">2</span> * p, l, m, x, y) + <span class="built_in">query</span>(<span class="number">2</span> * p + <span class="number">1</span>, m + <span class="number">1</span>, r, x, y);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function">Info <span class="title">query</span><span class="params">(<span class="type">int</span> l, <span class="type">int</span> r)</span></span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">query</span>(<span class="number">1</span>, <span class="number">1</span>, n, l, r);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    cin.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    cout.<span class="built_in">tie</span>(<span class="number">0</span>);</span><br><span class="line">    ios::<span class="built_in">sync_with_stdio</span>(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">    <span class="type">const</span> Info init1 = &#123;&#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, &#123;<span class="number">0</span>, <span class="number">1</span>&#125;, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="type">const</span> Info init2 = &#123;&#123;<span class="number">2</span>, -INF&#125;, &#123;<span class="number">2</span>, -INF&#125;, &#123;<span class="number">2</span>, -INF&#125;, <span class="number">2</span>&#125;;</span><br><span class="line"></span><br><span class="line">    <span class="type">int</span> T;</span><br><span class="line">    cin &gt;&gt; T;</span><br><span class="line">    <span class="keyword">while</span>(T--)&#123;</span><br><span class="line">        <span class="type">int</span> n, q;</span><br><span class="line">        cin &gt;&gt; n &gt;&gt; q;</span><br><span class="line">        <span class="function">vector&lt;<span class="type">int</span>&gt; <span class="title">a</span><span class="params">(n + <span class="number">1</span>)</span></span>;</span><br><span class="line">        <span class="function">vector&lt;Info&gt; <span class="title">init</span><span class="params">(n)</span></span>;</span><br><span class="line">        <span class="keyword">for</span>(<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line">            cin &gt;&gt; a[i];</span><br><span class="line">            init[i - <span class="number">1</span>] = (a[i] == <span class="number">1</span> ? init1 : init2);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="function">SegmentTree&lt;Info&gt; <span class="title">seg</span><span class="params">(init)</span></span>;</span><br><span class="line">        <span class="keyword">while</span>(q--)&#123;</span><br><span class="line">            <span class="type">int</span> op;</span><br><span class="line">            cin &gt;&gt; op;</span><br><span class="line">            <span class="keyword">if</span> (op == <span class="number">1</span>)&#123;</span><br><span class="line">                <span class="type">int</span> s;</span><br><span class="line">                cin &gt;&gt; s;</span><br><span class="line">                <span class="keyword">auto</span> ans = seg.<span class="built_in">query</span>(<span class="number">1</span>, n);</span><br><span class="line">                <span class="keyword">if</span> (ans.mx[s % <span class="number">2</span>] &gt;= s)&#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;YES&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">else</span>&#123;</span><br><span class="line">                    cout &lt;&lt; <span class="string">&quot;NO&quot;</span> &lt;&lt; <span class="string">&#x27;\n&#x27;</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span>&#123;</span><br><span class="line">                <span class="type">int</span> x, v;</span><br><span class="line">                cin &gt;&gt; x &gt;&gt; v;</span><br><span class="line">                seg.<span class="built_in">modify</span>(x, v == <span class="number">1</span> ? init1 : init2);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2023-12-7"><a href="#2023-12-7" class="headerlink" title="2023-12-7"></a>2023-12-7</h1><blockquote><p>线段树 思维</p><p>CF <a href="https://www.luogu.com.cn/problem/solution/CF1884C">CF1884C Medium Design - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p></blockquote><p>反正就是线段树各种骚操作就完了</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span><span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"><span class="type">const</span> <span class="type">int</span> MAXN=<span class="number">1e5</span>+<span class="number">10</span>;</span><br><span class="line"><span class="type">int</span> lsh[MAXN&lt;&lt;<span class="number">1</span>],chafen[MAXN&lt;&lt;<span class="number">1</span>],a[MAXN&lt;&lt;<span class="number">1</span>],n,m,b[MAXN&lt;&lt;<span class="number">1</span>];</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">line</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r;</span><br><span class="line"><span class="type">bool</span> <span class="keyword">operator</span>&lt;(<span class="type">const</span> line x)<span class="type">const</span>&#123;</span><br><span class="line"><span class="keyword">return</span> r&gt;x.r;</span><br><span class="line">&#125;</span><br><span class="line">&#125;li[MAXN];</span><br><span class="line">priority_queue&lt;line&gt;q;</span><br><span class="line"><span class="keyword">struct</span> <span class="title class_">linetree</span>&#123;</span><br><span class="line"><span class="type">int</span> l,r,minv,lazy;</span><br><span class="line">&#125;lt[MAXN&lt;&lt;<span class="number">3</span>];</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">read</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> x=<span class="number">0</span>;</span><br><span class="line"><span class="type">char</span> ch=<span class="built_in">getchar</span>();</span><br><span class="line"><span class="keyword">while</span>(ch&lt;<span class="string">&#x27;0&#x27;</span>||ch&gt;<span class="string">&#x27;9&#x27;</span>)&#123;ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">while</span>(ch&gt;=<span class="string">&#x27;0&#x27;</span>&amp;&amp;ch&lt;=<span class="string">&#x27;9&#x27;</span>)&#123;x=(x&lt;&lt;<span class="number">3</span>)+(x&lt;&lt;<span class="number">1</span>)+(ch^<span class="number">48</span>);ch=<span class="built_in">getchar</span>();&#125;</span><br><span class="line"><span class="keyword">return</span> x;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">buildtree</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(l==r)&#123;</span><br><span class="line">lt[id].l=lt[id].r=l;</span><br><span class="line">lt[id].lazy=lt[id].minv=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> lid=id&lt;&lt;<span class="number">1</span>,rid=lid+<span class="number">1</span>,mid=(l+r)&gt;&gt;<span class="number">1</span>;</span><br><span class="line"><span class="built_in">buildtree</span>(lid,l,mid);<span class="built_in">buildtree</span>(rid,mid+<span class="number">1</span>,r);</span><br><span class="line">lt[id].l=l;lt[id].r=r;</span><br><span class="line">lt[id].lazy=lt[id].minv=<span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushdown</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lt[id].lazy)&#123;</span><br><span class="line"><span class="type">int</span> lid=id&lt;&lt;<span class="number">1</span>,rid=lid+<span class="number">1</span>;</span><br><span class="line">lt[lid].lazy+=lt[id].lazy;</span><br><span class="line">lt[rid].lazy+=lt[id].lazy;</span><br><span class="line">lt[id].lazy=<span class="number">0</span>;</span><br><span class="line">lt[id].minv=<span class="built_in">min</span>(lt[lid].minv+lt[lid].lazy,lt[rid].minv+lt[rid].lazy);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">pushup</span><span class="params">(<span class="type">int</span> id)</span></span>&#123;</span><br><span class="line"><span class="type">int</span> lid=id&lt;&lt;<span class="number">1</span>,rid=lid+<span class="number">1</span>;</span><br><span class="line">lt[id].minv=<span class="built_in">min</span>(lt[lid].minv+lt[lid].lazy,lt[rid].minv+lt[rid].lazy);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">linetree_add</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r,<span class="type">int</span> k)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lt[id].l==l&amp;&amp;lt[id].r==r)&#123;</span><br><span class="line">lt[id].lazy+=k;</span><br><span class="line"><span class="keyword">return</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(id);</span><br><span class="line"><span class="type">int</span> lid=id&lt;&lt;<span class="number">1</span>,rid=lid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=lt[lid].r)&#123;</span><br><span class="line"><span class="built_in">linetree_add</span>(lid,l,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;=lt[rid].l)&#123;</span><br><span class="line"><span class="built_in">linetree_add</span>(rid,l,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">linetree_add</span>(lid,l,lt[lid].r,k);</span><br><span class="line"><span class="built_in">linetree_add</span>(rid,lt[rid].l,r,k);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushup</span>(id);</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">linetree_query</span><span class="params">(<span class="type">int</span> id,<span class="type">int</span> l,<span class="type">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(lt[id].l==l&amp;&amp;lt[id].r==r)&#123;</span><br><span class="line"><span class="keyword">return</span> lt[id].minv+lt[id].lazy;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">pushdown</span>(id);</span><br><span class="line"><span class="type">int</span> lid=id&lt;&lt;<span class="number">1</span>,rid=lid+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span>(r&lt;=lt[lid].r)<span class="keyword">return</span> <span class="built_in">linetree_query</span>(lid,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">if</span>(l&gt;=lt[rid].l)<span class="keyword">return</span> <span class="built_in">linetree_query</span>(rid,l,r);</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">return</span> <span class="built_in">min</span>(<span class="built_in">linetree_query</span>(lid,l,lt[lid].r),<span class="built_in">linetree_query</span>(rid,lt[rid].l,r));</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">cmp</span><span class="params">(line x,line y)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> x.l&lt;y.l;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="type">int</span> t=<span class="built_in">read</span>();</span><br><span class="line"><span class="keyword">while</span>(t)&#123;</span><br><span class="line">--t;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>())q.<span class="built_in">pop</span>();</span><br><span class="line"><span class="built_in">memset</span>(chafen,<span class="number">0</span>,<span class="built_in">sizeof</span>(chafen));</span><br><span class="line">n=<span class="built_in">read</span>();m=<span class="built_in">read</span>();</span><br><span class="line"><span class="type">int</span> lshcnt=<span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">lsh[++lshcnt]=li[i].l=<span class="built_in">read</span>();</span><br><span class="line">lsh[++lshcnt]=li[i].r=<span class="built_in">read</span>();</span><br><span class="line">&#125;</span><br><span class="line">lsh[++lshcnt]=<span class="number">1</span>;lsh[++lshcnt]=m;</span><br><span class="line"><span class="built_in">sort</span>(lsh+<span class="number">1</span>,lsh+lshcnt+<span class="number">1</span>);</span><br><span class="line"><span class="type">int</span> lshn=<span class="built_in">unique</span>(lsh+<span class="number">1</span>,lsh+lshcnt+<span class="number">1</span>)-(lsh+<span class="number">1</span>);</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;++i)&#123;</span><br><span class="line">li[i].l=<span class="built_in">lower_bound</span>(lsh+<span class="number">1</span>,lsh+lshn+<span class="number">1</span>,li[i].l)-lsh;</span><br><span class="line">li[i].r=<span class="built_in">lower_bound</span>(lsh+<span class="number">1</span>,lsh+lshn+<span class="number">1</span>,li[i].r)-lsh;</span><br><span class="line">chafen[li[i].l]+=<span class="number">1</span>;chafen[li[i].r+<span class="number">1</span>]-=<span class="number">1</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lshn;++i)&#123;</span><br><span class="line">a[i]=a[i<span class="number">-1</span>]+chafen[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">buildtree</span>(<span class="number">1</span>,<span class="number">1</span>,lshn);</span><br><span class="line"><span class="built_in">sort</span>(li+<span class="number">1</span>,li+<span class="number">1</span>+n,cmp);</span><br><span class="line"><span class="type">int</span> ans=<span class="number">0</span>,p=<span class="number">1</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=lshn;++i)&#123;</span><br><span class="line"><span class="keyword">while</span>(p&lt;=n&amp;&amp;li[p].l&lt;=i)&#123;</span><br><span class="line"><span class="built_in">linetree_add</span>(<span class="number">1</span>,li[p].l,li[p].r,<span class="number">1</span>);</span><br><span class="line">q.<span class="built_in">push</span>(li[p]);</span><br><span class="line">++p;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">while</span>(!q.<span class="built_in">empty</span>()&amp;&amp;q.<span class="built_in">top</span>().r&lt;i)&#123;</span><br><span class="line"><span class="built_in">linetree_add</span>(<span class="number">1</span>,q.<span class="built_in">top</span>().l,q.<span class="built_in">top</span>().r,<span class="number">-1</span>);</span><br><span class="line">q.<span class="built_in">pop</span>();</span><br><span class="line">&#125;</span><br><span class="line">ans=<span class="built_in">max</span>(ans,a[i]-<span class="built_in">linetree_query</span>(<span class="number">1</span>,<span class="number">1</span>,lshn));</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>,ans);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h1 id="2023-12-8"><a href="#2023-12-8" class="headerlink" title="2023-12-8"></a>2023-12-8</h1><blockquote><p>数学题</p><p>CF <a href="https://www.luogu.com.cn/problem/solution/CF1889B">CF1889B Doremy’s Connecting Plan - 洛谷 | 计算机科学教育新生态 (luogu.com.cn)</a></p></blockquote><p>只能说太强了， 根本想不出这个解法</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312091146935.webp" alt="image-20231209114600767"></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>elasticsearch学习</title>
      <link href="/2023/11/18/elasticsearch%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/11/18/elasticsearch%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="资料获取"><a href="#资料获取" class="headerlink" title="资料获取"></a>资料获取</h1><p><a href="https://pan.baidu.com/s/1zRmwSvSvoDkWh0-MynwERA&pwd=1234">https://pan.baidu.com/s/1zRmwSvSvoDkWh0-MynwERA&amp;pwd=1234</a></p><p>下载之后，点击实用篇 ，学习资料 ， 然后点击day5， 在点击资料</p><h1 id="基础认识"><a href="#基础认识" class="headerlink" title="基础认识"></a>基础认识</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182106095.png" alt="image-20231118210644022"></p><ul><li>什么叫做倒排索引</li></ul><blockquote><p>先分成根据关键词分成多个词条， 然后根据词条来搜索。</p></blockquote><h2 id="初始elasticsearch"><a href="#初始elasticsearch" class="headerlink" title="初始elasticsearch"></a>初始elasticsearch</h2><ol><li><p>文档</p><p>一个数据就是文档</p><blockquote><p>所有的文档数据都会被序列化转换为json格式，然后存储到elasticsearch中</p></blockquote></li><li><p>索引</p><p>相同类型文档的集合</p><p>比如会被分成 商品索引， 用户索引， 订单索引</p><ol><li>mapping： 索引中文档的字段约束信息， 类似于表的结构约束</li></ol></li></ol><h2 id="mysql-和-es的区别"><a href="#mysql-和-es的区别" class="headerlink" title="mysql 和 es的区别"></a>mysql 和 es的区别</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182116517.png" alt="image-20231118211632420"></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182121662.png" alt="image-20231118212138605"></p><h2 id="安装es"><a href="#安装es" class="headerlink" title="安装es"></a>安装es</h2><h3 id="单点部署"><a href="#单点部署" class="headerlink" title="单点部署"></a>单点部署</h3><h4 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elastinsearch:7.12.1</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name es \</span><br><span class="line">  -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">  -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">  <span class="comment"># 如果未来需要拓展东西， 需要把拓展放入到这里</span></span><br><span class="line">  -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network es-net \</span><br><span class="line">  <span class="comment"># 供给给用户访问</span></span><br><span class="line">  -p 9200:9200 \</span><br><span class="line">  <span class="comment"># 容器访问</span></span><br><span class="line">  -p 9300:9300 \</span><br><span class="line">elasticsearch:7.12.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>然后在浏览器里面打开ip地址加上9200 端口号 </p><p>就会获得类似于这样的json格式数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36a24428b8c9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docker-cluster&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;z2BSZzopTJ6l9An61d0TMw&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.12.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3186837139b9c6b6d23c3200870651f10d3343b7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-04-20T20:56:39.040728659Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><ul><li>需要注意的是， 要和你的es 在同一个网络环境， 在同一个网络， 可以通过容器名称来互联</li></ul><blockquote><p>通过这个可以可视化es ，便于学习</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和上面es的统一版本</span></span><br><span class="line">docker pull kibana:7.12.1 </span><br></pre></td></tr></table></figure><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d  \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">--network=es-net \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">kibana:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行判断是否启动成功</span></span><br><span class="line">docker logs -f kibana</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><ul><li><p>输入   <strong>ip地址 + 5601</strong></p></li><li><p>这样就算成功了</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182147172.png" alt="image-20231118214727119"></p><ul><li><strong>点击 右边那个</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182158869.png" alt="image-20231118215825785"></p><ul><li>点击 dev tool</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182200661.png" alt="image-20231118220022610"></p><ul><li><strong>点击搜索按钮之后</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182201350.png" alt="image-20231118220133311"></p><ul><li>输入</li></ul><p>​<code>GET / </code></p><ul><li>获得</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;36a24428b8c9&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;docker-cluster&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;z2BSZzopTJ6l9An61d0TMw&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7.12.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;3186837139b9c6b6d23c3200870651f10d3343b7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2021-04-20T20:56:39.040728659Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;8.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><ul><li>问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182203049.png" alt="image-20231118220343015"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你选择english&#x2F;standard 的时候，他会按照一个字符一个字符来分</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182206162.png" alt="image-20231118220615134"></p><ul><li>解决方法</li></ul><p>使用专门的中文分词器 - <strong>IK</strong></p><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it es /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线安装</span></span><br><span class="line"><span class="comment"># 没有魔法有点慢 ~~~</span></span><br><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像网站 不过好像有点问题</span></span><br><span class="line">./bin/elasticsearch-plugin install https://github.com.cnpmjs.org/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><ul><li><p>先<code>https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</code> 下载好安装包</p></li><li><p>查看数据卷的位置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure><ul><li>解压好之后上传</li><li>打开ftp将文件 丢到对应的位置</li></ul><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>打开刚刚的浏览器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分词粒度会更细</span></span><br><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这个时候分词的结果就是正常的</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182226816.png" alt="image-20231118222629788"></p><h1 id="操作"><a href="#操作" class="headerlink" title="操作"></a>操作</h1><h2 id="索引操作"><a href="#索引操作" class="headerlink" title="索引操作"></a>索引操作</h2><h3 id="mapping映射属性"><a href="#mapping映射属性" class="headerlink" title="mapping映射属性"></a>mapping映射属性</h3><ul><li><p>type： 字段数据类型，</p><ul><li><p>字符串： text（可分词的文本），keyword（精确值，不可以分词的文本）</p><p>如下图，邮箱就是keyword， 名字就是text</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191616303.png" alt="image-20231119161442541"></p></li><li><p>数值： long，integer， short，byte，double，float</p></li><li><p>布尔： boolean</p></li><li><p>日期：date</p></li></ul></li><li><p>index： 是否创建倒排索引， 默认是true</p></li><li><p>analyzer： 使用哪种分词器</p></li><li><p>properties： 该字段使用的子字段</p></li></ul><h3 id="索引库CRUD"><a href="#索引库CRUD" class="headerlink" title="索引库CRUD"></a>索引库CRUD</h3><h4 id="创建索引库名"><a href="#创建索引库名" class="headerlink" title="创建索引库名"></a>创建索引库名</h4><ul><li>dsl语法如下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191616694.png" alt="image-20231119161442541"></p><ul><li>创建索引库语法如下</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;object&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;lastName&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p> 然后生成了下面的结果</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191620087.png" alt="image-20231119162040060"></p><h4 id="删除和-查看索引"><a href="#删除和-查看索引" class="headerlink" title="删除和 查看索引"></a>删除和 查看索引</h4><ul><li>查看</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /heima</span><br></pre></td></tr></table></figure><ul><li>删除</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /heima</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191621658.png" alt="image-20231119162135605"></p><h4 id="修改索引库"><a href="#修改索引库" class="headerlink" title="修改索引库"></a>修改索引库</h4><blockquote><p>在es中禁止修改修改索引库</p></blockquote><ul><li><p>但是我们可以添加新的字段</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PUT /index_name/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;new_index&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191623261.png" alt="image-20231119162339220"></p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 添加实例</span></span><br><span class="line"></span><br><span class="line">PUT /heima/_mapping</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;age&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">GET /heima</span><br></pre></td></tr></table></figure><p>发现<strong>增添了 age</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191626849.png" alt="image-20231119162641822"></p><h2 id="文档操作"><a href="#文档操作" class="headerlink" title="文档操作"></a>文档操作</h2><h3 id="文档的CRUD"><a href="#文档的CRUD" class="headerlink" title="文档的CRUD"></a>文档的CRUD</h3><h4 id="添加文档"><a href="#添加文档" class="headerlink" title="添加文档"></a>添加文档</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191628230.png" alt="image-20231119162850163"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 插入文档</span></span><br><span class="line">POST /heima/_doc/<span class="number">1</span> </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;114514@tomcat.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;alan&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastname&quot;</span><span class="punctuation">:</span> <span class="string">&quot;yaeer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191631233.png" alt="image-20231119163109204"></p><h4 id="查询文档"><a href="#查询文档" class="headerlink" title="查询文档"></a>查询文档</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">GET /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>查出来的结果为</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;heima&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;found&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_source&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;黑马程序员java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;114514@tomcat.cn&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;firstname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;alan&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;yaeer&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="删除文档"><a href="#删除文档" class="headerlink" title="删除文档"></a>删除文档</h4><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">DELETE /heima/_doc/<span class="number">1</span></span><br></pre></td></tr></table></figure><ul><li>删除文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;_index&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;heima&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;_doc&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_id&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_version&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;result&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;deleted&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_shards&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;total&quot;</span> <span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;successful&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;failed&quot;</span> <span class="punctuation">:</span> <span class="number">0</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_seq_no&quot;</span> <span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;_primary_term&quot;</span> <span class="punctuation">:</span> <span class="number">1</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改文档"><a href="#修改文档" class="headerlink" title="修改文档"></a>修改文档</h4><h5 id="全量修改"><a href="#全量修改" class="headerlink" title="全量修改"></a>全量修改</h5><ul><li><p>几乎和索引相似， 他还会添加新文档， 删除旧的文档</p></li><li><p>如果没有的文档，他会直接创建</p></li><li><p>原本有什么字段， 就得写出来什么字段， 不能少写，不能多写</p></li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">PUT /heima/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;info&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员java讲师&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;11451@QQ.COM&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;firstName&quot;</span><span class="punctuation">:</span> <span class="string">&quot;云&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lastname&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;赵&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h5 id="增量修改"><a href="#增量修改" class="headerlink" title="增量修改"></a>增量修改</h5><ul><li>注意这里是POST ,而不是PUT</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">POST /heima/_update/<span class="number">1</span> </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;email&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ZYun@itcast.cn&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="RESTClient-操作索引库（java）"><a href="#RESTClient-操作索引库（java）" class="headerlink" title="RESTClient 操作索引库（java）"></a>RESTClient 操作索引库（java）</h1><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191643201.png" alt="image-20231119164351134"></p><ul><li>提示</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191704600.png" alt="image-20231119170404450"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191701095.png" alt="image-20231119170127052"></p><ul><li>表示地理位置就是</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>字段拷贝可以使用copy_to属性将当前字段拷贝到指定字段</li></ul><p>​在你需要添加的合并字段添加一个copy_to 为all</p><p>​（这样可以实现， 多个字段同时搜索）</p><p>先设置一个字段</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191706221.png" alt="image-20231119170639187"></p><p>然后， 在所有的字段都加上一个all </p><h3 id="初始化javaRestClient"><a href="#初始化javaRestClient" class="headerlink" title="初始化javaRestClient"></a>初始化javaRestClient</h3><h4 id="依赖引入"><a href="#依赖引入" class="headerlink" title="依赖引入"></a>依赖引入</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.elasticsearch.client&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;elasticsearch-rest-high-level-client&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;7.12.1&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><ul><li>我们还需要在properties中修改</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;properties&gt;</span><br><span class="line">    &lt;elasticsearch.version&gt;7.12.1&lt;/elasticsearch.version&gt;</span><br><span class="line">&lt;/properties&gt;</span><br></pre></td></tr></table></figure><h3 id="添加一个测试类"><a href="#添加一个测试类" class="headerlink" title="添加一个测试类"></a>添加一个测试类</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelIndexTest</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(client);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="meta">@BeforeEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">                HttpHost.create(<span class="string">&quot;http://118.25.143.28:9200&quot;</span>)</span><br><span class="line">        ));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@AfterEach</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">this</span>.client.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="创建索引"><a href="#创建索引" class="headerlink" title="创建索引"></a>创建索引</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311241955067.webp" alt="image-20231124195539796"></p><p><strong>复制json的时候， 首行， 不需要被复制</strong></p><p>如果代码跑起来报错， 可以查看你导入的包， 是不是正确的</p><p>应该是下面这个才对</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> org.elasticsearch.client.indices.CreateIndexRequest;</span><br></pre></td></tr></table></figure><ul><li>然后输入PUT &#x2F;hotel</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">&quot;hotel&quot;</span> : &#123;</span><br><span class="line">    <span class="string">&quot;aliases&quot;</span> : &#123; &#125;,</span><br><span class="line">    <span class="string">&quot;mappings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;properties&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;address&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">          <span class="string">&quot;index&quot;</span> : <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;all&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;brand&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;business&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;city&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;id&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;location&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;name&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;text&quot;</span>,</span><br><span class="line">          <span class="string">&quot;analyzer&quot;</span> : <span class="string">&quot;ik_max_word&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;pic&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span>,</span><br><span class="line">          <span class="string">&quot;index&quot;</span> : <span class="literal">false</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;price&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;score&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;integer&quot;</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;starName&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;type&quot;</span> : <span class="string">&quot;keyword&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">&quot;settings&quot;</span> : &#123;</span><br><span class="line">      <span class="string">&quot;index&quot;</span> : &#123;</span><br><span class="line">        <span class="string">&quot;routing&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;allocation&quot;</span> : &#123;</span><br><span class="line">            <span class="string">&quot;include&quot;</span> : &#123;</span><br><span class="line">              <span class="string">&quot;_tier_preference&quot;</span> : <span class="string">&quot;data_content&quot;</span></span><br><span class="line">            &#125;</span><br><span class="line">          &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="string">&quot;number_of_shards&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;provided_name&quot;</span> : <span class="string">&quot;hotel&quot;</span>,</span><br><span class="line">        <span class="string">&quot;creation_date&quot;</span> : <span class="string">&quot;1700828818690&quot;</span>,</span><br><span class="line">        <span class="string">&quot;number_of_replicas&quot;</span> : <span class="string">&quot;1&quot;</span>,</span><br><span class="line">        <span class="string">&quot;uuid&quot;</span> : <span class="string">&quot;hJ5Hsr9iQbCwOtq-OnPuew&quot;</span>,</span><br><span class="line">        <span class="string">&quot;version&quot;</span> : &#123;</span><br><span class="line">          <span class="string">&quot;created&quot;</span> : <span class="string">&quot;7120199&quot;</span></span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="删除索引库，-判断索引库是否存在"><a href="#删除索引库，-判断索引库是否存在" class="headerlink" title="删除索引库， 判断索引库是否存在"></a>删除索引库， 判断索引库是否存在</h3><ul><li>删除</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteHotelIndex</span> <span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// 1. 创建Request 对象</span></span><br><span class="line">    <span class="type">DeleteIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 3. 发送请求</span></span><br><span class="line"></span><br><span class="line">    client.indices().delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>存在</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testExistHotelIndex</span> <span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">GetIndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetIndexRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">    <span class="type">boolean</span> <span class="variable">exists</span> <span class="operator">=</span> client.indices().exists(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="comment">// 判断是否存在</span></span><br><span class="line">    System.out.println(exists ? <span class="string">&quot;存在&quot;</span>: <span class="string">&quot;不存在&quot;</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242034821.webp" alt="image-20231124203432611"></p><h1 id="RestCient操作文档（java）"><a href="#RestCient操作文档（java）" class="headerlink" title="RestCient操作文档（java）"></a>RestCient操作文档（java）</h1><h2 id="创建文档"><a href="#创建文档" class="headerlink" title="创建文档"></a>创建文档</h2><p>我们的内容</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242035209.webp" alt="image-20231124203530071"></p><ul><li>语法跟上面的很类似</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242037240.webp" alt="image-20231124203728051"></p><ul><li>索引要求id 都是String类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line"><span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testInit</span><span class="params">()</span> &#123;</span><br><span class="line">    System.out.println(client);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testAddDocument</span> <span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> hotelService.getById(<span class="number">61083L</span>);</span><br><span class="line">    <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line"></span><br><span class="line">    <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotel.getId().toString());</span><br><span class="line"></span><br><span class="line">    request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);</span><br><span class="line"></span><br><span class="line">    client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@BeforeEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">setUp</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.client = <span class="keyword">new</span> <span class="title class_">RestHighLevelClient</span>(RestClient.builder(</span><br><span class="line">            HttpHost.create(<span class="string">&quot;http://localhost:9200&quot;</span>)</span><br><span class="line">    ));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">@AfterEach</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">tearDown</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="built_in">this</span>.client.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242047070.webp" alt="image-20231124204736938"></p><h2 id="查询文档-1"><a href="#查询文档-1" class="headerlink" title="查询文档"></a>查询文档</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242050002.webp" alt="image-20231124205053814"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testGetDocumentById</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">    <span class="type">GetRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">GetRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;61083&quot;</span>);</span><br><span class="line">    <span class="type">GetResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.get(request, RequestOptions.DEFAULT);</span><br><span class="line">    <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> response.getSourceAsString();</span><br><span class="line">    <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">    System.out.println(hotelDoc);</span><br><span class="line"><span class="comment">// 如果你这里查询出来是null， 那么看看你的增添文档是不是正确的 request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="更新文档"><a href="#更新文档" class="headerlink" title="更新文档"></a>更新文档</h2><ul><li>全量更新</li></ul><p>同创建文档</p><ul><li>局部更新</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242121466.webp" alt="image-20231124212123274"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testUpdateDocument</span> <span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">UpdateRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">UpdateRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;61083&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 更新参数</span></span><br><span class="line">    request.doc(</span><br><span class="line">            <span class="string">&quot;price&quot;</span>, <span class="string">&quot;952&quot;</span>,</span><br><span class="line">            <span class="string">&quot;starName&quot;</span>, <span class="string">&quot;四钻&quot;</span></span><br><span class="line">    );</span><br><span class="line">    client.update(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="删除文档-1"><a href="#删除文档-1" class="headerlink" title="删除文档"></a>删除文档</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line"><span class="keyword">void</span> <span class="title function_">testDeleteDocument</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, <span class="string">&quot;61083&quot;</span>);</span><br><span class="line">    client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242126884.webp" alt="image-20231124212653747"></p><h2 id="批量导入索引库"><a href="#批量导入索引库" class="headerlink" title="批量导入索引库"></a>批量导入索引库</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242128028.webp" alt="image-20231124212831827"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">  <span class="keyword">void</span> <span class="title function_">testBulkRequest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"></span><br><span class="line">      List&lt;Hotel&gt; hotels = hotelService.list();</span><br><span class="line">      <span class="type">BulkRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BulkRequest</span>();</span><br><span class="line"></span><br><span class="line">      <span class="keyword">for</span>(Hotel hotel: hotels)&#123;</span><br><span class="line">          <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line">          request.add(<span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).</span><br><span class="line">                  id(hotelDoc.getId().toString()).</span><br><span class="line">                  source(JSON.toJSONString(hotelDoc),XContentType.JSON));</span><br><span class="line">      &#125;</span><br><span class="line">      client.bulk(request, RequestOptions.DEFAULT);</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><blockquote><p>批量查询的 dsl 语法</p><p>GET &#x2F;index名&#x2F;_search</p></blockquote><h1 id="分布式搜索索引"><a href="#分布式搜索索引" class="headerlink" title="分布式搜索索引"></a>分布式搜索索引</h1><h2 id="DSL查询语法（简单查询）"><a href="#DSL查询语法（简单查询）" class="headerlink" title="DSL查询语法（简单查询）"></a>DSL查询语法（简单查询）</h2><ul><li><p>查询所有, match_all</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252043795.webp" alt="image-20231125204303599"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            </span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li></ul><p>​</p><ul><li>全文检索查询： 利用分词器对用户输入内容分词， 然后去倒排索引库里面去匹配<ul><li>match_query</li><li>multi_match_query</li></ul></li><li>精确查询：根据精确词条查询数据，一般是查找keyword、数值、日期、boolean等类型字段<ul><li>ids</li><li>range</li><li>term</li></ul></li><li>地理查询： 根据经纬度进行查询<ul><li>geo_distance</li><li>geo_bounding_box</li></ul></li><li>复合查询：复合查询可以将上诉各种查询条件组合起来，合并查询<ul><li>bool</li><li>function_score</li></ul></li></ul><h3 id="match查询"><a href="#match查询" class="headerlink" title="match查询"></a>match查询</h3><ul><li>match查询（我们推荐这种查询方式）</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外滩如家&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>multi_match查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;multi_match&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外滩如家&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;brand&quot;</span><span class="punctuation">,</span> <span class="string">&quot;name&quot;</span><span class="punctuation">,</span> <span class="string">&quot;business&quot;</span><span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="精确查询"><a href="#精确查询" class="headerlink" title="精确查询"></a>精确查询</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252055084.webp" alt="image-20231125205555895"></p><ul><li>term 查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;value&quot;</span><span class="punctuation">:</span><span class="string">&quot;上海&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>range查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//gte 代表大于等于 lte 代表小于等于</span></span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;gte&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">300</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="地理查询"><a href="#地理查询" class="headerlink" title="地理查询"></a>地理查询</h3><ul><li>geo_bounding_box</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252102474.webp" alt="image-20231125210223206"></p><ul><li>geo_distance 查询到指定中心点小于某个距离值的文档</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252103612.webp" alt="image-20231125210304329"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;geo_distance&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;15km&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="string">&quot;31.21, 121.5&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="复合查询"><a href="#复合查询" class="headerlink" title="复合查询"></a>复合查询</h2><ul><li>function score: 相关性算分</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252109245.webp" alt="image-20231125210943038"></p><ul><li>但是上面这种算法现在被废弃了， 我们使用了BM25算法</li></ul><p>​它的优越性</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252110315.webp" alt="image-20231125211034157"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252110022.webp" alt="image-20231125211045889"></p><h3 id="Function-Scrore-query"><a href="#Function-Scrore-query" class="headerlink" title="Function Scrore query"></a>Function Scrore query</h3><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;function_score&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外滩&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span>   </span><br><span class="line">            <span class="attr">&quot;functions&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;1&quot;</span><span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;weight&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line"><span class="attr">&quot;boost_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;multiply&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252114800.webp" alt="image-20231125211440572"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">Get /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;function_score&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;all&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;外滩&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;function&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;term&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">                    <span class="attr">&quot;weight&quot;</span> <span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;boost_mode&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sum&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252121513.webp" alt="image-20231125212130385"></p><h3 id="boolean-Query-复合查询"><a href="#boolean-Query-复合查询" class="headerlink" title="boolean Query(复合查询)"></a>boolean Query(复合查询)</h3><ul><li>需要注意must 放入的条件会参与算法， 但是 filter不会</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252148341.webp" alt="image-20231125214805197"></p><p>must 参与打分， filter不参与打分</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;bool&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;must&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;must_not&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;gt&quot;</span><span class="punctuation">:</span> <span class="number">400</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">                <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;geo_distance&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;distance&quot;</span><span class="punctuation">:</span> <span class="string">&quot;10km&quot;</span><span class="punctuation">,</span></span><br><span class="line">                        <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                            <span class="attr">&quot;lat&quot;</span><span class="punctuation">:</span> <span class="number">31.21</span><span class="punctuation">,</span></span><br><span class="line">                            <span class="attr">&quot;lon&quot;</span><span class="punctuation">:</span> <span class="number">121.5</span></span><br><span class="line">                        <span class="punctuation">&#125;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">]</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252150386.webp" alt="image-20231125215037272"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">GET /indexName/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;FIELD&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li><p>案例1</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252152467.webp" alt="image-20231125215224170"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li><li><p>地理字段的排序</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252158768.webp" alt="image-20231125215806627"></p><h2 id="分页"><a href="#分页" class="headerlink" title="分页"></a>分页</h2><blockquote><p>elastci 默认的分页参数是10个， 所以你每次查询都只能查到前10个</p></blockquote><ul><li>我们利用from， 和 size 来控制分页</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281121197.webp" alt="image-20231128112149958"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;sort&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">        <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;from&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 如果你要查看第二页的数据， 就把 from 改成 10， </span></span><br><span class="line"><span class="comment">// 公式是 from : (page - 1) * size</span></span><br></pre></td></tr></table></figure><ul><li>如果要查询990 ~ 1000 的时候， 查询的过程就是（这是因为他数据结构的特殊决定的）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281125056.webp" alt="image-20231128112557927"></p><p>但是如果是集群的时候，这就会有大麻烦。 因为每一个分片都必须返回前1000个数据，然后把这些数据何在一起， 然后排序。</p><ul><li>杂谈</li></ul><p>并且单次查询的个数，<strong>不能超过10000条。</strong></p><p>这是他的解决方法</p><p>但是search after不支持随机查询。</p><p>scroll 对内存的消耗过大</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281130405.webp" alt="image-20231128113006242"></p><h2 id="高亮"><a href="#高亮" class="headerlink" title="高亮"></a>高亮</h2><blockquote><p>就是把所有的搜索结果的关键字突出显示出来</p></blockquote><p>就是通过添加标签</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281133090.webp" alt="image-20231128113315979"></p><p>那么这个标签是谁家的呢？</p><ul><li>语法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281134287.webp" alt="image-20231128113448139"></p><ul><li>注意点： 高亮查询， 搜索字段， 和高亮字段必须一致(但是可以添加配置项)</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span> <span class="string">&quot;如家&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;highlight&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;fields&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;require_field_match&quot;</span><span class="punctuation">:</span> <span class="string">&quot;false&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h1 id="RestClient-操作搜索（java）"><a href="#RestClient-操作搜索（java）" class="headerlink" title="RestClient 操作搜索（java）"></a>RestClient 操作搜索（java）</h1><h2 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h2><h3 id="match-all"><a href="#match-all" class="headerlink" title="match_all"></a>match_all</h3><ul><li>快速入门</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281142514.webp" alt="image-20231128114202283"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatchAll</span> <span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line">        request.source().query(QueryBuilders.matchAllQuery());</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        System.out.println(search);</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total +<span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="keyword">for</span>(SearchHit hit: hits)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + json);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>解析response</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281148226.webp" alt="image-20231128114848949"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281154895.webp" alt="image-20231128115459738"> </p><h3 id="match-multi-match"><a href="#match-multi-match" class="headerlink" title="match &amp; multi_match"></a>match &amp; multi_match</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281157594.webp" alt="image-20231128115736341"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">  <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testMatch</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line"></span><br><span class="line">        request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        System.out.println(search);</span></span><br><span class="line">        <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">        <span class="type">Long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">        System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total +<span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">        SearchHit[] hits = searchHits.getHits();</span><br><span class="line">        <span class="keyword">for</span>(SearchHit hit: hits)&#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">            JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">            System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + json);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li><p>小技巧， 抽取重复代码， 复制对应，代码段， 然后输入 </p><p>ctrl + alt + m</p></li></ul><h3 id="term-range"><a href="#term-range" class="headerlink" title="term &amp; range"></a>term &amp; range</h3><ul><li>这里就不演示了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281202616.webp" alt="image-20231128120224406"></p><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><ul><li>同上</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281203098.webp" alt="image-20231128120334889"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testBoolean</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">        <span class="comment">// 添加term 查询</span></span><br><span class="line">        boolQuery.must(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, <span class="string">&quot;上海&quot;</span>));</span><br><span class="line">        <span class="comment">// 添加range查询</span></span><br><span class="line">        boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).lte(<span class="number">250</span>));</span><br><span class="line">        <span class="comment">//  这句话别忘了</span></span><br><span class="line">        request.source().query(boolQuery);</span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        System.out.println(search);</span></span><br><span class="line">        handleResponse(response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h2 id="排序-分页"><a href="#排序-分页" class="headerlink" title="排序 &amp; 分页"></a>排序 &amp; 分页</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281215341.webp" alt="image-20231128121513101"></p><h2 id="高亮-1"><a href="#高亮-1" class="headerlink" title="高亮"></a>高亮</h2><ul><li>dsl 构建</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281219711.webp" alt="image-20231128121918477"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">void</span> <span class="title function_">testHighlight</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加range查询</span></span><br><span class="line"><span class="comment">//        boolQuery.filter(QueryBuilders.rangeQuery(&quot;price&quot;).lte(250));</span></span><br><span class="line">        request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source().highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>().field(<span class="string">&quot;name&quot;</span>).requireFieldMatch(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        request.source();</span><br><span class="line">        <span class="comment">// page</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        System.out.println(search);</span></span><br><span class="line">        handleResponse(response);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>结果解析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311281223956.webp" alt="image-20231128122326678"></p><h1 id="黑马旅游（案例）"><a href="#黑马旅游（案例）" class="headerlink" title="黑马旅游（案例）"></a>黑马旅游（案例）</h1><blockquote><p>localhost:8089打开页面</p></blockquote><h2 id="day1-代码"><a href="#day1-代码" class="headerlink" title="day1 代码"></a>day1 代码</h2><h3 id="pojo"><a href="#pojo" class="headerlink" title="pojo"></a>pojo</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Data</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RequestParams</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String key;</span><br><span class="line">    <span class="keyword">private</span> Integer page;</span><br><span class="line">    <span class="keyword">private</span> Integer size;</span><br><span class="line">    <span class="keyword">private</span> String sortBy;</span><br><span class="line">    <span class="keyword">private</span> String city;</span><br><span class="line">    <span class="keyword">private</span> String brand;</span><br><span class="line">    <span class="keyword">private</span> String starName;</span><br><span class="line">    <span class="keyword">private</span> String minPrice;</span><br><span class="line">    <span class="keyword">private</span> String maxPrice;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="service"><a href="#service" class="headerlink" title="service"></a>service</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">   <span class="keyword">private</span> RestHighLevelClient client;</span><br><span class="line">   <span class="meta">@Override</span></span><br><span class="line">   <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(RequestParams params)</span> &#123;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">try</span> &#123;</span><br><span class="line">           <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">           <span class="type">String</span> <span class="variable">key</span> <span class="operator">=</span> params.getKey();</span><br><span class="line">           <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> buildBasicQuery(params, key);</span><br><span class="line">           request.source().query(boolQuery);</span><br><span class="line"></span><br><span class="line">           <span class="type">int</span> <span class="variable">page</span> <span class="operator">=</span> params.getPage();</span><br><span class="line">           <span class="type">int</span> <span class="variable">size</span> <span class="operator">=</span> params.getSize();</span><br><span class="line">           request.source().from((page - <span class="number">1</span>) * size).size(size);</span><br><span class="line">           <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"></span><br><span class="line">           <span class="keyword">return</span> handleResponse(response);</span><br><span class="line">       &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">           <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> <span class="keyword">static</span> BoolQueryBuilder <span class="title function_">buildBasicQuery</span><span class="params">(RequestParams params, String key)</span> &#123;</span><br><span class="line">       <span class="type">BoolQueryBuilder</span> <span class="variable">boolQuery</span> <span class="operator">=</span> QueryBuilders.boolQuery();</span><br><span class="line">       <span class="comment">// 关键字搜索</span></span><br><span class="line">       <span class="keyword">if</span>(key == <span class="literal">null</span> || <span class="string">&quot;&quot;</span>.equals(key))&#123;</span><br><span class="line">           boolQuery.must(QueryBuilders.matchAllQuery());</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">else</span>&#123;</span><br><span class="line">           boolQuery.must(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, key));</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="comment">// 城市</span></span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(params.getCity() != <span class="literal">null</span> &amp;&amp; !params.getCity().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">           boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;city&quot;</span>, params.getCity()));</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span>(params.getBrand() != <span class="literal">null</span> &amp;&amp; !params.getBrand().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">           boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;brand&quot;</span>, params.getBrand()));</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(params.getStarName() != <span class="literal">null</span> &amp;&amp; !params.getStarName().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">           boolQuery.filter(QueryBuilders.termQuery(<span class="string">&quot;starName&quot;</span>, params.getStarName()));</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(params.getMinPrice() != <span class="literal">null</span> &amp;&amp; !params.getMinPrice().equals(<span class="string">&quot;&quot;</span>))&#123;</span><br><span class="line">           boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gte(params.getMinPrice()).lte(params.getMaxPrice()));</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">if</span>(params.getMaxPrice() != <span class="literal">null</span> &amp;&amp; params.getMinPrice() != <span class="literal">null</span>)&#123;</span><br><span class="line">           boolQuery.filter(QueryBuilders.rangeQuery(<span class="string">&quot;price&quot;</span>).gte(params.getMinPrice()).lte(params.getMaxPrice()));</span><br><span class="line"></span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> boolQuery;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line">   <span class="keyword">private</span> PageResult <span class="title function_">handleResponse</span><span class="params">(SearchResponse response)</span> &#123;</span><br><span class="line">       <span class="type">SearchHits</span> <span class="variable">searchHits</span> <span class="operator">=</span> response.getHits();</span><br><span class="line">       <span class="type">Long</span> <span class="variable">total</span> <span class="operator">=</span> searchHits.getTotalHits().value;</span><br><span class="line">       System.out.println(<span class="string">&quot;共搜索到&quot;</span> + total +<span class="string">&quot;条数据&quot;</span>);</span><br><span class="line">       SearchHit[] hits = searchHits.getHits();</span><br><span class="line">       List&lt;HotelDoc&gt; hotels =  <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">       <span class="keyword">for</span>(SearchHit hit: hits)&#123;</span><br><span class="line">           <span class="type">String</span> <span class="variable">json</span> <span class="operator">=</span> hit.getSourceAsString();</span><br><span class="line">           <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> JSON.parseObject(json, HotelDoc.class);</span><br><span class="line">           hotels.add(hotelDoc);</span><br><span class="line">           System.out.println(<span class="string">&quot;hotelDoc = &quot;</span> + hotelDoc );</span><br><span class="line">       &#125;</span><br><span class="line">       <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">PageResult</span>(total, hotels);</span><br><span class="line">   &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="controller"><a href="#controller" class="headerlink" title="controller"></a>controller</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="meta">@RequestMapping(&quot;/hotel&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HotelController</span> &#123;</span><br><span class="line">    <span class="meta">@Autowired</span></span><br><span class="line">    <span class="keyword">private</span> IHotelService hotelService;</span><br><span class="line">    <span class="meta">@PostMapping(&quot;/list&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> PageResult <span class="title function_">search</span><span class="params">(<span class="meta">@RequestBody</span> RequestParams params)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> hotelService.search(params);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="day2-代码"><a href="#day2-代码" class="headerlink" title="day2 代码"></a>day2 代码</h2><ul><li>计算距离</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311292038126.webp" alt="image-20231129203807788"></p><ul><li>需要在实体类加上 distance</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311292106578.webp" alt="image-20231129210628245"></p><ul><li>给我们想要的字段添加 一些字段</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">POST /hotel/_update/<span class="number">1902197537</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /hotel/_update/<span class="number">2056126831</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /hotel/_update/<span class="number">1989806195</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /hotel/_update/<span class="number">2056105938</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /hotel/_update/<span class="number">541619</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;doc&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;isAD&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(location != <span class="literal">null</span> &amp;&amp; location.equals(<span class="string">&quot;&quot;</span>) == <span class="literal">false</span>)&#123;</span><br><span class="line">    request.source().sort(SortBuilders</span><br><span class="line">            .geoDistanceSort(<span class="string">&quot;location&quot;</span>, <span class="keyword">new</span> <span class="title class_">GeoPoint</span>(location))</span><br><span class="line">            .order(SortOrder.ASC)</span><br><span class="line">            .unit(DistanceUnit.KILOMETERS));</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>添加 funcition score 查询</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311292107445.webp" alt="image-20231129210745124"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FunctionScoreQueryBuilder</span> <span class="variable">functionScoreQueryBuilder</span> <span class="operator">=</span> QueryBuilders.functionScoreQuery(boolQuery,</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">FunctionScoreQueryBuilder</span>.FilterFunctionBuilder(</span><br><span class="line">                        QueryBuilders.termQuery(<span class="string">&quot;isAD&quot;</span>, <span class="literal">true</span>),</span><br><span class="line">                        ScoreFunctionBuilders.weightFactorFunction(<span class="number">10</span>)</span><br><span class="line">                )</span><br><span class="line">        &#125;);</span><br></pre></td></tr></table></figure><h1 id="分布式索引"><a href="#分布式索引" class="headerlink" title="分布式索引"></a>分布式索引</h1><h2 id="聚合"><a href="#聚合" class="headerlink" title="聚合"></a>聚合</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311292122757.webp" alt="image-20231129212202540"></p><h3 id="Bucket-聚合"><a href="#Bucket-聚合" class="headerlink" title="Bucket 聚合"></a>Bucket 聚合</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311292138166.webp" alt="image-20231129213819917"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311292146941.webp" alt="image-20231129214609728"></p><ul><li>默认情况下 ， 为所有文档进行聚合</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"><span class="comment">// 自定义排序guize</span></span><br><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>限定聚合</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;range&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;lte&quot;</span><span class="punctuation">:</span> <span class="number">200</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;_count&quot;</span><span class="punctuation">:</span> <span class="string">&quot;asc&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="Metrics-聚合"><a href="#Metrics-聚合" class="headerlink" title="Metrics 聚合"></a>Metrics 聚合</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311292152515.webp" alt="image-20231129215243247"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">0</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;brandAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;terms&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;brand&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;order&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                    <span class="attr">&quot;scoreAgg.avg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;desc&quot;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;aggs&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;scoreAgg&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"><span class="attr">&quot;stats&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                        <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;score&quot;</span></span><br><span class="line">                    <span class="punctuation">&#125;</span></span><br><span class="line">                <span class="punctuation">&#125;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="RestApi-聚合"><a href="#RestApi-聚合" class="headerlink" title="RestApi 聚合"></a>RestApi 聚合</h2><ul><li>数据聚合</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311292157061.webp" alt="image-20231129215714793"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">        <span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">        <span class="comment">// 添加range查询</span></span><br><span class="line"><span class="comment">//        boolQuery.filter(QueryBuilders.rangeQuery(&quot;price&quot;).lte(250));</span></span><br><span class="line">        request.source().query(QueryBuilders.matchQuery(<span class="string">&quot;all&quot;</span>, <span class="string">&quot;如家&quot;</span>));</span><br><span class="line"></span><br><span class="line">        request.source().highlighter(<span class="keyword">new</span> <span class="title class_">HighlightBuilder</span>().field(<span class="string">&quot;name&quot;</span>).requireFieldMatch(<span class="literal">false</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 分页</span></span><br><span class="line">        request.source();</span><br><span class="line">        <span class="comment">// page</span></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        System.out.println(search);</span></span><br><span class="line">        handleResponse(response);</span><br></pre></td></tr></table></figure><ul><li>数据解析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311292200259.webp" alt="image-20231129220034935"></p><h2 id="自动补全"><a href="#自动补全" class="headerlink" title="自动补全"></a>自动补全</h2><h3 id=""><a href="#" class="headerlink" title=""></a></h3><p>输入一个sj 就会自动跳出来下面这个</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311301118622.webp" alt="image-20231130111837390"></p><h3 id="拼音分词器"><a href="#拼音分词器" class="headerlink" title="拼音分词器"></a>拼音分词器</h3><p>上传py 文件到<code> /var/lib/docker/volumes/es-plugins/_data</code></p><p>然后 docker restart es</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;如家酒店还不错&quot;</span><span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="改造拼音分词器"><a href="#改造拼音分词器" class="headerlink" title="改造拼音分词器"></a>改造拼音分词器</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311301129704.webp" alt="image-20231130112923405"></p><ul><li>操作流程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311301131713.webp" alt="image-20231130113156357"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_analyzer&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">POST /test/_doc/<span class="number">1</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">1</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;狮子&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST /test/_doc/<span class="number">2</span></span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;虱子&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line">GET /test/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;match&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;掉入狮子笼咋办&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>但是还是会出现这个问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311301138132.webp" alt="image-20231130113817732"></p><ul><li>我们修改为下面这种文档</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">PUT /test</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">        <span class="attr">&quot;my_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> </span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">              <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;my_analyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">              <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">          <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>创建分词器的时候， 使用 拼音分词器， 搜索的时候不要使用</p><h3 id="completion-suggester查询"><a href="#completion-suggester查询" class="headerlink" title="completion suggester查询"></a>completion suggester查询</h3><ul><li>创建自动补全索引库</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">PUT test2 </span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="string">&quot;mappings&quot;</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>数据插入</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">POST test2/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;SKii&quot;</span><span class="punctuation">,</span> <span class="string">&quot;ddsfa&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line">POST test2/_doc</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;title&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span><span class="string">&quot;Sony&quot;</span><span class="punctuation">,</span> <span class="string">&quot;dadsfa&quot;</span><span class="punctuation">]</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>自动补全查询</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /test2/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;titleSuggest&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;s&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;completion&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;title&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;skip_duplicates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h3 id="酒店数据自动补全"><a href="#酒店数据自动补全" class="headerlink" title="酒店数据自动补全"></a>酒店数据自动补全</h3><ul><li>修改创建索引的配置</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br></pre></td><td class="code"><pre><span class="line">PUT /hotel</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;settings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analysis&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;text_anlyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;completion_analyzer&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;tokenizer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="string">&quot;py&quot;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;filter&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;py&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;pinyin&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_joined_full_pinyin&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;keep_original&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;limit_first_letter_length&quot;</span><span class="punctuation">:</span> <span class="number">16</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;remove_duplicated_term&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;none_chinese_pinyin_tokenize&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;mappings&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;properties&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text_anlyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;address&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;price&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;score&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;integer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;brand&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;city&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;starName&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;business&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;copy_to&quot;</span><span class="punctuation">:</span> <span class="string">&quot;all&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;location&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;geo_point&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;pic&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;keyword&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;index&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;all&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;text_anlyzer&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;search_analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;suggestion&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">          <span class="attr">&quot;type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion&quot;</span><span class="punctuation">,</span></span><br><span class="line">          <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;completion_analyzer&quot;</span></span><br><span class="line">      <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><ul><li>添加一个 Suggestion 类型</li><li>构造器中添加</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="built_in">this</span>.business.contains(<span class="string">&quot;/&quot;</span>))&#123;</span><br><span class="line">    String[] arr = <span class="built_in">this</span>.business.split(<span class="string">&quot;/&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.suggestion = <span class="keyword">new</span> <span class="title class_">ArrayList</span>&lt;&gt;();</span><br><span class="line">    <span class="built_in">this</span>.suggestion.add(<span class="built_in">this</span>.brand);</span><br><span class="line">    Collections.addAll(<span class="built_in">this</span>.suggestion, arr);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line"><span class="built_in">this</span>.suggestion = Arrays.asList(<span class="built_in">this</span>.brand, <span class="built_in">this</span>.business);</span><br></pre></td></tr></table></figure><ul><li>下面两个都是获取索引信息</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;query&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;match_all&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span><span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">GET /hotel/_search</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;suggest&quot;</span><span class="punctuation">:</span><span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;suggestions&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">            <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;h&quot;</span><span class="punctuation">,</span></span><br><span class="line">            <span class="attr">&quot;completion&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">                <span class="attr">&quot;field&quot;</span><span class="punctuation">:</span> <span class="string">&quot;suggestion&quot;</span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;skip_duplicates&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">true</span></span><span class="punctuation">,</span></span><br><span class="line">                <span class="attr">&quot;size&quot;</span><span class="punctuation">:</span> <span class="number">10</span></span><br><span class="line">            <span class="punctuation">&#125;</span></span><br><span class="line">        <span class="punctuation">&#125;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>‘</p><h3 id="RestApi-自动补全"><a href="#RestApi-自动补全" class="headerlink" title="RestApi 自动补全"></a>RestApi 自动补全</h3><ul><li>获取结果</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302022287.webp" alt="image-20231130202159878"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">SearchRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SearchRequest</span>(<span class="string">&quot;hotel&quot;</span>);</span><br><span class="line">request.source().suggest(<span class="keyword">new</span> <span class="title class_">SuggestBuilder</span>().addSuggestion(</span><br><span class="line">        <span class="string">&quot;suggestions&quot;</span>,</span><br><span class="line">        SuggestBuilders.completionSuggestion(<span class="string">&quot;suggestion&quot;</span>)</span><br><span class="line">        .prefix(<span class="string">&quot;h&quot;</span>)</span><br><span class="line">        .skipDuplicates(<span class="literal">true</span>)</span><br><span class="line">        .size(<span class="number">10</span>)</span><br><span class="line">));</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>结果解析</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302027287.webp" alt="image-20231130202749956"></p><blockquote><p>getsuggstion 返回的结果类型等价于 CompletionSuggestion</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">        <span class="type">SearchResponse</span> <span class="variable">response</span> <span class="operator">=</span> client.search(request, RequestOptions.DEFAULT);</span><br><span class="line"><span class="comment">//        System.out.println(response);</span></span><br><span class="line">        <span class="type">Suggest</span> <span class="variable">suggest</span> <span class="operator">=</span> response.getSuggest();</span><br><span class="line">        <span class="type">CompletionSuggestion</span> <span class="variable">suggestions</span> <span class="operator">=</span> suggest.getSuggestion(<span class="string">&quot;suggestions&quot;</span>);</span><br><span class="line">        List&lt;CompletionSuggestion.Entry.Option&gt; options = suggestions.getOptions();</span><br><span class="line">        <span class="keyword">for</span> (CompletionSuggestion.Entry.Option option : options) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">text</span> <span class="operator">=</span> option.getText().toString();</span><br><span class="line">            System.out.println(text);</span><br><span class="line">        &#125;</span><br></pre></td></tr></table></figure><h2 id="数据同步"><a href="#数据同步" class="headerlink" title="数据同步"></a>数据同步</h2><ul><li>这里需要有微服务的基础</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011139037.webp" alt="image-20231201113952753"></p><p>方案一： <strong>同步调用</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011141133.webp" alt="image-20231201114123893"></p><p>方案二： <strong>异步通知</strong></p><p>使用 mq 这个消息队列</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011142314.webp" alt="image-20231201114258048"></p><p>方案三： <strong>监听binlog</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011143727.webp" alt="image-20231201114348501"></p><h3 id="使用MQ实现"><a href="#使用MQ实现" class="headerlink" title="使用MQ实现"></a>使用MQ实现</h3><p>当酒店发送了增删改的时候， es 也需要增加对应的操作。</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20231201120319829.png" alt="image-20231201120319829"></p><p>在消费者端引入依赖</p><ul><li>引入依赖</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-amqp<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>添加配置文件</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rabbitmq<span class="punctuation">:</span></span><br><span class="line">  host<span class="punctuation">:</span> <span class="number">192.168</span><span class="number">.150</span><span class="number">.101</span></span><br><span class="line">  port<span class="punctuation">:</span> <span class="number">5672</span></span><br><span class="line">  username<span class="punctuation">:</span> root</span><br><span class="line">  password<span class="punctuation">:</span> wjh114514</span><br><span class="line">  virtual-host<span class="punctuation">:</span> /</span><br></pre></td></tr></table></figure><ul><li>配置文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> cn.itcast.hotel.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> cn.itcast.hotel.constants.MqConstants;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Binding;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.BindingBuilder;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.Queue;</span><br><span class="line"><span class="keyword">import</span> org.springframework.amqp.core.TopicExchange;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> 吴嘉豪</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@date</span> 2023/12/1 15:09</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Mqconfig</span> &#123;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> TopicExchange <span class="title function_">topicExchange</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TopicExchange</span>(MqConstants.HOTEL_EXCHANGE, <span class="literal">true</span>,<span class="literal">false</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">insertQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MqConstants.HOTEL_INSERT_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Queue <span class="title function_">deleteQueue</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Queue</span>(MqConstants.HOTEL_DELETE_QUEUE, <span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">insertQueueBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(insertQueue()).to(topicExchange()).with(MqConstants.HOTEL_INSERT_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> Binding <span class="title function_">deleteQueueBinding</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> BindingBuilder.bind(deleteQueue()).to(topicExchange()).with(MqConstants.HOTEL_DELETE_KEY);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在控制类中分别加上着三段代码， 用户发送数据</li></ul><h4 id="发送消息"><a href="#发送消息" class="headerlink" title="发送消息"></a>发送消息</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">rabbitTemplate.convertAndSend(MqConstants.HOTEL_EXCHANGE, MqConstants.HOTEL_INSERT_KEY, hotel.getId());</span><br><span class="line">        </span><br><span class="line">rabbitTemplate.convertAndSend(MqConstants.HOTEL_EXCHANGE, MqConstants.HOTEL_INSERT_KEY, hotel.getId());</span><br><span class="line"></span><br><span class="line">rabbitTemplate.convertAndSend(MqConstants.HOTEL_EXCHANGE, MqConstants.HOTEL_DELETE_KEY, id);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="监听消息"><a href="#监听消息" class="headerlink" title="监听消息"></a>监听消息</h4><p>插入</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line"> <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">insertById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">     <span class="keyword">try</span> &#123;</span><br><span class="line">         <span class="type">Hotel</span> <span class="variable">hotel</span> <span class="operator">=</span> getById(id);</span><br><span class="line">         <span class="type">HotelDoc</span> <span class="variable">hotelDoc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HotelDoc</span>(hotel);</span><br><span class="line"></span><br><span class="line">         <span class="type">IndexRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">IndexRequest</span>(<span class="string">&quot;hotel&quot;</span>).id(hotel.getId().toString());</span><br><span class="line"></span><br><span class="line">         request.source(JSON.toJSONString(hotelDoc), XContentType.JSON);</span><br><span class="line">         client.index(request, RequestOptions.DEFAULT);</span><br><span class="line">     &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">         <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">     &#125;</span><br><span class="line"> &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>删除</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Override</span></span><br><span class="line">  <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteById</span><span class="params">(Long id)</span> &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">          <span class="type">DeleteRequest</span> <span class="variable">request</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DeleteRequest</span>(<span class="string">&quot;hotel&quot;</span>, id.toString());</span><br><span class="line"></span><br><span class="line">          client.delete(request, RequestOptions.DEFAULT);</span><br><span class="line">      &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">          <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><ul><li>然后打开 生成端， 然后再打开消费端</li></ul><p>测试修改 和 删除是否可以成功</p><h1 id="ES-集群"><a href="#ES-集群" class="headerlink" title="ES 集群"></a>ES 集群</h1><h2 id="ES-集群搭建"><a href="#ES-集群搭建" class="headerlink" title="ES 集群搭建"></a>ES 集群搭建</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011604106.webp" alt="image-20231201160449753"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis实战篇</title>
      <link href="/2023/11/18/redis%E5%AE%9E%E6%88%98%E7%AF%87/"/>
      <url>/2023/11/18/redis%E5%AE%9E%E6%88%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id="用户发送短信"><a href="#用户发送短信" class="headerlink" title="用户发送短信"></a>用户发送短信</h1><p><strong>。。。略</strong></p><h1 id="商户查询缓存"><a href="#商户查询缓存" class="headerlink" title="商户查询缓存"></a>商户查询缓存</h1><h2 id="缓存更新策略"><a href="#缓存更新策略" class="headerlink" title="缓存更新策略"></a>缓存更新策略</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311181830029.png" alt="image-20231118183020965"></p><p>一般来说， 我们选择 方案1就好了</p><ul><li><p>选择删除缓存 （懒标记）</p></li><li><p>如何保存缓存与数据库的操作</p><ul><li>单体</li><li>分布式， 使用TCC等分布式事务方案</li></ul></li><li><p>先删除缓存 ，在操作数据库 或者放过来 </p><p>两个任务在并发操作的时候， 都会有可能</p><p>但是后面那种方法，出现出现线程安全的概率较低</p></li></ul><h2 id="实战开始"><a href="#实战开始" class="headerlink" title="实战开始"></a>实战开始</h2><h2 id="缓存穿透"><a href="#缓存穿透" class="headerlink" title="缓存穿透"></a>缓存穿透</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191844536.png" alt="image-20231119184400458"></p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>缓存空对象</li></ul><blockquote><p>优点：实现简单， 维护方便</p><p>缺点： 额外的内存消耗， 可能会操作短期的不一致</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191846974.png" alt="image-20231119184631940"></p><ul><li>布隆过滤</li></ul><p>在客户端到redis中设置一个过滤器</p><blockquote><p>优点：内存占用少， 没有多余的key</p><p>缺点： 实现复杂， 存在误判可能</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191847793.png" alt="image-20231119184718752"></p><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><p>这里我们选择方案一</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191851919.png" alt="image-20231119185116839"></p><p><strong>作用就是： 用户查询的数据在缓存的数据在数据库和缓存都不存在， 我们可以用方案1， 这样下次 就只用缓存， 减少数据库的压力</strong></p><ul><li><p>当然， 我们可以设置一些id的格式规范， 然后判断id的规范， 来进行判断。或者</p></li><li><p>进行用户权限的校验</p></li></ul><p>来解决缓存击穿问题</p><h2 id="缓存雪崩"><a href="#缓存雪崩" class="headerlink" title="缓存雪崩"></a>缓存雪崩</h2><ul><li>问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191859414.png" alt="image-20231119185942347"></p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><ul><li>给不同的TTL设置随机值</li><li>利用Redis集群提高服务的可用性</li></ul><p>​部署多个集群。避免这种问题</p><ul><li><p>给缓存业务添加降级限流策略</p><p>拒绝服务， 保护数据库的健康</p></li><li><p>给业务添加多级缓存</p><p>nginx ， jvm ， 等多个缓存。</p></li></ul><h2 id="缓存击穿"><a href="#缓存击穿" class="headerlink" title="缓存击穿"></a>缓存击穿</h2><ul><li>部分key 过期， 造成的问题</li></ul><blockquote><p> 一个高并发访问并且缓存重建业务较为复杂的key失效了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191908667.png" alt="image-20231119190807604"></p><h3 id="解决方案-2"><a href="#解决方案-2" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="互斥锁"><a href="#互斥锁" class="headerlink" title="互斥锁"></a>互斥锁</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191910120.png" alt="image-20231119191011070"></p><h4 id="逻辑过期"><a href="#逻辑过期" class="headerlink" title="逻辑过期"></a>逻辑过期</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191914099.png" alt="image-20231119191429040"></p><p>注意这个互斥锁和上面的，在用法上面的不同</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><table><thead><tr><th>解决方案</th><th align="center">优点</th><th>缺点</th></tr></thead><tbody><tr><td>互斥锁</td><td align="center">没有额外的消耗 保持一致性</td><td>线程需要等待性能收到影响，可能有死锁的风险</td></tr><tr><td>逻辑过期</td><td align="center">线程无需等待，性能较好</td><td>不保证一致性，有额外的内存消耗，实现复杂。</td></tr></tbody></table><h2 id="实战-1"><a href="#实战-1" class="headerlink" title="实战"></a>实战</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311191920870.png" alt="image-20231119192033815"></p><p>我们可以利用setnx， 来实习互斥锁。</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242328150.webp" alt="image-20231124232810019"></p><p>热点key才会设计到 缓存击穿</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242331415.webp" alt="image-20231124233129265"></p><h2 id="进一步实战-秒杀"><a href="#进一步实战-秒杀" class="headerlink" title="进一步实战 - 秒杀"></a>进一步实战 - 秒杀</h2><h3 id="全局唯一ID-生成器"><a href="#全局唯一ID-生成器" class="headerlink" title="全局唯一ID - 生成器"></a>全局唯一ID - 生成器</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242340773.webp" alt="image-20231124234034601"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242343298.webp" alt="image-20231124234337129"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311242355319.webp" alt="image-20231124235441813"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251345622.webp" alt="image-20231125134529447"></p><ul><li>更新数据库的操作</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251350182.webp" alt="image-20231125135008081"></p><h3 id="多线程并发问题"><a href="#多线程并发问题" class="headerlink" title="多线程并发问题"></a>多线程并发问题</h3><ul><li>我们使用锁的方案的来解决这个问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251405438.webp" alt="image-20231125140540263"></p><ul><li>我们可以设置一个版本号</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251408439.webp" alt="image-20231125140856280"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251411742.webp" alt="image-20231125141156609"></p><ul><li><strong>CAS 法</strong> （利用库存代替版本）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251414616.webp" alt="image-20231125141432488"></p><p><code>这里写sql的时候where stock &gt; 0是没问题的，因为update语句在执行的时候会加行锁，即使多线程高并发，也不会出现多个线程同时执行update，因为加了行锁</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251418323.webp" alt="image-20231125141831199"></p><p>但是这样还是有点问题， 所以我把库存换成大于0</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">boolean</span> <span class="variable">success</span> <span class="operator">=</span> seckillVoucherService.update()</span><br><span class="line">        .setSql(<span class="string">&quot;stock = stock - 1&quot;</span>) <span class="comment">// set stock = stock - 1</span></span><br><span class="line">        .eq(<span class="string">&quot;voucher_id&quot;</span>, voucherId).gt(<span class="string">&quot;stock&quot;</span>, <span class="number">0</span>) <span class="comment">// where id = ? and stock &gt; 0</span></span><br><span class="line">        .update();</span><br></pre></td></tr></table></figure><blockquote><p>增删改会自动加锁数据库，查只有在串行化才回加锁</p></blockquote><h3 id="一人一单"><a href="#一人一单" class="headerlink" title="一人一单"></a>一人一单</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251430589.webp" alt="image-20231125143027408"></p><p>我们发现如果相同用于同时访问， 他会出现一人用多单</p><p>我们需要对一对代码加上代码块</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251439285.webp" alt="image-20231125143920187"></p><p>然后加上这个<strong>intern 使得拿取字符串在常量池</strong>中拿取</p><ul><li><p>为了解决事务传递问题， 我们来写下面的方法</p></li><li><p>引入依赖</p></li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.aspectj<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>aspectjweaver<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>在启动类加上一个注解</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableAspectJAutoProxy(exposeProxy=true)</span></span><br></pre></td></tr></table></figure><ul><li>我们需要使用代理对象来调用下面的方法 而不是直接调用下面的方法， 两个含义是不一样的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251446763.webp" alt="image-20231125144641641"></p><h3 id="集群解决并发问题"><a href="#集群解决并发问题" class="headerlink" title="集群解决并发问题"></a>集群解决并发问题</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251453712.webp" alt="image-20231125145358534"></p><h4 id="分布式锁"><a href="#分布式锁" class="headerlink" title="分布式锁"></a>分布式锁</h4><p>在集群模式， 分布式 下， 有多个jvm 存在， <strong>每一个jvm 都有自己的锁</strong>， jvm之间的锁互相隔离</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311251509342.webp" alt="image-20231125150538528"></p><ul><li><p>所以我们需要使用可以跨jvm锁的方式来解决这个问题。</p></li><li><p>分布式锁的定义</p><ul><li>满足分布式系统或者集群模式下多线程可见并且互斥的锁</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311282321294.webp" alt="image-20231128232120079"></p></li></ul><p>setnx 只有在 数据存在的时候，才会成功， 并且可以通过设置超时时间，到期释放， 可以解决安全性的问题</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311282330098.webp" alt="image-20231128233008981"></p><h4 id="实现分布式锁"><a href="#实现分布式锁" class="headerlink" title="实现分布式锁"></a>实现分布式锁</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311282335797.webp" alt="image-20231128233540660"></p><ul><li><p>但是如果在 过期操作执行之前， setnx 执行之后， 出现业务故障， 那么要怎么办呢？（如何实现原子操作）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311282337734.webp" alt="image-20231128233730658"></p><p>我们使用这种方式就可以保证它的原子性</p></li><li><p>当一个业务阻塞，造成消耗时间太长， 会出现下面的问题</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311282354477.webp" alt="image-20231128235405296"></p><p>​我们可以在释放锁之前，进行判断， 叫做锁标识</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311282355633.webp" alt="image-20231128235552449"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311282356086.webp" alt="image-20231128235612956"></p><ul><li>我们把他改进为这样</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20231129000308542.png" alt="image-20231129000308542"></p><h4 id="Lua-解决误删问题"><a href="#Lua-解决误删问题" class="headerlink" title="Lua 解决误删问题"></a>Lua 解决误删问题</h4><ul><li><p>使用lua 脚本 就可以解决 多条redis 的原子性</p></li><li><p>lua 调用 redis 的脚本如下</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302208334.webp" alt="image-20231130220803946"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302210036.webp" alt="image-20231130221023756"></p><ul><li><p>如果不想要写死参数 我们就用下面这个</p><p>在lua 语言中 下标的参数从 1开始</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302213949.webp" alt="image-20231130221343643"></p><p>注意这里的KEYS 和 ARGV 需要大写。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- 这是注释的方式</span></span><br><span class="line"><span class="comment">-- keys 代表锁的key， 这里的ARGV【1】 就是当前线程的标示</span></span><br><span class="line"><span class="comment">-- 当前线程标识</span></span><br><span class="line"><span class="keyword">local</span> id = redis.call(<span class="string">&#x27;get&#x27;</span>,KEYS[<span class="number">1</span>])</span><br><span class="line"><span class="keyword">if</span>(id == ARGV[<span class="number">1</span>]) <span class="keyword">then</span></span><br><span class="line">    <span class="comment">-- 释放锁</span></span><br><span class="line">    <span class="keyword">return</span> redis.call(<span class="string">&#x27;del&#x27;</span>, key)</span><br><span class="line"><span class="keyword">end</span></span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>在java 中使用lua</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302222981.webp" alt="image-20231130222200643"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302237463.webp" alt="image-20231130223714224"></p><h3 id="Redission"><a href="#Redission" class="headerlink" title="Redission"></a>Redission</h3><ul><li>基于 setnx 实现的 锁操作存在着下面几个问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302241134.webp" alt="image-20231130224128870"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302246338.webp" alt="image-20231130224609056"></p><h4 id="引入依赖以及-配置客户端"><a href="#引入依赖以及-配置客户端" class="headerlink" title="引入依赖以及 配置客户端"></a>引入依赖以及 配置客户端</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302248994.webp" alt="image-20231130224834738"></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.redisson<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>redisson<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.13.6<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>配置类</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.hmdp.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.redisson.Redisson;</span><br><span class="line"><span class="keyword">import</span> org.redisson.api.RedissonClient;</span><br><span class="line"><span class="keyword">import</span> org.redisson.config.Config;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RedissonConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> RedissonClient <span class="title function_">redissonClient</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 配置</span></span><br><span class="line">        <span class="type">Config</span> <span class="variable">config</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Config</span>();</span><br><span class="line">        config.useSingleServer().setAddress(<span class="string">&quot;redis://192.168.150.101:6379&quot;</span>).setPassword(<span class="string">&quot;123321&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建RedissonClient对象</span></span><br><span class="line">        <span class="keyword">return</span> Redisson.create(config);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011227853.webp" alt="image-20231201122709537"></p><h3 id="Redission-的可重入锁原理"><a href="#Redission-的可重入锁原理" class="headerlink" title="Redission 的可重入锁原理"></a>Redission 的可重入锁原理</h3><p>利用哈希结构， 记录重入次数</p><p>这样就不用 不是原本的互斥</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011646702.webp" alt="image-20231201164657453"></p><ul><li>获取锁的Lua 脚本</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011647191.webp" alt="image-20231201164726918"></p><p>释放锁的脚本</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011651979.webp" alt="image-20231201165138666"></p><ul><li>这个地方 非常难懂， 建议多看</li></ul><p>waiting time 是 锁等待时间</p><p>leaseTime 是锁超时等待时间</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011732697.webp" alt="image-20231201173237423"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011735148.webp" alt="image-20231201173536864"></p><h3 id="Redission-解决主从一致"><a href="#Redission-解决主从一致" class="headerlink" title="Redission 解决主从一致"></a>Redission 解决主从一致</h3><ul><li>mulitlock</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011741819.webp" alt="image-20231201174119416"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312011756851.webp" alt="image-20231201175605596"></p><h3 id="秒杀优化"><a href="#秒杀优化" class="headerlink" title="秒杀优化"></a>秒杀优化</h3><ul><li>优化流程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312032213175.webp"></p><ul><li>判断有没有购买资格</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312032217481.webp" alt="image-20231203221736049"></p><p>使用redis 记录 情况， 然后适当时间 存入到数据库中</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312032219421.webp" alt="image-20231203221940259"></p><ul><li>redis 的redis 判断是否存在 SISMEMBER</li><li>tonumber 将string 转变为number 类型 （lua脚本）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312032231184.webp" alt="image-20231203223142926"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312032232570.webp" alt="image-20231203223202414"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041358920.webp" alt="image-20231204135805639"></p><h4 id="异步发送消息"><a href="#异步发送消息" class="headerlink" title="异步发送消息"></a>异步发送消息</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041404118.webp" alt="image-20231204140404907"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041408927.webp" alt="image-20231204140824681"></p><p>声明阻塞队列和 线程池</p><p>@PostConstruct 可以用于 类初始化之后执行的任务</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041413982.webp" alt="image-20231204141346631"></p><p>这里后面还是需要多看。</p><ul><li>但是这里还会存在一些问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041428463.webp" alt="image-20231204142842251"></p><h4 id="消息队列"><a href="#消息队列" class="headerlink" title="消息队列"></a>消息队列</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041432483.webp" alt="image-20231204143223147"></p><ul><li>List 结构</li></ul><p>使用LPUSH，RPOP,RPUSH,LPOP, 方法</p><p>， 前面加上一个B， 就是可以阻塞的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">BRPOP l1 20</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041435849.webp" alt="image-20231204143516400"></p><p>如果移除了 ， 信息，但是 消费者没有对数据信息消费就会有点问题</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041436118.webp" alt="image-20231204143627851"></p><ul><li>PubSub</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041437961.webp" alt="image-20231204143723493"></p><p>这是他的缺点</p><p>如果它发送信息的时候， 没有人接受， 这个消息就没有了</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041439174.webp" alt="image-20231204143950824"></p><ul><li>Stream</li></ul><p>发送消息</p><p>​<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041443133.webp" alt="image-20231204144326874"></p><p>接受消息</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041446524.webp" alt="image-20231204144621158"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041447632.webp" alt="image-20231204144700321"></p><p>他有以下的优势和缺点</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041449005.webp" alt="image-20231204144859454"></p><h4 id="Stream-消费组"><a href="#Stream-消费组" class="headerlink" title="Stream-消费组"></a>Stream-消费组</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041452835.webp" alt="image-20231204145218392"></p><p><code>XGROUP CREATE key groupName ID [MKSTREAM]</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041454619.webp" alt="image-20231204145416300"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041457882.webp" alt="image-20231204145714309"></p><p>在一个组中， 被其他消费者消费的， 对于另一个组就是被标记的东西。</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041506321.webp" alt="image-20231204150615860"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041506455.webp" alt="image-20231204150644014"></p><ul><li><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041508069.webp" alt="image-20231204150849622"></li><li>创建 stream 组</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041508856.webp" alt="image-20231204150833752"></p><p>消息处理的流程</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041521818.webp" alt="image-20231204152116419"></p><p>如果消息抛出异常， 我们就需要使用下面这个方法</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041525507.webp" alt="image-20231204152505209"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041525532.webp" alt="image-20231204152528355"></p><h2 id="其他常用数据结构"><a href="#其他常用数据结构" class="headerlink" title="其他常用数据结构"></a>其他常用数据结构</h2><h3 id="BitMap"><a href="#BitMap" class="headerlink" title="BitMap"></a>BitMap</h3><blockquote><p>实战场景：</p><p>在签到打卡的场景中，我们只用记录签到（1）或未签到（0），所以它就是非常典型的二值状态。</p><p>签到统计时，每个用户一天的签到用 1 个 bit 位就能表示，一个月（假设是 31 天）的签到情况用 31 个 bit 位就可以，而一年的签到也只需要用 365 个 bit 位，根本不用太复杂的集合类型。</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081911745.webp" alt="image-20231208191129602"></p><ul><li><p>语法 key offset value（value只能是0 ~ 1）</p></li><li><p>如何统计本月首次打卡的时间，<code>BITPOS key bitValue [start] [end]</code></p></li><li><p>判断用户的登录状态</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081914655.webp" alt="image-20231208191425485"></p></li><li><p>统计连续打卡的日期</p><p>具体参考小林coding， 实现原理就是用AND与运算</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081926940.webp" alt="image-20231208192659787"></p><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><ul><li><p>在redis2.8.9中新增添的数据结构</p></li><li><p>提供不精确的重复计数</p></li><li><p>常见指令</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081929320.webp" alt="image-20231208192926198"></p><ul><li>用来统计不重复的的元素个数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081932280.webp" alt="image-20231208193234117"></p><h2 id="持久化"><a href="#持久化" class="headerlink" title="持久化"></a>持久化</h2><h3 id="AOF"><a href="#AOF" class="headerlink" title="AOF"></a>AOF</h3><ul><li><p>默认不会开启这个功能， 我需要到配置文件里面，给appendonly 从false 修改为 yes</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081948473.webp" alt="image-20231208194837354"></p></li></ul><h4 id="先执行操作再写入"><a href="#先执行操作再写入" class="headerlink" title="先执行操作再写入"></a>先执行操作再写入</h4><ul><li>好处：<ul><li>避免额外的检测开销</li><li>不会阻塞当前写操作命令的执行</li></ul></li><li>坏处：<ul><li>数据可能回丢失</li><li>阻塞下一个命令的执行</li></ul></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081950796.webp" alt="image-20231208195034637"></p><h4 id="写入策略"><a href="#写入策略" class="headerlink" title="写入策略"></a>写入策略</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081953648.webp" alt="image-20231208195329518"></p><p>需要根据业务来分析写入的方式</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312081954994.webp" alt="image-20231208195411829"></p><h4 id="重写机制"><a href="#重写机制" class="headerlink" title="重写机制"></a>重写机制</h4><ul><li>默认， 选择最新的键值对存入。</li><li>再重写过程中是先写入到一个新的AOF文件里面， 然后用AOF文件去替代旧版的AOF</li></ul><h4 id="后台重写机制"><a href="#后台重写机制" class="headerlink" title="后台重写机制"></a>后台重写机制</h4><p>Redis的重写AOF过程是由后台<strong>子进程</strong>bgrewriteaof完成的。（注意这里是子进程， 而不是线程，线程会共享内存地址， 那么就需要通过加锁来区分，更加影响速度了）</p><p>子进程会得到一个数据副本， 那这个副本是如何得到的呢？</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082018017.webp" alt="image-20231208201813915"></p><p>当写入数据的时候会发送如下的操作</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082019143.webp" alt="image-20231208201935022"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312092207355.webp" alt="image-20231209220717179"></p><ul><li>创建子进程的时候要复制页表等数据结构，需要消耗时间</li><li>触发写时复制的时候， 拷贝物理内存，也会造成阻塞</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312092215937.webp" alt="image-20231209221513794"></p><h3 id="RDB"><a href="#RDB" class="headerlink" title="RDB"></a>RDB</h3><ul><li>RDB是某一个时刻redis的快照。 所以恢复数据的效率要高于AOF</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102056889.webp" alt="image-20231210205622711"></p><h4 id="生成方式"><a href="#生成方式" class="headerlink" title="生成方式"></a>生成方式</h4><ul><li>save 命令就会在主线程生成 RDB 文件，由于和执行操作命令在同一个线程，所以如果写入 RDB 文件的时间太长，<strong>会阻塞主线程</strong>；</li><li>bgsave 命令会创建一个子进程来生成 RDB 文件，这样可以<strong>避免主线程的阻塞</strong></li></ul><p>​</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102059037.webp" alt="image-20231210205926891"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102102805.webp" alt="image-20231210210228673"></p><ul><li>注意主线程， 操作的是操作之后复制产生数据副本， 而RDB操作的是操作之前的数据</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102105892.webp" alt="image-20231210210507722"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102107359.webp" alt="image-20231210210755183"></p><h3 id="混合持久化"><a href="#混合持久化" class="headerlink" title="混合持久化"></a>混合持久化</h3><ul><li>将RDB 和 AOF 结合</li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">aof-use-rdb-preamble <span class="built_in">yes</span></span><br></pre></td></tr></table></figure><p>当开启了混合持久化时，在 AOF 重写日志时，<code>fork</code> 出来的重写子进程会先将与主线程共享的内存数据以 RDB 方式写入到 AOF 文件，然后主线程处理的操作命令会被记录在重写缓冲区里，重写缓冲区里的增量命令会以 AOF 方式写入到 AOF 文件，写入完成后通知主进程将新的含有 RDB 格式和 AOF 格式的 AOF 文件替换旧的的 AOF 文件。</p><h3 id="面经"><a href="#面经" class="headerlink" title="面经"></a>面经</h3><ul><li><p>大key值对redis的影响</p><p>如果是AOF日志的话， 那么分为下面三个情况进行分析</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102118904.webp" alt="image-20231210211800763"></p><p>​对于AOF重写和RDB的影响</p><p>​</p><ul><li>fork 耗时过长的解决方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102126870.webp" alt="image-20231210212637745"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102131010.webp" alt="image-20231210213131824"></p><p>删除大key的时候， 不要使用del命令去删除， 而是使用unlink命令去删除， 因为unlink命令是异步删除</p><h1 id="Redis过期淘汰删除策略内存淘汰策略"><a href="#Redis过期淘汰删除策略内存淘汰策略" class="headerlink" title="Redis过期淘汰删除策略内存淘汰策略"></a>Redis过期淘汰删除策略内存淘汰策略</h1><h2 id="过期删除策略"><a href="#过期删除策略" class="headerlink" title="过期删除策略"></a>过期删除策略</h2><h3 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102133415.webp" alt="image-20231210213350253"></p><h3 id="判断key是否过期"><a href="#判断key是否过期" class="headerlink" title="判断key是否过期"></a>判断key是否过期</h3><p>查看某一个指令的剩余生命周期， 使用ttl keyname</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">redisDb</span> &#123;</span><br><span class="line">    dict *dict;    <span class="comment">/* 数据库键空间，存放着所有的键值对 */</span></span><br><span class="line">    dict *expires; <span class="comment">/* 键的过期时间 */</span></span><br><span class="line">    ....</span><br><span class="line">&#125; redisDb;</span><br></pre></td></tr></table></figure><ul><li>过期字典的 key 是一个指针，指向某个键对象；</li><li>过期字典的 value 是一个 long long 类型的整数，这个整数保存了 key 的过期时间；</li></ul><h4 id="判定流程"><a href="#判定流程" class="headerlink" title="判定流程"></a>判定流程</h4><p>字典实际上是哈希表，哈希表的最大好处就是让我们可以用 O(1) 的时间复杂度来快速查找。当我们查询一个 key 时，Redis 首先检查该 key 是否存在于过期字典中：</p><ul><li>如果不在，则正常读取键值；</li><li>如果存在，则会获取该 key 的过期时间，然后与当前系统时间进行比对，如果比系统时间大，那就没有过期，否则判定该 key 已过期。</li></ul><h3 id="过期删除策略举例"><a href="#过期删除策略举例" class="headerlink" title="过期删除策略举例"></a>过期删除策略举例</h3><ul><li>定时删除；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102138820.webp" alt="image-20231210213823672"></p><ul><li>惰性删除；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102139046.webp" alt="image-20231210213933904"></p><ul><li>定期删除；</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312102140848.webp" alt="image-20231210214023687"></p><h3 id="一般删除的策略"><a href="#一般删除的策略" class="headerlink" title="一般删除的策略"></a>一般删除的策略</h3><p>所以， <strong>Redis 选择「惰性删除+定期删除」这两种策略配和使用</strong>，以求在合理使用 CPU 时间和避免内存浪费之间取得平衡。</p><h3 id="惰性删除实现"><a href="#惰性删除实现" class="headerlink" title="惰性删除实现"></a>惰性删除实现</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="type">int</span> <span class="title">expireIfNeeded</span><span class="params">(redisDb *db, robj *key)</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 判断 key 是否过期</span></span><br><span class="line">    <span class="keyword">if</span> (!<span class="built_in">keyIsExpired</span>(db,key)) <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">/* 删除过期键 */</span></span><br><span class="line">    ....</span><br><span class="line">    <span class="comment">// 如果 server.lazyfree_lazy_expire 为 1 表示异步删除，反之同步删除；</span></span><br><span class="line">    <span class="keyword">return</span> server.lazyfree_lazy_expire ? <span class="built_in">dbAsyncDelete</span>(db,key) :</span><br><span class="line">                                         <span class="built_in">dbSyncDelete</span>(db,key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Redis 在访问或者修改 key 之前，都会调用 expireIfNeeded 函数对其进行检查，检查 key 是否过期：</p><ul><li>如果过期，则删除该 key，至于选择异步删除，还是选择同步删除，根据 <code>lazyfree_lazy_expire</code> 参数配置决定（Redis 4.0版本开始提供参数），然后返回 null 客户端；</li><li>如果没有过期，不做任何处理，然后返回正常的键值对给客户端；</li></ul><h3 id="定期删除"><a href="#定期删除" class="headerlink" title="定期删除"></a>定期删除</h3><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span> &#123;</span><br><span class="line">    <span class="comment">//已过期的数量</span></span><br><span class="line">    expired = <span class="number">0</span>；</span><br><span class="line">    <span class="comment">//随机抽取的数量</span></span><br><span class="line">    num = <span class="number">20</span>;</span><br><span class="line">    <span class="keyword">while</span> (num--) &#123;</span><br><span class="line">        <span class="comment">//1. 从过期字典中随机抽取 1 个 key</span></span><br><span class="line">        <span class="comment">//2. 判断该 key 是否过期，如果已过期则进行删除，同时对 expired++</span></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 超过时间限制则退出</span></span><br><span class="line">    <span class="keyword">if</span> (timelimit_exit) <span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line">  <span class="comment">/* 如果本轮检查的已过期 key 的数量，超过 25%，则继续随机抽查，否则退出本轮检查 */</span></span><br><span class="line">&#125; <span class="keyword">while</span> (expired &gt; <span class="number">20</span>/<span class="number">4</span>); </span><br></pre></td></tr></table></figure><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><h2 id="测试高并发"><a href="#测试高并发" class="headerlink" title="测试高并发"></a>测试高并发</h2><blockquote><p>JMeter 我们可以进行高并发的测试</p></blockquote><h2 id="设置过期时间-1"><a href="#设置过期时间-1" class="headerlink" title="设置过期时间"></a>设置过期时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">&quot;login:code&quot;</span>  + phone, code , <span class="number">2</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="copyproperties"><a href="#copyproperties" class="headerlink" title="copyproperties"></a>copyproperties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类的复制可以使用</span></span><br><span class="line">BeanUtils.copyproperties(source,target);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用这个class操作，可以更加的优雅</span></span><br><span class="line"><span class="type">UserDto</span> <span class="variable">userDto</span> <span class="operator">=</span> BeanUtils.copyProperties(user, UserDto.class);</span><br><span class="line"><span class="comment">// </span></span><br></pre></td></tr></table></figure><h3 id="builder-注释"><a href="#builder-注释" class="headerlink" title="builder 注释"></a>builder 注释</h3><p>在实体类上加上@Builder</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311181759987.jpg" alt="fdd50067852e5263bd070903adae05f"></p><h2 id="IDEA-的快捷键"><a href="#IDEA-的快捷键" class="headerlink" title="IDEA 的快捷键"></a>IDEA 的快捷键</h2><p>ctrl + shift + u 将选中的代码变成大写</p><p>ctrl + shift + m 截取代码</p><h2 id="前端的一些小知识"><a href="#前端的一些小知识" class="headerlink" title="前端的一些小知识"></a>前端的一些小知识</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20231118171733312.png" alt="image-20231118171733312"></p><p>前端这里需要注意 在发送请求的时候，将所有的axios带入token请求</p><h3 id=""><a href="#" class="headerlink" title=""></a></h3><h2 id="工具类"><a href="#工具类" class="headerlink" title="工具类"></a>工具类</h2><h3 id="Collection"><a href="#Collection" class="headerlink" title="Collection"></a>Collection</h3><h4 id="singleton"><a href="#singleton" class="headerlink" title="singleton"></a>singleton</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311302231499.webp" alt="image-20231130223135239"></p><h3 id="BeanUtil"><a href="#BeanUtil" class="headerlink" title="BeanUtil"></a>BeanUtil</h3><h4 id="fillBeanWithMap"><a href="#fillBeanWithMap" class="headerlink" title="fillBeanWithMap"></a>fillBeanWithMap</h4><p>将map对象转换到对应的类里面。 这个类是map对象散开的类型</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312041520946.webp" alt="image-20231204152016822"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2023/11/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/11/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统的基本概念"><a href="#操作系统的基本概念" class="headerlink" title="操作系统的基本概念"></a>操作系统的基本概念</h1><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><ul><li><p>并发</p></li><li><p>共享</p><ul><li><p>并发和共享的关系</p><p>两个进程同时执行 ， （并发性）</p><p>需要共享的访问硬盘资源（共享性）</p></li></ul></li><li><p>虚拟</p></li></ul><p>​虚拟存储器 和空分复用技术</p><p>​空分复用技术</p><p>​时分复用技术</p><ul><li><p>异步</p><blockquote><p>在多道程序环境下， 允许多个程序并发执行， 但是由于资源的有限， 进程的执行不是一贯到底的， 而是走走停停</p></blockquote></li></ul><h2 id="操作系统底层"><a href="#操作系统底层" class="headerlink" title="操作系统底层"></a>操作系统底层</h2><h3 id="指令"><a href="#指令" class="headerlink" title="指令"></a>指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/img/202401011021199.webp" alt="image-20240101102157883"></p><p>使用寄存器0， 和1 表示内核态， 还是用户态（ 这个叫做PSW的标志位）</p><p>当出现中断信号之后就会修改cpu的控制权为内核态</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011026009.webp" alt="image-20240101102649719"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011027477.webp" alt="image-20240101102740305"></p><h3 id="中断和异常"><a href="#中断和异常" class="headerlink" title="中断和异常"></a>中断和异常</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011030287.webp" alt="image-20240101103008848"></p><ul><li><p>内中断</p><p>​指令非法就会触发内中断 比如黑客 入侵或者 除0</p><p>​应用程序想要请求操作系统内核的服务，此时就会执行一条特殊的指令-陷入指令（也可以叫做Trap指令&#x2F;访管指令）</p><p>​<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011033872.webp" alt="image-20240101103305619"></p></li></ul><p>​</p><ul><li><p>外中断</p><p>时钟中断 - 由时钟部件发送的中断信号</p></li></ul><p>​io设备中断： 外部设备发送的中断信号</p><p>判断 两个中断的差别： 与当前执行的指令无关中断信号的来自cpu内外</p><h3 id="中断机制的基本原理"><a href="#中断机制的基本原理" class="headerlink" title="中断机制的基本原理"></a>中断机制的基本原理</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011038097.webp" alt="image-20240101103803796"></p><h2 id="系统调用"><a href="#系统调用" class="headerlink" title="系统调用"></a>系统调用</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011040555.webp" alt="image-20240101104001404"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011042075.webp" alt="image-20240101104234813"></p><h2 id="操作系统体系结构"><a href="#操作系统体系结构" class="headerlink" title="操作系统体系结构"></a>操作系统体系结构</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011048370.webp" alt="image-20240101104802845"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011048536.webp" alt="image-20240101104857365"></p><p>微内核转换的时候需要状态转换6次</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011050306.webp" alt="image-20240101105057918"></p><ul><li>外核</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011057433.webp" alt="image-20240101105742186"></p><h2 id="操作系统的引导"><a href="#操作系统的引导" class="headerlink" title="操作系统的引导"></a>操作系统的引导</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011111390.webp" alt="image-20240101111126088"></p><h2 id="虚拟机"><a href="#虚拟机" class="headerlink" title="虚拟机"></a>虚拟机</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011113801.webp" alt="image-20240101111322588"></p><p>区别在于是否分配在宿主操作系统</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011117498.webp" alt="image-20240101111759170"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011121123.webp" alt="image-20240101112144666"></p><p>对于第一种vmm 中 我们还可以继续进行划分特权</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011126020.webp" alt="image-20240101112649807"></p><p>对于ring1， 2的指令 vmm不需要检查直接执行， 对于ring0的请求在进行检查即可</p><h1 id="进程"><a href="#进程" class="headerlink" title="进程"></a>进程</h1><ul><li>PCB <strong>进程控制块</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011133280.webp" alt="image-20240101113319618"></p><ul><li>进程由 ： PCB 程序段， 数据段组成</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011138434.webp" alt="image-20240101113840982"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401011141168.webp" alt="image-20240101114133031"></p><h2 id="状态"><a href="#状态" class="headerlink" title="状态"></a>状态</h2><h3 id="创建态"><a href="#创建态" class="headerlink" title="创建态"></a>创建态</h3><h3 id="就绪态"><a href="#就绪态" class="headerlink" title="就绪态"></a>就绪态</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021031975.webp" alt="image-20240102103128708"></p><h3 id="运行态"><a href="#运行态" class="headerlink" title="运行态"></a>运行态</h3><p>CPU会执行该进程对应的程序</p><h3 id="阻塞态"><a href="#阻塞态" class="headerlink" title="阻塞态"></a>阻塞态</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021033067.webp" alt="image-20240102103315933"></p><h3 id="终止态"><a href="#终止态" class="headerlink" title="终止态"></a>终止态</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021034904.webp" alt="image-20240102103428769"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021035213.webp" alt="image-20240102103530901"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021036952.webp" alt="image-20240102103611823"></p><ul><li><p>注意： 不能从阻塞态 直接转换到运行态， 也不能由就绪态直接转换到阻塞态</p></li><li><p>运行态， 也可以转换为就绪态 （时间片到了，处理机被抢占）</p></li><li><p>单个CPU环境下，同一时刻只有一个进程被执行， 但是在多核环境下，可能会有多个进程处于运行态</p></li><li><p>在进程控制块中有一个变量state 用于表示当前进程的状态</p></li></ul><h2 id="进程组织"><a href="#进程组织" class="headerlink" title="进程组织"></a>进程组织</h2><h3 id="链式方式组织"><a href="#链式方式组织" class="headerlink" title="链式方式组织"></a>链式方式组织</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021041770.webp" alt="image-20240102104156458"></p><h3 id="索引方式组织"><a href="#索引方式组织" class="headerlink" title="索引方式组织"></a>索引方式组织</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021041770.webp"></p><h2 id="进程控制"><a href="#进程控制" class="headerlink" title="进程控制"></a>进程控制</h2><ul><li>进程控制由原语控制</li></ul><h3 id="原语"><a href="#原语" class="headerlink" title="原语"></a>原语</h3><ul><li><p>不可被中断， 原子性</p></li><li><p>原理 ： 使用了关中断指令和开中断指令这两个特权指令来实现原子性</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021049368.webp" alt="image-20240102104911211"></p></li></ul><h3 id="出现时机"><a href="#出现时机" class="headerlink" title="出现时机"></a>出现时机</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021051801.webp" alt="image-20240102105119631"></p><h3 id="撤销原语"><a href="#撤销原语" class="headerlink" title="撤销原语"></a>撤销原语</h3><blockquote><p>步骤</p><p>从PCB集合中找到终止进程的PCB</p><p>若进程正在运行， 立刻剥夺CPU， 将CPU分配给其他的进程</p><p>终止其所有的子进程</p><p>将该进程拥有的所有资源归还给父进程或者操作系统</p><p>删除PCB</p></blockquote><ul><li>触发撤销原语的时机</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021055488.webp" alt="image-20240102105548292"></p><h3 id="切换原语"><a href="#切换原语" class="headerlink" title="切换原语"></a>切换原语</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021058711.webp" alt="image-20240102105832436"></p><ul><li>PSW 程序状态字寄存器<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021100391.webp" alt="image-20240102110056183"></li></ul><p>当别的线程抢断之后， 寄存器的值被覆盖， 当进程切回来的时候， 原本的信息就消失了， 这个时候就需要把数据存储到硬盘中。</p><h2 id="进程通信"><a href="#进程通信" class="headerlink" title="进程通信"></a>进程通信</h2><ul><li>进程不能直接去访问其他的进程</li></ul><h3 id="共享通信"><a href="#共享通信" class="headerlink" title="共享通信"></a>共享通信</h3><ul><li>通过共享存储， 进程P 和 进程Q就可以共享信息了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401021111011.webp" alt="image-20240102111104810"></p><h3 id="直接通信"><a href="#直接通信" class="headerlink" title="直接通信"></a>直接通信</h3><h3 id="间接通信"><a href="#间接通信" class="headerlink" title="间接通信"></a>间接通信</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030853413.webp" alt="image-20240103085358098"></p><h3 id="管道通信"><a href="#管道通信" class="headerlink" title="管道通信"></a>管道通信</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030859350.webp" alt="image-20240103085951048"></p><p>和 共享通信的区别， 就是 管道通信时半双工， 当然我们可以设置两个管道， 实现全双工</p><ul><li>管道一旦读出， 就会彻底消失， 一个管道允许多个写进程， 一个读进程。（ 当然linux 也可以实现 多个读进程）</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030906810.webp" alt="image-20240103090651467"></p><h2 id="线程模型"><a href="#线程模型" class="headerlink" title="线程模型"></a>线程模型</h2><ul><li>什么是线程（ 程序执行流的最小单位）</li><li>引入线程后， cpu调度的对象就是线程了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030916415.webp" alt="image-20240103091630062"></p><h3 id="线程的实现方式"><a href="#线程的实现方式" class="headerlink" title="线程的实现方式"></a>线程的实现方式</h3><h4 id="用户线程"><a href="#用户线程" class="headerlink" title="用户线程"></a>用户线程</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030923579.webp" alt="image-20240103092357218"></p><h4 id="内核线程"><a href="#内核线程" class="headerlink" title="内核线程"></a>内核线程</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030926322.webp" alt="image-20240103092605935"></p><h4 id="多线程模型"><a href="#多线程模型" class="headerlink" title="多线程模型"></a>多线程模型</h4><ul><li><p>一对一模型</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030927416.webp" alt="image-20240103092735235"></p></li><li><p>多对一模型</p><ul><li>退化成了用户级线程</li><li><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030928222.webp" alt="image-20240103092830997"></li></ul></li><li><p>多对多</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030931116.webp" alt="image-20240103093107663"></p><h3 id="线程的状态和转换"><a href="#线程的状态和转换" class="headerlink" title="线程的状态和转换"></a>线程的状态和转换</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030937932.webp" alt="image-20240103093742675"></p><h2 id="处理机调度"><a href="#处理机调度" class="headerlink" title="处理机调度"></a>处理机调度</h2><h3 id="高级调度"><a href="#高级调度" class="headerlink" title="高级调度"></a>高级调度</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20240103094151321.png" alt="image-20240103094151321"></p><h3 id="低级调度"><a href="#低级调度" class="headerlink" title="低级调度"></a>低级调度</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030942138.webp" alt="image-20240103094251859"></p><h3 id="中级调度"><a href="#中级调度" class="headerlink" title="中级调度"></a>中级调度</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030945337.webp" alt="image-20240103094530033"></p><h3 id="七状态模型"><a href="#七状态模型" class="headerlink" title="七状态模型"></a>七状态模型</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030948784.webp"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030950218.webp" alt="image-20240103095054875"></p><h3 id="进程调度的时机"><a href="#进程调度的时机" class="headerlink" title="进程调度的时机"></a>进程调度的时机</h3><h4 id="低级进程调度"><a href="#低级进程调度" class="headerlink" title="低级进程调度"></a>低级进程调度</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401030955634.webp" alt="image-20240103095524250"></p><h3 id="进程调度方式"><a href="#进程调度方式" class="headerlink" title="进程调度方式"></a>进程调度方式</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20240103100053547.png" alt="image-20240103100053547"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401031004089.webp" alt="image-20240103100430750"></p><h4 id="调度器（Scheduler）"><a href="#调度器（Scheduler）" class="headerlink" title="调度器（Scheduler）"></a>调度器（Scheduler）</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401031011165.webp" alt="image-20240103101114859"></p><ul><li>如果系统支持内核级线程的话， 那么调度的基本单位就是内核级的线程</li></ul><h4 id="闲逛进程"><a href="#闲逛进程" class="headerlink" title="闲逛进程"></a>闲逛进程</h4><ul><li>优先级最低</li><li>反复的执行0地址指令，占用一个完整的指令周期</li><li>能耗低</li></ul><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h3 id="一些进程的评价公式"><a href="#一些进程的评价公式" class="headerlink" title="一些进程的评价公式"></a>一些进程的评价公式</h3><ul><li><p>CPU利用率</p></li><li><p>系统吞吐量</p></li><li><p>周转时间</p></li><li><p>带权周转时间</p></li><li><p>等待时间</p></li><li><p>响应时间 ： 用户提交请求到首次产生响应所用的时间</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401031019954.webp" alt="image-20240103101919686"></p><h2 id="调度算法"><a href="#调度算法" class="headerlink" title="调度算法"></a>调度算法</h2><h3 id="先来先服务方式"><a href="#先来先服务方式" class="headerlink" title="先来先服务方式"></a>先来先服务方式</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401031201067.webp" alt="image-20240103120103601"></p><ul><li>对长作业有利， 对短作业无力</li></ul><h3 id="短进程优先算法"><a href="#短进程优先算法" class="headerlink" title="短进程优先算法"></a>短进程优先算法</h3><ul><li>SJF （非抢占式）</li></ul><p>每次调度选择当前已经到达的且运行时间最短的作业</p><ul><li>SRTN （抢占式）</li></ul><p>每当有新的进程进入就绪队列的时候，就需要重新使用调度算法</p><h3 id="高响应比优先（HRRN）-（非抢占式）"><a href="#高响应比优先（HRRN）-（非抢占式）" class="headerlink" title="高响应比优先（HRRN） （非抢占式）"></a>高响应比优先（HRRN） （非抢占式）</h3><ul><li>抉择策略</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401031213897.webp" alt="image-20240103121332730"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202401031214088.webp" alt="image-20240103121433676"></p><h2 id="调度算法（二）"><a href="#调度算法（二）" class="headerlink" title="调度算法（二）"></a>调度算法（二）</h2><h3 id="时间片轮转调算法（RR）"><a href="#时间片轮转调算法（RR）" class="headerlink" title="时间片轮转调算法（RR）"></a>时间片轮转调算法（RR）</h3><h3 id="优先级调度算法"><a href="#优先级调度算法" class="headerlink" title="优先级调度算法"></a>优先级调度算法</h3><h3 id="调度算法-1"><a href="#调度算法-1" class="headerlink" title="调度算法"></a>调度算法</h3>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务项目-oj</title>
      <link href="/2023/11/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE-%E9%BB%91%E9%A9%AC/"/>
      <url>/2023/11/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE-%E9%BB%91%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[<h1 id="杂项问题"><a href="#杂项问题" class="headerlink" title="杂项问题"></a>杂项问题</h1><p><a href="https://www.alanyaeer.fun/2023/12/09/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AD%A6%E4%B9%A0/">微服务学习 | Hao的空间🥝 (alanyaeer.fun)</a></p><p><a href="https://www.alanyaeer.fun/2023/11/08/docker%E7%9A%84%E5%90%84%E7%A7%8D%E9%85%8D%E7%BD%AE/">docker的配置 | Hao的空间🥝 (alanyaeer.fun)</a></p><p><a href="https://www.alanyaeer.fun/2023/11/12/%E7%88%B6%E5%AD%90%E5%B7%A5%E7%A8%8B%E7%9A%84maven%E6%89%93%E5%8C%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/">父子工程的maven打包注意事项 | Hao的空间🥝 (alanyaeer.fun)</a></p><h1 id="Nacos"><a href="#Nacos" class="headerlink" title="Nacos"></a>Nacos</h1><h2 id="连接不上"><a href="#连接不上" class="headerlink" title="连接不上"></a>连接不上</h2><ul><li>多半是你的那个custom.env的配置文件写错了，再看看</li></ul><h2 id="ServiceName-Blank"><a href="#ServiceName-Blank" class="headerlink" title="ServiceName Blank"></a>ServiceName Blank</h2><ul><li>你的yaml文件里面 没有配置 application的name</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">spring:</span></span><br><span class="line">  <span class="attr">application:</span></span><br><span class="line">    <span class="attr">name:</span> <span class="string">nacos-user</span></span><br></pre></td></tr></table></figure><h1 id="Springsecurity"><a href="#Springsecurity" class="headerlink" title="Springsecurity"></a>Springsecurity</h1><h2 id="接口访问权限"><a href="#接口访问权限" class="headerlink" title="接口访问权限"></a>接口访问权限</h2><h1 id="Springboot"><a href="#Springboot" class="headerlink" title="Springboot"></a>Springboot</h1><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><ul><li><p>RestController</p></li><li><p>RestMapping</p><p>下面这个才是跟路径有关的访问</p></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>如果出现400 ，说明是你的请求参数有问题看看， 你请求参数哪里出了问题。</p><h2 id="IDEA-的快捷键"><a href="#IDEA-的快捷键" class="headerlink" title="IDEA 的快捷键"></a>IDEA 的快捷键</h2><p>ctrl + shift + u 将选中的代码变成大写</p><p>ctrl + alt + m 截取代码</p><h2 id="实体类"><a href="#实体类" class="headerlink" title="实体类"></a>实体类</h2><p>@TableId</p><p>对某一个属性设置为主键</p><h2 id="MybatisPlus"><a href="#MybatisPlus" class="headerlink" title="MybatisPlus"></a>MybatisPlus</h2><h3 id="selectById"><a href="#selectById" class="headerlink" title="selectById"></a>selectById</h3><ul><li>当我们使用查询的selectById的时候</li></ul><p>如果我们没有一个名称为id的属性。这个时候， 你就会得到空</p><p>解决方法就是在对应的属性加上</p><p>这样我们就可以使用这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@TableId(&quot;user_id&quot;)</span></span><br><span class="line"><span class="keyword">private</span> userId userId;</span><br></pre></td></tr></table></figure><h3 id="bean注入循环"><a href="#bean注入循环" class="headerlink" title="bean注入循环"></a>bean注入循环</h3><p>当我们的一个service层实现了 xxservice， 但是我们又想用的时候， 我们就不需要再使用@Autowired来导入。 而是使用如下的方法</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来</span></span><br><span class="line">xxservice.update()</span><br><span class="line"><span class="comment">// 我们使用下面的方法， 就是省去了前面的service</span></span><br><span class="line">update()</span><br></pre></td></tr></table></figure><h2 id="前端时间中间带T"><a href="#前端时间中间带T" class="headerlink" title="前端时间中间带T"></a>前端时间中间带T</h2><ul><li>在时间的属性中带上这个JsonFormat标签就好</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@JsonFormat(pattern = &quot;yyyy-MM-dd HH:mm:ss&quot;, timezone = &quot;GMT+8&quot;)</span></span><br><span class="line"><span class="keyword">public</span> LocalDateTime updateTime;</span><br></pre></td></tr></table></figure><h1 id="Springgateway"><a href="#Springgateway" class="headerlink" title="Springgateway"></a>Springgateway</h1><h2 id="负载均衡错误"><a href="#负载均衡错误" class="headerlink" title="负载均衡错误"></a>负载均衡错误</h2><blockquote><p> Spring Cloud LoadBalancer is currently working with the default cache. While this cache implementation is useful for development and tests, it’s recommended to use Caffeine cache in production.You can switch to using Caffeine cache, by adding it and org.springframework.cache.caffeine.CaffeineCacheManager to the classpath.</p></blockquote><ul><li>这里官方的意思是不建议在生成环境中使用 默认的负载均衡器， 需要引入这个依赖</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;com.github.ben-manes.caffeine&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;caffeine&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">2.8</span><span class="number">.8</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>具体原因参考</li></ul><p><a href="https://juejin.cn/post/7077448034358935559">SpringCloudGateway关于Cache的警告你关注过吗 - 掘金 (juejin.cn)</a></p><h2 id="与springweb的jar包冲突"><a href="#与springweb的jar包冲突" class="headerlink" title="与springweb的jar包冲突"></a>与springweb的jar包冲突</h2><blockquote><p>gateway整合springboot jar包冲突，Please set spring.main.web-application-type&#x3D;reactive or remove spring-boo</p></blockquote><ul><li>解决方法， 寻找你引入的包， 或者父项目中是否导入了spring.web的jar包</li></ul><h1 id="Openfeign"><a href="#Openfeign" class="headerlink" title="Openfeign"></a>Openfeign</h1><h2 id="请求只有部分获取到了"><a href="#请求只有部分获取到了" class="headerlink" title="请求只有部分获取到了"></a>请求只有部分获取到了</h2><ul><li>使用openfeign的时候， 发三次请求， 只有 一两次请求， 可以接受的到。</li><li>原来是 服务a的 服务名和 服务b的服务名写成同一个了， 所以 服务a发送请求的时候， 可能会把从服务b中拉取服务</li></ul><h2 id="传入字符串得到为null"><a href="#传入字符串得到为null" class="headerlink" title="传入字符串得到为null"></a>传入字符串得到为null</h2><ul><li>不知道为什么， 但是在api模块的对应的参数那边加上 <code>@RequestParam(&quot;titleId&quot;)</code> 这句话就不会是null了</li></ul><h2 id="项目快速部署"><a href="#项目快速部署" class="headerlink" title="项目快速部署"></a>项目快速部署</h2><h3 id="前端部署"><a href="#前端部署" class="headerlink" title="前端部署"></a>前端部署</h3><p>跟着这个流程，把nginx配置好 （如果之前已经弄好了，就只需要修改 default.conf文件）</p><p><a href="https://cloud.tencent.com/developer/article/2015581">Docker 安装Nginx容器 (完整详细版)-腾讯云开发者社区-腾讯云 (tencent.com)</a></p><ul><li><p><strong>上传静态资源到html文件夹中</strong></p></li><li><p>修改 default.conf文件</p><ul><li><p>一般情况下， 我们只需要修改 下面几个地方</p></li><li><p>第一处的 location &#x2F;</p></li></ul></li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">location / &#123;</span><br><span class="line"># proxy_set_header xxx 如果你需要添加请求头 (ginx 默认是不会转发请求头的)</span><br><span class="line">    # 下面的内容不要动</span><br><span class="line">    root   /usr/share/nginx/html;</span><br><span class="line">    index  index.html index.htm;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>第二处修改 我们要修改发送给后端的地方</li></ul><figure class="highlight text"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> location /api/ &#123;</span><br><span class="line"> # 修改下面这些地方</span><br><span class="line">    proxy_pass http://192.125.153.28:11451/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="部分页面刷新404"><a href="#部分页面刷新404" class="headerlink" title="部分页面刷新404"></a>部分页面刷新404</h3><ul><li><p>这是因为你使用vue3的 history 模式， 正确的做法是</p><ul><li><p>第一步， 修改vite.config.js </p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="title function_">defineConfig</span>(&#123;</span><br><span class="line">    <span class="attr">base</span>: <span class="string">&#x27;/&#x27;</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li><li><p>第二步， 修改nginx配置</p></li></ul><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">location</span> / &#123;</span><br><span class="line">    <span class="comment"># 这个root需要根据你的静态资源文件地址进行修改</span></span><br><span class="line">    <span class="attribute">root</span>   /usr/share/nginx/html;</span><br><span class="line">    <span class="attribute">index</span>  index.html index.htm;</span><br><span class="line">    <span class="attribute">try_files</span> <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br><span class="line">&#125;</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>docker restart nginx 或者是 其他重启的方式即可</li></ul></li></ul><h3 id="后端微服务部署"><a href="#后端微服务部署" class="headerlink" title="后端微服务部署"></a>后端微服务部署</h3><h4 id="打包的配置"><a href="#打包的配置" class="headerlink" title="打包的配置"></a>打包的配置</h4><p>具体可以看这个跟着他做行了 </p><p><a href="https://developer.aliyun.com/article/1204325">微服务项目打包部署，一套带走 上 -阿里云开发者社区 (aliyun.com)</a></p><p>如果说什么测试报错， 直接把测试类注释掉即可</p><h4 id="mybatis的问题"><a href="#mybatis的问题" class="headerlink" title="mybatis的问题"></a>mybatis的问题</h4><ul><li>首先 mapper 文件需要放在resource文件夹下面， 不然到时候打包就会出现问题</li><li>第二 mapper 函数里面， 如果涉及有多个参数的时候， 需要再参数前面加上@Param，不然会找不到这个字段</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202402041034258.webp" alt="image-20240204103429023"></p><h4 id="多台服务器出现的一些问题"><a href="#多台服务器出现的一些问题" class="headerlink" title="多台服务器出现的一些问题"></a>多台服务器出现的一些问题</h4><ul><li>现在我出现了一个问题， 因为内存不足， 所以需要把 服务a b c 放在服务器B， 服务d， e需要放在服务器A， 但是上线部署之后就会出现问题不少问题</li><li>实际上， 这是因为我们没有配置服务的nacos 地址， 所以我们需要再 配置文件中进行修改就好了</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202402041036735.webp" alt="image-20240204103639628"></p>]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> springcloud </tag>
            
            <tag> minio </tag>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springsecurity的学习</title>
      <link href="/2023/11/12/springsecurity%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/11/12/springsecurity%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="版本需求"><a href="#版本需求" class="headerlink" title="版本需求"></a>版本需求</h2><blockquote><p><strong>jdk 1.8</strong>   <strong>springboot</strong> <strong>2.5.0 ~ 2.7.x</strong>（不能超过2.7.x）</p><p>当然这里下面的一些配置是会受到上面版本的影响， 具体的改动需要后续查找</p></blockquote><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>首先随便写一个controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.springsecurity.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后启动服务， 发现你要访问这个地方会被拦截</li></ul><h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><blockquote><p>认证的基本流程</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122045074.png" alt="在这里插入图片描述"></p><h2 id="三个重要的过滤器"><a href="#三个重要的过滤器" class="headerlink" title="三个重要的过滤器"></a>三个重要的过滤器</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122046621.png" alt="在这里插入图片描述"></p><ul><li><p>UsernamePasswordAuthenticationFilter:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p></li><li><p>ExceptionTranslationFilter： 处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p></li><li><p>FilterSecurityInterceptor： 负责权限校验的过滤器。</p></li><li><p>其他的过滤链条执行的顺序为如下（这里只是引入了springsecurity的依赖包之后的过滤链）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311142300110.png" alt="在这里插入图片描述"></p></li></ul><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><ul><li><p>认证图</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311142301878.png" alt="在这里插入图片描述"></p></li><li><p>概念</p><blockquote><p>Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p><p>AuthenticationManager接口：定义了认证Authentication的方法</p><p>UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</p><p>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p></blockquote></li><li><p>再对 securityConfig 的时候， 我门可以这么操作， 使得 <strong>jwtAuthenticationTokenFilter</strong> <strong>UsernamePasswordAuthenticationFilter</strong>的前面 </p><p><code> http.addFilterBefore(jwtAuthenticationTokenFilter , UsernamePasswordAuthenticationFilter.class);</code></p></li><li><pre><code>// 实现对密码的加密@Beanpublic PasswordEncoder passwordEncoder()&#123;    return new BCryptPasswordEncoder();&#125;// 对BCryptPasswordEncoder加密的小测试@Autowiredprivate UserMapper userMapper;@Testpublic void TestBCryptPasswordEncoder() &#123;BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();boolean matches = bCryptPasswordEncoder.matches(&quot;1234&quot;, &quot;$2a$10$z8ZrqoQ38.N.flqHDjT7vuULL1XrKCiNX2pr0wkVa9.TpaJ3x..Py&quot;);System.out.println(matches);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">* 后面的发送的请求， 需要携带 token参数来访问信息。 当你携带又token的时候就会进入到这里的认证流程。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 认证失败的处理</span><br><span class="line"></span><br><span class="line">![image-20231115150254803](https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311151502932.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注解 hasAnyAuthority 可以传入多个字符串 （hasAuthority 只能传入一个字符串）。 还有hasRole 等等可以点击权限里面就会看到了</span><br><span class="line"></span><br><span class="line">![image-20231115154701058](https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311151547118.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 自定义权限校验方法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.example.learn.expression;</span><br><span class="line"></span><br><span class="line">import com.example.learn.entity.LoginUser;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 吴嘉豪</span><br><span class="line"> * @date 2023/11/15 16:01</span><br><span class="line"> */</span><br><span class="line">@Component(&quot;ex&quot;)</span><br><span class="line"></span><br><span class="line">public class SGExpressionRoot &#123;</span><br><span class="line">    public boolean hasAuthority(String authority)&#123;</span><br><span class="line">        // 获取当前用户的权限</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        LoginUser  loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class="line"></span><br><span class="line">        // 判断用户权限集合中是否存在authority</span><br><span class="line">        return permissions.contains(authority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li><li><p>修改注解代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于配置的校验方式"><a href="#基于配置的校验方式" class="headerlink" title="基于配置的校验方式"></a>基于配置的校验方式</h3><ul><li>我们可以再之前的配置类中 定义这个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/testCors&quot;</span>).hasAuthority(<span class="string">&quot;system:dept:list&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><ul><li>什么叫做csrf 攻击</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311151615280.png" alt="image-20231115161555105"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311151615479.png" alt="image-20231115161544412"></p><h2 id="不建议的方案"><a href="#不建议的方案" class="headerlink" title="不建议的方案"></a>不建议的方案</h2><h3 id="登录成功处理器"><a href="#登录成功处理器" class="headerlink" title="登录成功处理器"></a>登录成功处理器</h3><h3 id="登出成功处理器"><a href="#登出成功处理器" class="headerlink" title="登出成功处理器"></a>登出成功处理器</h3><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3><p>参看下面博客</p><p>[<a href="https://zhuanlan.zhihu.com/p/188753842">SpringSecurity]PasswordEncoder密码解析器详解 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springsecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>knife4j的配置</title>
      <link href="/2023/11/12/knife4j%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/11/12/knife4j%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="knife4j-配置"><a href="#knife4j-配置" class="headerlink" title="knife4j 配置"></a>knife4j 配置</h1><h2 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h2><ul><li>springboot2</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>springboot3</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>springboot2</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">黑马商城接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;黑马商城接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">zhanghuyi@itcast.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">虎哥</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.itcast.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.genshin.ojuser.controller</span></span><br></pre></td></tr></table></figure><ul><li>springboot3</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/swagger-ui.html</span></span><br><span class="line">    <span class="attr">tags-sorter:</span> <span class="string">alpha</span></span><br><span class="line">    <span class="attr">operations-sorter:</span> <span class="string">alpha</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/v3/api-docs</span></span><br><span class="line">  <span class="attr">group-configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line">      <span class="attr">paths-to-match:</span> <span class="string">&#x27;/**&#x27;</span></span><br><span class="line">      <span class="attr">packages-to-scan:</span> <span class="string">com.homework.genshinchat</span></span><br><span class="line"><span class="comment"># knife4j的增强配置，不需要增强可以不配</span></span><br><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">setting:</span></span><br><span class="line">    <span class="attr">language:</span> <span class="string">zh_cn</span></span><br></pre></td></tr></table></figure><ul><li>测试</li></ul><p><code>http://localhost:8081/doc.html#/home</code></p><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><blockquote><p>这个可以到网上找。</p></blockquote><h2 id="springmvc"><a href="#springmvc" class="headerlink" title="springmvc"></a>springmvc</h2><ul><li>如果你的项目是一个springmvc项目，那么需要下面这么做</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.itheima.reggie_take_out.config;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.itheima.reggie_take_out.common.JacksonObjectMapper;</span><br><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.http.converter.json.MappingJackson2HttpMessageConverter;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.ResourceHandlerRegistry;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.servlet.config.annotation.WebMvcConfigurationSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="comment">//import org.springframework.web.servlet.config.annotation.WebMvcConfigurer;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">WebMvcConfig</span> <span class="keyword">extends</span> <span class="title class_">WebMvcConfigurationSupport</span> &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * 设置静态资源映射</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@param</span> registry</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">addResourceHandlers</span><span class="params">(ResourceHandlerRegistry registry)</span> &#123;</span><br><span class="line">        log.info(<span class="string">&quot;开始进行静态资源服务&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/backend/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/backend/&quot;</span>);</span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;/front/**&quot;</span>).addResourceLocations(<span class="string">&quot;classpath:/front/&quot;</span>);</span><br><span class="line">        <span class="comment">//registry.addResourceHandler(&quot;/swagger-ui.html/**&quot;).addResourceLocations(&quot;classpath:/swagger-ui.html/&quot;);</span></span><br><span class="line">        registry.addResourceHandler(<span class="string">&quot;doc.html&quot;</span>)</span><br><span class="line">                .addResourceLocations(<span class="string">&quot;classpath:/META-INF/resources/&quot;</span>);</span><br><span class="line">        <span class="keyword">if</span> (!registry.hasMappingForPattern(<span class="string">&quot;/webjars/**&quot;</span>)) &#123;</span><br><span class="line">            registry.addResourceHandler(<span class="string">&quot;/webjars/**&quot;</span>).addResourceLocations(</span><br><span class="line">                    <span class="string">&quot;classpath:/META-INF/resources/webjars/&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">extendMessageConverters</span><span class="params">(List&lt;HttpMessageConverter&lt;?&gt;&gt; converters)</span> &#123;</span><br><span class="line">        <span class="comment">// 创建消息转换器对象</span></span><br><span class="line">        <span class="type">MappingJackson2HttpMessageConverter</span> <span class="variable">messageConverter</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">MappingJackson2HttpMessageConverter</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//设置对象转换器， 底层使用 Jackson将java对象转换为 json</span></span><br><span class="line">        messageConverter.setObjectMapper(<span class="keyword">new</span> <span class="title class_">JacksonObjectMapper</span>());</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 将上面的消息转换器追加到mvc框架的转换器集合中</span></span><br><span class="line">        converters.add(<span class="number">0</span>, messageConverter);</span><br><span class="line">        <span class="comment">// super.extendMessageConverters(converters);</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>配置前</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312022210455.webp" alt="image-20231202221034183"></p><p>出现空白页</p><p>发现是被拦截了</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312022211238.webp" alt="image-20231202221135125"></p><p>那么放开这个&#x2F;webjars 对应的拦截就好了</p><p><code>&quot;/webjars/css/chunk-296622eb.20e6d994.css&quot;</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">&quot;/swagger-ui.html/**&quot;</span>,</span><br><span class="line"><span class="string">&quot;/Swagger-ui.html/**&quot;</span>,</span><br><span class="line"><span class="string">&quot;/doc.html/**&quot;</span>,</span><br><span class="line"><span class="string">&quot;/v2/**&quot;</span>,</span><br><span class="line"><span class="string">&quot;/webjars/**&quot;</span>,</span><br><span class="line"><span class="string">&quot;/swagger-resources/**&quot;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
            <tag> knife4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子工程的maven打包注意事项</title>
      <link href="/2023/11/12/%E7%88%B6%E5%AD%90%E5%B7%A5%E7%A8%8B%E7%9A%84maven%E6%89%93%E5%8C%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2023/11/12/%E7%88%B6%E5%AD%90%E5%B7%A5%E7%A8%8B%E7%9A%84maven%E6%89%93%E5%8C%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是我边学边写的maven笔记， 所以可能会存在问题</p></blockquote><h1 id="父工程的pom定义"><a href="#父工程的pom定义" class="headerlink" title="父工程的pom定义"></a>父工程的pom定义</h1><h2 id="properties-标签"><a href="#properties-标签" class="headerlink" title="properties 标签"></a>properties 标签</h2><blockquote><p> 这个标签是用来统一管理 jar包的版本， 使用这种方式相当于给版本号声明了一个变量</p></blockquote><p>具体为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里的xxx代表你给版本取得名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xxxx</span>&gt;</span> 8.0.23 <span class="tag">&lt;/<span class="name">xxxx</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实战 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.projectlombok.version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">org.projectlombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.8.11<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用8.0.x 依旧可以用5.7的数据库访问--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后再下面的依赖包， 就可以通过</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的xxxx代表的就是上面的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xxxx&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实战 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="modules-标签"><a href="#modules-标签" class="headerlink" title="modules 标签"></a>modules 标签</h2><blockquote><p>代表需要被放入的子标签</p></blockquote><p>这里 <strong>oj-user</strong> 代表的是ArtifactId</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>oj-user<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="packing-标签"><a href="#packing-标签" class="headerlink" title="packing 标签"></a>packing 标签</h2><blockquote><p>在父级项目中的pom.xml文件使用的packaging配置一定为pom</p><p>如果没有特别指定这个标签的话， 那么默认就是jar 包， 所以这个标签一定要写上去</p><p>当然还有war 之类， 但是我这里就讨论上面两种就好了</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="dependencyManagement-标签"><a href="#dependencyManagement-标签" class="headerlink" title="dependencyManagement 标签"></a>dependencyManagement 标签</h2><blockquote><p>使用dependencyManagement可以统一管理项目的版本号，确保应用的各个项目的依赖和版本一致, 这样子模块和父模块就可以用到相同的版本了</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 具体样式如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="子工程的pom定义"><a href="#子工程的pom定义" class="headerlink" title="子工程的pom定义"></a>子工程的pom定义</h1><h2 id="parent-标签"><a href="#parent-标签" class="headerlink" title="parent 标签"></a>parent 标签</h2><blockquote><p>再项目创建之前， 默认的parent标签是springboot的， 但是我们是父子工程需要交换</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这是原本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--直接把上面的删掉，需要将parent修改为父模块--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里的groupId和artifactId，version 换成父模块的就好了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jar包 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger学习记录</title>
      <link href="/2023/11/11/Swagger%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/11/11/Swagger%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文部分内容是从这里获得</p><p><a href="https://blog.csdn.net/qq_43521797/article/details/115835771">Swagger3.0介绍及springboot整合Swagger3.0_swagger 3.0-CSDN博客</a></p></blockquote><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><h2 id="Springboot3-变化"><a href="#Springboot3-变化" class="headerlink" title="Springboot3 变化"></a>Springboot3 变化</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311111635850.png" alt="img"></p><h1 id="查看api的地址"><a href="#查看api的地址" class="headerlink" title="查看api的地址"></a>查看api的地址</h1><ul><li>springboot3</li></ul><p><code>http://localhost:8080/swagger-ui/index.html</code></p><ul><li>springboot2</li></ul><p><code>http://localhost:8080/swagger-ui.html</code></p><h1 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h1><blockquote><p>这个需要根据根据你的springboot 版本来决定版本的 </p></blockquote><ul><li>如果你是 springboot3</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果你是springboot2</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--swagger ui--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a>application.yaml</h1><p>只有springboot3 需要这一步</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/swagger-ui.html</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.hexadecimal:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><ul><li>springboot2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">            <span class="type">Profiles</span> <span class="variable">profiles</span> <span class="operator">=</span> Profiles.of(<span class="string">&quot;pro&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> environment.acceptsProfiles(profiles);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                    .apiInfo(apiInfo())</span><br><span class="line">                    .enable(!flag)</span><br><span class="line">                    .select()</span><br><span class="line">                <span class="comment">//这里需要修改名称 </span></span><br><span class="line">                    .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.history.controller&quot;</span>))</span><br><span class="line">                    .paths(PathSelectors.any())</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">              <span class="comment">//这里时你的标题</span></span><br><span class="line">                    .title(<span class="string">&quot;阁中汗青小程序&quot;</span>)</span><br><span class="line">                    .description(<span class="string">&quot;接口说明&quot;</span>)</span><br><span class="line">                    .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                    <span class="comment">// 作者信息</span></span><br><span class="line">                    .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;宇神&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>springboot3</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.ExternalDocumentation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.License;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">springShopOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>().title(<span class="string">&quot;标题&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;我的API文档&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>)))</span><br><span class="line">                .externalDocs(<span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">                        .description(<span class="string">&quot;外部文档&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>剩下这些可以自行去网上搜索， 不同版本的语法不同</p></blockquote><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><blockquote><p>这里的控制类 @Api ，tags 为类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;文章模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h1><blockquote><p>这类似乎不用写</p></blockquote><h1 id="Dto"><a href="#Dto" class="headerlink" title="Dto"></a>Dto</h1><blockquote><p>模块类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(description = &quot;前端传过来的创作实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LiteraryDto</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea打jar包失败</title>
      <link href="/2023/11/11/idea%E6%89%93jar%E5%8C%85%E5%A4%B1%E8%B4%A5/"/>
      <url>/2023/11/11/idea%E6%89%93jar%E5%8C%85%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><h2 id="META—INF-以及-找不到主类"><a href="#META—INF-以及-找不到主类" class="headerlink" title="META—INF 以及 找不到主类"></a>META—INF 以及 找不到主类</h2><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><blockquote><p>如果你打开META-INF 发现你主类就是对的，或者你发现的你的 jar包打出异常的小</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311110012758.png" alt="image-20231111001245714"></p><p>说实话我一个springboot 项目各种依赖加起来绝对不止那么小</p><p>你可以新建立一个springboot 项目（没错新建立一个） ，然后打jar ，如果出现了上面的问题 。 可以继续往下看了</p><p>那么推测 是你的<strong>springboot 版本太低</strong>了 。 如何修改你的springboot 版本。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>新建立一个项目 ， 然后把 点击打红圈 哪里的一个设置按钮</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311110014789.png" alt="image-20231111001427737"></p><p><strong>修改为</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://start.spring.io</span><br></pre></td></tr></table></figure><ul><li><p>然后重新建立一个项目， 把你原本项目迁移过去就好了</p></li><li><p>如果你在升级springboot3 时遇到了 一些依赖问题 参考我<a href="https://www.alanyaeer.fun/2023/11/10/jakarta-websocket-DeploymentException%E6%8A%A5%E9%94%99/">项目升级遇到的各种bug</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot项目升级的问题</title>
      <link href="/2023/11/10/jakarta-websocket-DeploymentException%E6%8A%A5%E9%94%99/"/>
      <url>/2023/11/10/jakarta-websocket-DeploymentException%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="项目升级记录"><a href="#项目升级记录" class="headerlink" title="项目升级记录"></a>项目升级记录</h1><h2 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h2><h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><blockquote><p>在我升级项目为 springboot3 之后， 就出现了 : <code>org.springframework.web.socket.server.standard.ServerEndpointExporter: Factory method \&#39;serverEndpointExporter\&#39; threw exception with message: jakarta/websocket/DeploymentException</code></p></blockquote><ul><li>奇怪的是我之前在springboot2 是没有这个问题的🤕</li></ul><p>所以我就猜测是不是跟websocket 有关的 依赖是不是版本太低了 </p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote><p> 将所有 WebsocketServer（反正就是websocket 业务的地方） 中 导入包为 javax.xxx 都修改为 jakarta.xxx。这是因为 springboot3 的升级, 对了， 其实 所有的javax.servlet 也要换成jakarta.servlet（可以注意看看你controller层有没有遇到这个问题）</p></blockquote><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><ul><li>首先引入正确的依赖 jar 包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改导入的包名称"><a href="#修改导入的包名称" class="headerlink" title="修改导入的包名称"></a>修改导入的包名称</h4><p>将 javax注释了</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311102352024.png" alt="image-20231110235233478"></p><p>换成下面三位兄弟</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311102353763.png" alt="image-20231110235315740"></p><p>然后就可以正常运行了</p><h2 id="Mybatisplus"><a href="#Mybatisplus" class="headerlink" title="Mybatisplus"></a>Mybatisplus</h2><h3 id="错误原因-1"><a href="#错误原因-1" class="headerlink" title="错误原因"></a>错误原因</h3><blockquote><p> java.lang.IllegalArgumentException: Property ‘sqlSessionFactory’ or ‘sqlSessionTemplate’ are required  </p><p> Error creating bean with name ‘commonController’: Unsatisfied dependency expressed through field ‘messageService’: Error creating bean with name ‘messageServiceImpl’: Unsatisfied dependency expressed through field ‘baseMapper’: Error creating bean with name ‘messageMapper’ defined in file </p></blockquote><p>大概就是这些问题 但是之前是没有的 。 尝试了 网上 给 启动类加上 MapperScanner也无济于事， 实际上就是版本问题</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>这是我原本的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把这个 version 版本换成 <strong>3.5.3.1</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行发现 解决问题</p><h2 id="版本问题"><a href="#版本问题" class="headerlink" title="版本问题"></a>版本问题</h2><ul><li>如果使用 jdk21 的话， 如果出现了</li></ul><p>Class com.sun.tools.javac.tree.JCTree$JCImport does not have member field ‘com.sun.tools.</p><p>那么请检查你的jdk 版本和你允许的版本是否一致， 比如， 我这设置了运行是1.8， 但是一开始创建的时候jdk为21</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的配置</title>
      <link href="/2023/11/08/docker%E7%9A%84%E5%90%84%E7%A7%8D%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/11/08/docker%E7%9A%84%E5%90%84%E7%A7%8D%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<iframe src="//player.bilibili.com/player.html?aid=1052803917&bvid=BV1qH4y1T7yF&cid=1498434807&p=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" height="500" width="500"> </iframe><h1 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 端口号根据自己的情况来修改，我已经有了一个3306的端口了，所以就不搞其他端口了</span></span><br><span class="line">docker run -p 3306:3306 \</span><br><span class="line">  -e MYSQL_ROOT_PASSWORD=114514 \</span><br><span class="line">  --name mysql -d mysql:5.7</span><br><span class="line">  </span><br><span class="line"><span class="comment"># 外部访问配置, 一般来说你用docker它就设置了外部访问的权限了</span></span><br><span class="line"><span class="comment"># 当然保险起见我们这里在设置一遍</span></span><br><span class="line"></span><br><span class="line">docker <span class="built_in">exec</span> -it mysql:8.0 bash</span><br><span class="line"></span><br><span class="line">mysql -u root -p</span><br><span class="line"><span class="comment">#输入你的密码</span></span><br><span class="line">use mysql;</span><br><span class="line"><span class="keyword">select</span> user,host,plugin from user;</span><br><span class="line"></span><br><span class="line">update user <span class="built_in">set</span> host = <span class="string">&#x27;%&#x27;</span> <span class="built_in">where</span> user = <span class="string">&#x27;root&#x27;</span>;</span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line">docker run --name nginx -p 80:80 -d nginx</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/nginx/conf.d</span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/nginx/html</span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/nginx/logs</span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/nginx/conf</span><br><span class="line"></span><br><span class="line">// 这里文件可以直接原名， 但是 文件夹必须是上一级目录 </span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf /docker/nginx/conf/nginx.conf</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/conf.d /docker/nginx</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/usr/share/nginx/html /docker/nginx</span><br><span class="line"></span><br><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 需要注意这里的docker 和 宿主机 是相互对应的 </span><br><span class="line"></span><br><span class="line">docker run  -p 80:80 --name nginx --restart=always -v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf  -v /docker/nginx/conf.d:/etc/nginx/conf.d  -v /docker/nginx/html:/usr/share/nginx/html  -v /docker/nginx/logs:/var/log/nginx  -d  nginx</span><br><span class="line"></span><br><span class="line">要修改配置文件 /docker/conf.d/conf.d/default.conf</span><br><span class="line">如果vue 使用了 <span class="built_in">history</span>模式， 那么需要在location/ 写入下面这句话</span><br><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br></pre></td></tr></table></figure><blockquote><p>最后将你自己的index.html放入到 &#x2F;docker&#x2F;nginx下面，然后输入你的ip地址就可以看到了</p></blockquote><h1 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 --name tomcat -d tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到tomcat里面</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不知道为什么docker 里面的 html文件是再webapps.dist下面的。</span></span><br><span class="line"><span class="built_in">rm</span> -rf webapps</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> webapps.dist webapps</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 这是我的个人建立的习惯， 你也可以另外建立其他文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/tomcat/webapps/ROOT</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> tomcat:/usr/local/tomcat/webapps/ROOT /docker/tomcat/webapps</span><br><span class="line"></span><br><span class="line"><span class="comment">#成功之后</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /docker/tomcat/webapps</span><br><span class="line">tree </span><br><span class="line"><span class="comment"># 看一下是否复制过来</span></span><br><span class="line"></span><br><span class="line">docker stop tomcat</span><br><span class="line">docker <span class="built_in">rm</span> tomcat</span><br><span class="line"></span><br><span class="line">docker run -p 5173:5173 --name tomcat  -v /docker/tomcat/webapps:/usr/local/tomcat/webapps/ROOT -d tomcat</span><br></pre></td></tr></table></figure><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先， 先弄一个临时的镜像下来</span></span><br><span class="line">docker run -p 6379:6379 --name redis -d redis:7.0.12 </span><br><span class="line"><span class="comment"># 建立数据卷映射</span></span><br><span class="line"><span class="built_in">cd</span> /opt/docker/redis</span><br><span class="line"><span class="built_in">touch</span> redis.conf</span><br><span class="line"><span class="built_in">mkdir</span> data</span><br><span class="line"></span><br><span class="line"><span class="comment">#还有执行这个命令</span></span><br><span class="line"><span class="comment">#修改内存分配策略</span></span><br><span class="line"><span class="comment">#在这里</span></span><br><span class="line">vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 改成下面这一坨</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">net.ipv4.ip_forward = 0</span><br><span class="line">net.ipv4.conf.default.rp_filter = 1</span><br><span class="line">net.ipv4.conf.default.accept_source_route = 0</span><br><span class="line">kernel.core_uses_pid = 1</span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">kernel.msgmnb = 65536</span><br><span class="line"></span><br><span class="line">kernel.msgmax = 65536</span><br><span class="line"></span><br><span class="line">net.ipv4.conf.all.promote_secondaries = 1</span><br><span class="line">net.ipv4.conf.default.promote_secondaries = 1</span><br><span class="line">net.ipv6.neigh.default.gc_thresh3 = 4096</span><br><span class="line">net.ipv4.neigh.default.gc_thresh3 = 4096</span><br><span class="line">net.core.somaxconn = 1024</span><br><span class="line">kernel.softlockup_panic = 1</span><br><span class="line">net.ipv6.conf.all.disable_ipv6=0</span><br><span class="line">net.ipv6.conf.default.disable_ipv6=0</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6=0</span><br><span class="line">kernel.numa_balancing = 0</span><br><span class="line">kernel.shmmax = 68719476736</span><br><span class="line">kernel.printk = 5</span><br><span class="line">net.ipv4.ip_forward=1</span><br><span class="line">kernel.sysrq = 1</span><br><span class="line">vm.overcommit_memory = 1</span><br><span class="line">~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 到此为止</span></span><br><span class="line"></span><br><span class="line">sysctl vm.overcommit_memory=1</span><br><span class="line"><span class="comment"># 关闭 SElinux </span></span><br><span class="line">vim /etc/selinux/config</span><br><span class="line"><span class="comment"># 改成下面这个</span></span><br><span class="line">SELINUX=permissive</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line">-d \</span><br><span class="line">--name redis \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">--restart unless-stopped \</span><br><span class="line">-v /docker/redis/data:/data \</span><br><span class="line">-v /docker/redis/conf/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">redis:7.0.12</span><br><span class="line">redis-server /etc/redis/redis.conf \</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">sudo <span class="built_in">mkdir</span> /docker/redis</span><br><span class="line">sudo <span class="built_in">mkdir</span> /docker/redis/data</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment">#注释掉这部分，使redis可以外部访问</span></span><br><span class="line">daemonize no<span class="comment">#这里为什么不用yes， 因为守护进程的话，等一下 docker ps 看不到 redis是否运行</span></span><br><span class="line">requirepass 你的密码<span class="comment">#给redis设置密码</span></span><br><span class="line">appendonly <span class="built_in">yes</span><span class="comment">#redis持久化　　默认是no</span></span><br><span class="line">tcp-keepalive 300 <span class="comment">#防止出现远程主机强迫关闭了一个现有的连接的错误 默认是300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#还有执行这个命令</span></span><br><span class="line"><span class="comment">#在这里</span></span><br><span class="line">/etc/sysctl.conf</span><br><span class="line">vm.overcommit_memory = 1</span><br><span class="line"></span><br><span class="line">docker run --restart=always \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">--name redis \</span><br><span class="line">-v /opt/docker/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /opt/docker/redis/data:/data \</span><br><span class="line">-d redis:7.0.12 \</span><br><span class="line">redis-server /etc/redis/redis.conf</span><br><span class="line"> </span><br><span class="line"> <span class="comment">#遇到这个问题 Fatal error loading the DB: Invalid argument. Exiting</span></span><br><span class="line"> find / -name dump.rdb</span><br><span class="line">  <span class="comment">#到对应的位置</span></span><br><span class="line"> <span class="built_in">cd</span> </span><br><span class="line"></span><br><span class="line"> <span class="built_in">rm</span> -rf dump.rdb</span><br><span class="line"><span class="comment">#然后</span></span><br><span class="line">docker restart redis、</span><br></pre></td></tr></table></figure><h1 id="rabbitmq"><a href="#rabbitmq" class="headerlink" title="rabbitmq"></a>rabbitmq</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">// 获取镜像</span><br><span class="line">docker pull rabbitmq:3.8</span><br><span class="line"></span><br><span class="line">docker run \</span><br><span class="line"> -e RABBITMQ_DEFAULT_USER=root \</span><br><span class="line"> -e RABBITMQ_DEFAULT_PASS=root \</span><br><span class="line"> -v mq-plugins:/plugins \</span><br><span class="line"> --name mq \</span><br><span class="line"> --hostname mq \</span><br><span class="line"> -p 15672:15672 \</span><br><span class="line"> -p 5672:5672 \</span><br><span class="line"> -d \</span><br><span class="line"> rabbitmq:3.8</span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 进入到容器里面</span></span><br><span class="line"> </span><br><span class="line"> <span class="comment"># 然后粘贴下面这句话</span></span><br><span class="line"> rabbitmq-plugins <span class="built_in">enable</span> rabbitmq_management</span><br></pre></td></tr></table></figure><h1 id="Minio"><a href="#Minio" class="headerlink" title="Minio"></a>Minio</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment"># 第一个端口号是Minio服务的端口号，第二个端口号是界面的端口号</span></span><br><span class="line">docker run -d -p 9000:9000 -p 44619:44619 --name minio \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_USER=minioroot&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;MINIO_ROOT_PASSWORD=minioroot&quot;</span> \</span><br><span class="line">  -v /mnt/data:/data \</span><br><span class="line">  -v /mnt/config:/root/.minio \</span><br><span class="line">  minio/minio server --console-address <span class="string">&quot;:44619&quot;</span> /data </span><br><span class="line">  </span><br><span class="line"><span class="comment"># 检验是否成功 自己上网测测就好了</span></span><br></pre></td></tr></table></figure><h1 id="nacos"><a href="#nacos" class="headerlink" title="nacos"></a>nacos</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br></pre></td><td class="code"><pre><span class="line">docker pull nacos/nacos-server:v2.1.0-slim</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/nacos/logs/                      <span class="comment">#新建logs目录</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /mydata/nacos/conf/<span class="comment">#新建conf目录</span></span><br><span class="line">docker run -p 8848:8848 --name nacos -d nacos/nacos-server:v2.1.0-slim</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> nacos:/home/nacos/logs/ /mydata/nacos/</span><br><span class="line">docker <span class="built_in">cp</span> nacos:/home/nacos/conf/ /mydata/nacos/</span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">--name nacos \</span><br><span class="line">-e JVM_XMS=256m \</span><br><span class="line">-e JVM_XMX=256m \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-v /mydata/nacos/logs/:/home/nacos/logs \</span><br><span class="line">-v /mydata/nacos/conf/:/home/nacos/conf/ \</span><br><span class="line">-p 8848:8848 \</span><br><span class="line">-p 9848:9848 \</span><br><span class="line">-p 9849:9849 \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server:v2.1.0-slim</span><br><span class="line"></span><br><span class="line">PREFER_HOST_MODE=hostname</span><br><span class="line">MODE=standalone</span><br><span class="line">SPRING_DATASOURCE_PLATFORM=mysql</span><br><span class="line">MYSQL_SERVICE_HOST=</span><br><span class="line">MYSQL_SERVICE_DB_NAME=nacos</span><br><span class="line">MYSQL_SERVICE_PORT=3306</span><br><span class="line">MYSQL_SERVICE_USER=root</span><br><span class="line">MYSQL_SERVICE_PASSWORD=</span><br><span class="line">MYSQL_SERVICE_DB_PARAM=characterEncoding=utf8&amp;connectTimeout=1000&amp;socketTimeout=3000&amp;autoReconnect=<span class="literal">true</span>&amp;useSSL=<span class="literal">false</span>&amp;allowPublicKeyRetrieval=<span class="literal">true</span></span><br><span class="line">~</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">oj:</span><br><span class="line">  db:</span><br><span class="line">    host: </span><br><span class="line">    name:</span><br><span class="line">    pw: </span><br><span class="line">  rd:</span><br><span class="line">    host: </span><br><span class="line">    password: </span><br><span class="line">  nacos:</span><br><span class="line">    ip: </span><br><span class="line">  minio:</span><br><span class="line">    max-file-size: 200MB</span><br><span class="line">    max-file-request: 200MB</span><br><span class="line">    end-point: </span><br><span class="line">    accesskey: minioadmin</span><br><span class="line">    secretkey: minioadmin</span><br><span class="line">    bucketName: oj-user-file</span><br><span class="line">  mq:</span><br><span class="line">    host: </span><br><span class="line">    port: 5672</span><br><span class="line">    username: root</span><br><span class="line">    pw: </span><br><span class="line">    vh: /</span><br><span class="line"></span><br><span class="line"><span class="comment"># 你需要给这个nacos连接的数据库连接上， 这个数据库必须导入下列sql</span></span><br><span class="line"></span><br><span class="line">docker run -d \</span><br><span class="line">--name nacos \ </span><br><span class="line">-p 8848:8848  -p 9848:9848 -p 9849:9849 \</span><br><span class="line">--privileged=<span class="literal">true</span> \</span><br><span class="line">-e JVM_XMS=256m \</span><br><span class="line">-e JVM_XMX=256m \</span><br><span class="line">-e MODE=standalone \</span><br><span class="line">-v /mydata/nacos/logs/:/home/nacos/logs \</span><br><span class="line">-v /mydata/nacos/conf/:/home/nacos/conf/ \</span><br><span class="line">--restart=always \</span><br><span class="line">nacos/nacos-server:v2.1.0-slim</span><br></pre></td></tr></table></figure><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">-- --------------------------------------------------------</span></span><br><span class="line"><span class="comment">-- 主机:                           192.168.150.101</span></span><br><span class="line"><span class="comment">-- 服务器版本:                        8.0.27 - MySQL Community Server - GPL</span></span><br><span class="line"><span class="comment">-- 服务器操作系统:                      Linux</span></span><br><span class="line"><span class="comment">-- HeidiSQL 版本:                  12.2.0.6576</span></span><br><span class="line"><span class="comment">-- --------------------------------------------------------</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET NAMES utf8 */</span>;</span><br><span class="line"><span class="comment">/*!50503 SET NAMES utf8mb4 */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */</span>;</span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=&#x27;+00:00&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE=&#x27;NO_AUTO_VALUE_ON_ZERO&#x27; */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出 nacos 的数据库结构</span></span><br><span class="line"><span class="keyword">DROP</span> DATABASE IF <span class="keyword">EXISTS</span> `nacos`;</span><br><span class="line"><span class="keyword">CREATE</span> DATABASE IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `nacos` <span class="comment">/*!40100 DEFAULT CHARACTER SET utf8mb4 COLLATE utf8mb4_general_ci */</span> <span class="comment">/*!80016 DEFAULT ENCRYPTION=&#x27;N&#x27; */</span>;</span><br><span class="line">USE `nacos`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_info 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text <span class="keyword">COLLATE</span> utf8_bin COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `c_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_use` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `effect` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `c_schema` text <span class="keyword">COLLATE</span> utf8_bin,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfo_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_info 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_info`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_info_aggr 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_info_aggr`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_info_aggr` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `datum_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;datum_id&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;内容&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfoaggr_datagrouptenantdatum` (`data_id`,`group_id`,`tenant_id`,`datum_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;增加租户字段&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_info_aggr 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_info_aggr`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_info_beta 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_info_beta`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_info_beta` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `beta_ips` <span class="type">varchar</span>(<span class="number">1024</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;betaIps&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text <span class="keyword">COLLATE</span> utf8_bin COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfobeta_datagrouptenant` (`data_id`,`group_id`,`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_beta&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_info_beta 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_info_beta`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_info_tag 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_info_tag`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_info_tag` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tag_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_id&#x27;</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;content&#x27;</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;md5&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  `src_user` text <span class="keyword">COLLATE</span> utf8_bin COMMENT <span class="string">&#x27;source user&#x27;</span>,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;source ip&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configinfotag_datagrouptenanttag` (`data_id`,`group_id`,`tenant_id`,`tag_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_info_tag&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_info_tag 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_info_tag`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.config_tags_relation 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `config_tags_relation`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `config_tags_relation` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `tag_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_name&#x27;</span>,</span><br><span class="line">  `tag_type` <span class="type">varchar</span>(<span class="number">64</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tag_type&#x27;</span>,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;data_id&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;group_id&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_configtagrelation_configidtag` (`id`,`tag_name`,`tag_type`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;config_tag_relation&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.config_tags_relation 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `config_tags_relation`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.group_capacity 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `group_capacity`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `group_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Group ID，空字符表示整个集群&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数，，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_group_id` (`group_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;集群、各Group容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.group_capacity 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `group_capacity`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.his_config_info 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `his_config_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `his_config_info` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `nid` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  `data_id` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `group_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `app_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;app_name&#x27;</span>,</span><br><span class="line">  `content` longtext <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `md5` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span>,</span><br><span class="line">  `src_user` text <span class="keyword">COLLATE</span> utf8_bin,</span><br><span class="line">  `src_ip` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `op_type` <span class="type">char</span>(<span class="number">10</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;租户字段&#x27;</span>,</span><br><span class="line">  `encrypted_data_key` text <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;秘钥&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`nid`),</span><br><span class="line">  KEY `idx_gmt_create` (`gmt_create`),</span><br><span class="line">  KEY `idx_gmt_modified` (`gmt_modified`),</span><br><span class="line">  KEY `idx_did` (`data_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;多租户改造&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.his_config_info 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `his_config_info`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.permissions 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `permissions`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `permissions` (</span><br><span class="line">  `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `resource` <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `action` <span class="type">varchar</span>(<span class="number">8</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_role_permission` (`role`,`resource`,`action`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.permissions 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `permissions`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.roles 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `roles`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `roles` (</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `role` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `idx_user_role` (`username`,`role`) <span class="keyword">USING</span> BTREE</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.roles 的数据：~1 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `roles`;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `roles` (`username`, `role`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;ROLE_ADMIN&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.tenant_capacity 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tenant_capacity`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `tenant_capacity` (</span><br><span class="line">  `id` <span class="type">bigint</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;主键ID&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;Tenant ID&#x27;</span>,</span><br><span class="line">  `quota` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;配额，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `usage` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;使用量&#x27;</span>,</span><br><span class="line">  `max_size` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_aggr_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;聚合子配置最大个数&#x27;</span>,</span><br><span class="line">  `max_aggr_size` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值&#x27;</span>,</span><br><span class="line">  `max_history_count` <span class="type">int</span> unsigned <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="string">&#x27;0&#x27;</span> COMMENT <span class="string">&#x27;最大变更历史数量&#x27;</span>,</span><br><span class="line">  `gmt_create` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` datetime <span class="keyword">NOT</span> <span class="keyword">NULL</span> <span class="keyword">DEFAULT</span> <span class="built_in">CURRENT_TIMESTAMP</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;租户容量信息表&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.tenant_capacity 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `tenant_capacity`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.tenant_info 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `tenant_info`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `tenant_info` (</span><br><span class="line">  `id` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> AUTO_INCREMENT COMMENT <span class="string">&#x27;id&#x27;</span>,</span><br><span class="line">  `kp` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;kp&#x27;</span>,</span><br><span class="line">  `tenant_id` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_id&#x27;</span>,</span><br><span class="line">  `tenant_name` <span class="type">varchar</span>(<span class="number">128</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="string">&#x27;&#x27;</span> COMMENT <span class="string">&#x27;tenant_name&#x27;</span>,</span><br><span class="line">  `tenant_desc` <span class="type">varchar</span>(<span class="number">256</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;tenant_desc&#x27;</span>,</span><br><span class="line">  `create_source` <span class="type">varchar</span>(<span class="number">32</span>) <span class="keyword">COLLATE</span> utf8_bin <span class="keyword">DEFAULT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;create_source&#x27;</span>,</span><br><span class="line">  `gmt_create` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;创建时间&#x27;</span>,</span><br><span class="line">  `gmt_modified` <span class="type">bigint</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span> COMMENT <span class="string">&#x27;修改时间&#x27;</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`id`),</span><br><span class="line">  <span class="keyword">UNIQUE</span> KEY `uk_tenant_info_kptenantid` (`kp`,`tenant_id`),</span><br><span class="line">  KEY `idx_tenant_id` (`tenant_id`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb3 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8_bin COMMENT<span class="operator">=</span><span class="string">&#x27;tenant_info&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.tenant_info 的数据：~0 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `tenant_info`;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 导出  表 nacos.users 结构</span></span><br><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> IF <span class="keyword">EXISTS</span> `users`;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> IF <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> `users` (</span><br><span class="line">  `username` <span class="type">varchar</span>(<span class="number">50</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `password` <span class="type">varchar</span>(<span class="number">500</span>) <span class="keyword">COLLATE</span> utf8mb4_general_ci <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  `enabled` tinyint(<span class="number">1</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">  <span class="keyword">PRIMARY</span> KEY (`username`)</span><br><span class="line">) ENGINE<span class="operator">=</span>InnoDB <span class="keyword">DEFAULT</span> CHARSET<span class="operator">=</span>utf8mb4 <span class="keyword">COLLATE</span><span class="operator">=</span>utf8mb4_general_ci;</span><br><span class="line"></span><br><span class="line"><span class="comment">-- 正在导出表  nacos.users 的数据：~1 rows (大约)</span></span><br><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> `users`;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> `users` (`username`, `password`, `enabled`) <span class="keyword">VALUES</span></span><br><span class="line">(<span class="string">&#x27;nacos&#x27;</span>, <span class="string">&#x27;$2a$10$EuWPZHzz32dJN7jexM34MOeYirDdFAZm2kuWj7VEOJhhZkDrxfvUu&#x27;</span>, <span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/*!40103 SET TIME_ZONE=IFNULL(@OLD_TIME_ZONE, &#x27;system&#x27;) */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET SQL_MODE=IFNULL(@OLD_SQL_MODE, &#x27;&#x27;) */</span>;</span><br><span class="line"><span class="comment">/*!40014 SET FOREIGN_KEY_CHECKS=IFNULL(@OLD_FOREIGN_KEY_CHECKS, 1) */</span>;</span><br><span class="line"><span class="comment">/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */</span>;</span><br><span class="line"><span class="comment">/*!40111 SET SQL_NOTES=IFNULL(@OLD_SQL_NOTES, 1) */</span>;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">oj:</span><br><span class="line">  db:</span><br><span class="line">    host: </span><br><span class="line">    name: root</span><br><span class="line">    pw: </span><br><span class="line">  rd:</span><br><span class="line">    host: </span><br><span class="line">    password:</span><br><span class="line">  nacos:</span><br><span class="line">    ip: </span><br><span class="line">  mq:</span><br><span class="line">    host: </span><br><span class="line">    port: 5672</span><br><span class="line">    username: root</span><br><span class="line">    pw: </span><br><span class="line">    vh: /</span><br><span class="line">codeSandbox:</span><br><span class="line">  type: my</span><br><span class="line">minio:</span><br><span class="line">    max-file-size: 200MB</span><br><span class="line">    max-file-request: 200MB</span><br><span class="line">    end-point: http://:9000</span><br><span class="line">    accesskey: minioroot</span><br><span class="line">    secretkey: minioroot</span><br><span class="line">    bucketName: oj-question-file</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-ftp设置</title>
      <link href="/2023/11/07/linux-ftp%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/11/07/linux-ftp%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在阅读文本之前，请确保已经配置过 <a href="https://cloud.tencent.com/document/product/213/10912">云服务器 Linux 云服务器搭建 FTP 服务-最佳实践-文档中心-腾讯云 (tencent.com)</a> 这些</p></blockquote><h1 id="root-用户登录ftp"><a href="#root-用户登录ftp" class="headerlink" title="root 用户登录ftp"></a>root 用户登录ftp</h1><blockquote><p>在操作完腾讯云给出的ftp服务教程之后，我想着可不可以直接用root 用户登录， 结果发现出现了这个问题</p></blockquote><blockquote><p>530 Please login with USER and PASS. Error EElFTPSUnacceptedReplyError: Unaccepted server reply code 530 to command PWD</p></blockquote><ul><li>大概是因为root用户不被允许使用ftp</li></ul><h2 id="修改教程"><a href="#修改教程" class="headerlink" title="修改教程"></a>修改教程</h2><h3 id="修改vsftpd的配置文件"><a href="#修改vsftpd的配置文件" class="headerlink" title="修改vsftpd的配置文件"></a>修改vsftpd的配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 输入下面的指令打开配置文件</span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">2. 找到 local_root 将他修改为</span><br><span class="line">local_root=/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311072213299.png" alt="image-20231107221353196"></p><h3 id="修改vsftpd的默认禁止文件"><a href="#修改vsftpd的默认禁止文件" class="headerlink" title="修改vsftpd的默认禁止文件"></a>修改vsftpd的默认禁止文件</h3><p>试一下，下面两个指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line">vim /etc/syscofnig/selinux</span><br></pre></td></tr></table></figure><p>笔者这里是第一个指令</p><p>然后打开这个页面</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311072216296.png" alt="image-20231107221616260"></p><p>将这里的SELINUX改成 disabled</p><p>保存退出</p><h3 id="修改设置文件脚本"><a href="#修改设置文件脚本" class="headerlink" title="修改设置文件脚本"></a>修改设置文件脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/user_list</span><br><span class="line">vim /etc/vsftpd/user_list</span><br></pre></td></tr></table></figure><p>把这个两个文件的的root 都<strong>注释一下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311072218565.png" alt="image-20231107221853537"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311072223219.png"></p><p>然后输入 <code>sudo systemctl restart vsftpd</code> 就好了</p><p>如果不行直接<code>reboot</code> 重启</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2023/11/06/linux/"/>
      <url>/2023/11/06/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="如何用共享文件"><a href="#如何用共享文件" class="headerlink" title="如何用共享文件"></a>如何用共享文件</h1><h2 id="x"><a href="#x" class="headerlink" title="x"></a>x<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816706.png" alt="image-20230516172648393"></h2><p>点击虚拟机， 然后选择点击设置， 选项共享文件夹找到<code>D:\myshare</code>,然后就可以了</p><ul><li>在虚拟机中<code>cd /mnt/hgfs/share</code></li><li>注意如果你没有开启共享文件功能，那么你在虚拟机中找不到这个hgfs文件</li></ul><h2 id="shell-突然连接上不上虚拟机的问题和解决方法"><a href="#shell-突然连接上不上虚拟机的问题和解决方法" class="headerlink" title="shell 突然连接上不上虚拟机的问题和解决方法"></a>shell 突然连接上不上虚拟机的问题和解决方法</h2><ol><li>重启ssh服务</li></ol><p><code>systemctl restart sshd</code></p><ol start="2"><li>查看你当前虚拟机的ip地址</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034963.png" alt="image-20230513110728202"></p><p>昨天inet这里的ip地址是 <code>192.168.202.134</code>  现在变成了<code>192.168.202.135</code>,所以需要更换xshell中的服务连接</p><ol start="3"><li>断开<strong>NAT模式</strong>连接(还未尝试,但是说不定有用)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034154.png" alt="image-20230513110944014"></p><p>右下第三个图标,右击</p><h1 id="vim-的学习"><a href="#vim-的学习" class="headerlink" title="vim 的学习"></a>vim 的学习</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816725.png" alt="image-20230329131040899"></p><p>a 代表append</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034278.png" alt="image-20230329131442903"></p><p>记住esc 就可以退回到 normal状态</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034770.png" alt="image-20230329131638704"></p><p>普通模式变到 visual 模式摁下 v， 退回到 normal 模式摁下 esc 即可</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816808.png" alt="image-20230329131813629"></p><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><p><strong>一下均在 normal 模式下进行</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034330.png" alt="image-20230329131928890"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035753.png" alt="image-20230329132139214"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816844.png" alt="image-20230329132620000"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816034.png" alt="image-20230329132752671"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035726.png" alt="image-20230329133610027"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816881.png" alt="image-20230329133902616"></p><ul><li><p>操作符</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816927.png" alt="image-20230329133932137"></p><p>u 撤销， p粘贴 ，c修改，y是复制的意思</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">yyp向下复制一行</span><br><span class="line">y + <span class="number">2</span>  + yp 代表向下复制两行</span><br><span class="line">cc 删除一行 （）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d + i + &lt;    删除&lt;&gt;括号里面的元素</span><br><span class="line">c + i + &lt;    删除&lt;&gt;括号里面的元素 并进入写入模式</span><br><span class="line">c + a + &lt;    删除包括&lt;&gt;在内的所有元素</span><br><span class="line">u 代表撤回</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">dd 删除一行</span><br><span class="line"><span class="number">2</span>dd 删除两行</span><br><span class="line">（使用cc可以删除后进入写入模式）</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">y + f + s 复制到第一个s的内容，然后 摁下p就是复制</span><br><span class="line">d + f + s 找到第一个s的内容 ，然后删除从当前文本到s的所有内容</span><br><span class="line">c + f + s 同上，但是删除之后，进入写入模式</span><br><span class="line">    </span><br><span class="line">d + i + t 代表删除标签内的所有元素</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    fadfa</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    dfa</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">在normal模式下输入d + i + t就可以实现把html中所有的元素删除</span><br><span class="line">    </span><br><span class="line">我们还可以配合尖角号来进行删除 </span><br><span class="line">d + ^ 删除开头的所有元素</span><br><span class="line">d + $ 删除从光标开始往后的所有元素 </span><br><span class="line">    </span><br><span class="line">v + i + w 快速选中当前光标所在的单词</span><br></pre></td></tr></table></figure></li></ul><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816249.png" alt="image-20230401192720576"></p><p>可以结合上上面的操作， 如 v + i + w 选中一个单词然后把所有的元素都换成大写或者小写字母</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>gd 可以跳转到定义 (ctrl + i 可以调回来)</p><p>切换标签页 g + t （往前） g + T（往后）</p><p>4 g t 跳转第二个标签页</p><h2 id="easymotion"><a href="#easymotion" class="headerlink" title="easymotion"></a>easymotion</h2><p><code>&lt;leader&gt;&lt;leader&gt; s</code> leader 代表键盘</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035188.png" alt="image-20230401194215189"></p><h2 id="vim-surround"><a href="#vim-surround" class="headerlink" title="vim_surround"></a>vim_surround</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816782.png" alt="image-20230401194513127"></p><p>当你使用 cs “ [ 则去掉”,然后 [ 之间没有空格,] 之间有空格</p><p>替换标签可以使用 cs”t p&gt; 就可以得到 一个标签</p><ul><li>退回到命令行模式，然后输入<code>:wq</code>可以强制退出</li></ul><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>centos和vm虚拟机软件的安装看<a href="%5B007_%E9%9F%A9%E9%A1%BA%E5%B9%B3Linux_%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1Sv411r7vd?p=7&vd_source=a96a6a5c5954878773b7ac38c6a5f71b)">韩顺平</a></p><h2 id="1-网络连接的三种方式"><a href="#1-网络连接的三种方式" class="headerlink" title="1.网络连接的三种方式"></a>1.网络连接的三种方式</h2><p>如果两个网络都在一个 192.168为开头的，那么他们都在同一个<strong>网段</strong> 在一个网段下的用户，可以相互链接</p><ul><li>桥接模式，虚拟系统可以和外界系统通讯，但是容易造成ip冲突</li><li>NAT模式：网络地址转换模式，虚拟系统可以和外部系统通讯，不造成ip冲突（<strong>首先这个</strong>）</li><li>主机模式：独立模式</li></ul><h2 id="2-虚拟机的基本知识"><a href="#2-虚拟机的基本知识" class="headerlink" title="2.虚拟机的基本知识"></a>2.虚拟机的基本知识</h2><h3 id="2-1虚拟机的克隆"><a href="#2-1虚拟机的克隆" class="headerlink" title="2.1虚拟机的克隆"></a>2.1虚拟机的克隆</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035816.png" alt="image-20221124160826896"></p><ul><li>注意克隆的时候，需要<strong>关闭linux系统</strong></li></ul><p><strong>克隆的方式</strong></p><ol><li>引用拷贝</li><li>深度拷贝（完全复制一个过去）</li></ol><h3 id="2-2虚拟机的快照（我的理解是就像备份）"><a href="#2-2虚拟机的快照（我的理解是就像备份）" class="headerlink" title="2.2虚拟机的快照（我的理解是就像备份）"></a>2.2虚拟机的快照（我的理解是就像备份）</h3><blockquote><p>想要回到原先的某一个状态，就可以使用快照的机制</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816119.png" alt="image-20221124161923011"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035784.png" alt="image-20221124162020657"></p><blockquote><p>如果你现在在C，记录了A和B的快照，那么我们就可以通过快照机制回到A，<strong>在回到A之后，我们也可以回到B</strong></p></blockquote><h3 id="2-3删除（直接手动删除就好了）"><a href="#2-3删除（直接手动删除就好了）" class="headerlink" title="2. 3删除（直接手动删除就好了）"></a>2. 3删除（直接手动删除就好了）</h3><h3 id="2-4安装vmtools"><a href="#2-4安装vmtools" class="headerlink" title="2.4安装vmtools"></a>2.4安装vmtools</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816628.png" alt="image-20221124163106274"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816071.png" alt="image-20221124205734386"></p><h2 id="3-目录结构-grin"><a href="#3-目录结构-grin" class="headerlink" title="3.目录结构:grin:"></a>3.目录结构:grin:</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816088.png" alt="image-20221124205900134"></p><blockquote><p>在linux的世界中，一切皆文件</p></blockquote><ul><li>&#x2F;bin 存放着最常用的指令</li><li>&#x2F;sbin 存放普通用户的主目录，在linux中每一个用户</li><li>&#x2F;lib 系统开机所需要最基本的动态连接的</li><li>&#x2F;etc 所有系统管理所需要的配置文件和子目录</li><li>&#x2F;usr 这是一个非常重要的，用户的所有应用程序和文件都放在这个目录</li><li>&#x2F;proc(不要动)</li><li>&#x2F;srv（不要动)</li><li>&#x2F;sys（不要动）</li><li>&#x2F;dev类似于windows的设备管理器</li><li>&#x2F;media</li><li>&#x2F;mnt  共享</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035136.png" alt="image-20221124211147986"></p><p>&#x2F;opt 主机额外安装软件所存放的目录&#x2F;&#x2F;如安装oracle数据库</p><h2 id="4-远程登录linux"><a href="#4-远程登录linux" class="headerlink" title="4.远程登录linux"></a>4.远程登录linux</h2><ul><li>xftp : 传输文件</li><li>xshell ：传输命令</li></ul><h2 id="5-vim基本介绍"><a href="#5-vim基本介绍" class="headerlink" title="5.vim基本介绍"></a>5.vim基本介绍</h2><ul><li>三种模式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816706.png" alt="image-20221124212648626"></p><p>wq: <strong>写入并退出</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816845.png" alt="image-20221125200740850"></p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816097.png" alt="image-20221125201537680" style="zoom:80%;" /><p>快捷键</p><ol><li>yy: 拷贝当前行 <code>4yy</code>复制4行</li><li>dd: 删除当前行 <code>4dd</code>删除当前行</li><li>&#x2F;关键字 ，回车查找，输入n就是查找下一个，输入N就是查找下一个</li><li><code>:set nu</code> ：显示行号,<code>:set  nonu</code>：不显示行号</li><li><code>gg</code>：快捷键到文档的最开始一行 <code>G</code>：快捷键到文档的最后一行</li><li><code>u</code>撤销，如windows的<code>ctrl+z</code></li><li><code>数字+shift+g</code>定位到数字对应的行</li></ol><h2 id="6-关机重启"><a href="#6-关机重启" class="headerlink" title="6.关机重启"></a>6.关机重启</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036336.png" alt="image-20221125201705119"></p><blockquote><p>-h 的h就是halt -r的r就是reboot</p></blockquote><ul><li><p>shutdown -h 代表1分钟后关机</p></li><li><p>shutdown -h 2 代表2分钟之后关机</p></li><li><p>shutdown -h now 代表现在关机</p></li><li><p>shutdown -r now 现在重启电脑</p></li><li><p>sync 把数据内存同步到磁盘之中。（<strong>建议在关机的时候， 执行一次， 免得出现问题</strong>）</p></li></ul><h2 id="7-用户登录和注销"><a href="#7-用户登录和注销" class="headerlink" title="7.用户登录和注销"></a>7.用户登录和注销</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816795.png" alt="image-20221125202148529"></p><p><code>su - root</code></p><blockquote><p>root的时候使用logout的时候就会变成tom，在使用一次就会退出系统</p></blockquote><ul><li><p>上面的这些操作得在shell中使用。</p></li><li><p>su -  用户名可以切换，你的用户级别</p></li></ul><h2 id="8-用户管理"><a href="#8-用户管理" class="headerlink" title="8.用户管理"></a>8.用户管理</h2><p>tip:<code>pwd</code>显示当前用户所在的目录</p><h3 id="8-1-添加用户"><a href="#8-1-添加用户" class="headerlink" title="8.1 添加用户"></a>8.1 添加用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">useradd 用户名</span><br><span class="line">useradd -d 地址 用户名 指定家目录的地址创建一个用户（默认的用户是被放置到\home之中</span><br><span class="line"># 设置用户密码</span><br><span class="line">passwd milan xxxx</span><br></pre></td></tr></table></figure><h3 id="8-2删除用户"><a href="#8-2删除用户" class="headerlink" title="8.2删除用户"></a>8.2删除用户</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 删除用户milan，但是保留家目录，但是用户会消失（必须时root权限才能删除）</span><br><span class="line">userdel milan</span><br><span class="line"></span><br><span class="line"># 删除用户milan，不保留家目录（要慎重）</span><br><span class="line">userdel -r milan</span><br><span class="line"></span><br><span class="line"># 如果你先用第一种方式删除了milan，那么你就不可以通过-r将milan从home中删除掉</span><br></pre></td></tr></table></figure><ul><li>如果你忘记加上-r操作，想要进一步的删除考虑一下做法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816982.png" alt="image-20230514161922494"></p><h2 id="8-x其他的一些操作"><a href="#8-x其他的一些操作" class="headerlink" title="8.x其他的一些操作"></a>8.x其他的一些操作</h2><ul><li><p><strong>高层级的退出到底层级的用户，不需要输入密码</strong></p></li><li><p>当你想从高级的到低级别的时候， 我们就可以使用logout</p></li><li><p>who am i：<strong>查看当前用户的信息</strong>（用户取决于你<strong>第一次登录</strong>的信息）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036321.png" alt="image-20221126091528924"></p></li><li><p>查询用户名</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id king </span><br><span class="line">id 用户名 返回一个用户的信息</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816906.png" alt="image-20230507163705500"></p><h3 id="8-3用户组"><a href="#8-3用户组" class="headerlink" title="8.3用户组"></a>8.3用户组</h3><p>tips：<strong>clear 清屏</strong></p><h4 id="8-3-1增加用户组"><a href="#8-3-1增加用户组" class="headerlink" title="8.3.1增加用户组"></a>8.3.1增加用户组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名</span><br><span class="line"></span><br><span class="line"># 将用户直接直接放到用户组中</span><br><span class="line">useradd -g wudang zwj</span><br></pre></td></tr></table></figure><h4 id="8-3-2删除用户组"><a href="#8-3-2删除用户组" class="headerlink" title="8.3.2删除用户组"></a>8.3.2删除用户组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><ul><li>如果没有创建用户没有指定组，会<strong>自动生成一个对应用户名称的组</strong></li></ul><h4 id="8-3-3修改用户组"><a href="#8-3-3修改用户组" class="headerlink" title="8.3.3修改用户组"></a>8.3.3修改用户组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g mojiao zwj 把zwj移动到mojiao组</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036733.png" alt="image-20230507164612748"></p><ul><li>从魔教变成了武当教</li></ul><h4 id="8-3-4用户和组相关文件"><a href="#8-3-4用户和组相关文件" class="headerlink" title="8.3.4用户和组相关文件"></a>8.3.4用户和组相关文件</h4><p>解释器：国内一般用bashshell</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036582.png" alt="image-20221126093152036"></p><ul><li>第一个指令为 <code>vim etc/passwd</code></li><li>后面的指令也是 <code>vim + 后面的一坨东西</code></li></ul><h2 id="9-linux使用指令"><a href="#9-linux使用指令" class="headerlink" title="9.linux使用指令"></a>9.linux使用指令</h2><ul><li>运行级别的介绍</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816138.png" alt="image-20221127084923967"></p><ul><li>输入<code>init n</code>跳入对应的状态</li><li><code>systemctl set-default graphical.target</code>,回到默认的状态</li><li><code>systemctl set-default TARGET.target</code>设置回到的状态</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036173.png" alt="image-20230509090244160"></p><p><strong>修改初始init的方法</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">systemctl get-default </span><br><span class="line">查看当前系统的默认级别</span><br><span class="line"></span><br><span class="line">systemctl set-default multi-user.target</span><br><span class="line">切换成多用户网络级别</span><br><span class="line"></span><br><span class="line">systemctl set-default graphical.target</span><br><span class="line">切换成图形界面级别级别</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何找回root密码"><a href="#如何找回root密码" class="headerlink" title="如何找回root密码"></a>如何找回root密码</h3><ol><li><p>首先，启动系统，进入开机界面，在界面中摁’e’进入编辑界面</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816771.png" alt="image-20221127090532246"></p></li><li><p>进入编辑界面，使用键盘的上下键把光标往下移动，找到以LINUX16开头内容所在行数，在行的最后面输入: init&#x3D;&#x2F;bin&#x2F;sh。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816818.png" alt="image-20221127090821988"></p><ol start="3"><li>接着，输入完成后，直接按快捷键:<code>Ctrl+x</code>进入单用户模式</li><li>接着，在光标闪烁的位置输入 ：<code>mount -o remount,rw /</code></li><li>输入passwd回车后，输入密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036533.png" alt="image-20221127091100984"></p><ol start="6"><li><p>在鼠标闪烁位置中（最后一行）输入<code>touch /.autorelabel</code>（注意touch和&#x2F;之间有以一个空格）</p></li><li><p>继续在光标闪烁位置，输入<code>exec /sbin/init</code>然后摁下回车键，等待系统自动修改密码</p></li></ol><h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816718.png" alt="image-20230509133624219"></p><ul><li><p>man<strong>获得帮助信息</strong></p><ul><li>如 <code>man ls</code></li><li>选项可以组合使用 ls -al, ls -al&#x2F;root</li><li>从man的提示中退出只要输入<code>q</code>就好了</li></ul></li><li><p>help 获得shell内置命令的帮助信息</p></li><li><p>在linux里面，隐藏文件是以<code>.</code>开头的。</p></li></ul><h2 id="文件指令"><a href="#文件指令" class="headerlink" title="文件指令"></a>文件指令</h2><ul><li>pwd : 显示当前的绝对路径</li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul><li><code>ls - l</code>单列输出所有的文件</li><li><code>ls - a</code>输出所有的文件</li><li>选项还可以组合使用 <code>ls - al</code>, <code>ls -al /home</code>代表输出root目录下的<code>所有文件</code></li></ul><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p><code>cd ~</code>回到自己的家目录</p><p><code>cd ..</code> 回到当前目录的上一级</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><ul><li>指令用于创建目录</li></ul><p><strong>创建dog目录</strong></p><p><code>mkdir /home/dog</code></p><p>创建多级目录</p><p><code>mkdir -p /home/dog/animal</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816839.png" alt="image-20230509140515432"></p><p>在当前<code>/home</code>之中创建一个<code>dog</code>,在<code>dog</code>之中创建一个<code>animal</code></p><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p>rmdir 删除一个空目录</p><ul><li>只有空目录才可以使用</li></ul><p>所以你不能删除掉有animal的cat的dir文件</p><ul><li>想要删除需要用<code>rm -rf dir</code></li></ul><p>比如我想要删除掉cat和animal,那么我们就可以使用这个递归删除.(r代表recursion)</p><p><code>rm -rf ./cat</code></p><p>通过上诉指令,将cat的所有文件,包括cat全部删除</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816197.png" alt="image-20230509141219006"></p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><ul><li>创建一个空文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036554.png" alt="image-20230509141248356"></p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><ul><li>指定的文件拷贝到指定的地址之中</li></ul><p><code>-r选项</code>递归复制整个文件夹</p><p>将bbb内的所有文件拷贝到opt文件夹之中</p><p><code>cp -r /home/bbb/ /opt/</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036886.png" alt="image-20230509142004563"></p><p><code>\cp -r /home/bbb/opt</code> 强制覆盖所有文件,不需要一个一个的提示</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul><li><p>不同于上面的删除目录, 这个是删除文件</p></li><li><p>常用选项</p><ul><li>-r 递归删除整个文件夹</li><li>-f 强制删除不提示</li><li><strong>这些选项可以组合</strong></li><li>-rf强制删除所有文件夹不提示</li></ul></li><li><p>比如将&#x2F;home&#x2F;hello.txt文件删除</p><p><code>rm /home/hello.txt</code></p><p><code>rm -f /home/hello.txt</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816017.png" alt="image-20230509142656169"></p><p><strong>两种方法得到的结果为上图</strong></p><ul><li>tips</li></ul><p>删除整个系统为<code>-rm -rf /</code>但是这样会有系统提示</p><p>,为了绕开它的提示我们可以使用<code>-rm -rf /*</code></p><h3 id="mv指令"><a href="#mv指令" class="headerlink" title="mv指令"></a>mv指令</h3><ul><li>移动文件与目录或者重命名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816283.png" alt="image-20230509143508413"></p><ul><li><p>在同一个目录下面, 就是重命名</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037870.png" alt="image-20230509143631469"></p></li><li><p>否则就是移动文件.</p></li><li><p>移动整个目录</p><p>将bbb目录移动到home&#x2F;下面</p><p><code>mv bbb /home/</code></p></li></ul><h3 id="cat指令-更安全"><a href="#cat指令-更安全" class="headerlink" title="cat指令(更安全)"></a>cat指令(更安全)</h3><ul><li><p>他只能浏览方便, 但是不可以修改文件.</p></li><li><p>查看文件的内容</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816752.png" alt="image-20230509144025149"></p><p><code>cat -n /etc/profile</code></p><h4 id="拓展-管道命令"><a href="#拓展-管道命令" class="headerlink" title="拓展 : 管道命令"></a>拓展 : 管道命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816907.png" alt="image-20230509144422055"></p><p><strong>将前面命令的结果交给下一个命令进行处理</strong></p><p> &#96;&#96;cat -n &#x2F;etc&#x2F;profile | more&#96;</p><p><strong>more可以进行翻页等功能</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037468.png" alt="image-20230509144450191"></p><p><code>more /etc/profile</code></p><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>功能:</p><p> <img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816427.png" alt="image-20230509144722631"></p><p><strong>它比more指令更加好用, 它的查看文件的效率更加.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037726.png" alt="image-20230509145126682"></p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><ul><li>输出内容到控制台</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037278.png" alt="image-20230509145229416"></p><ul><li>环境变量带有美元符号</li></ul><p><code>echo $HOSTNAME</code>显示当前服务器名字</p><p><code>echo &quot;hello,world&quot;</code> (注意这里必须要加上引号)</p><p><code>echo &gt;</code>代表的是覆盖</p><p><code>echo &gt;&gt;</code>代表的是追加</p><h3 id="head指令"><a href="#head指令" class="headerlink" title="head指令"></a>head指令</h3><ul><li>用来显示文件的开头文件内容, 默认查看10行的内容.</li><li><code>head -n 5</code> 显示前五行.</li></ul><h3 id="tail指令"><a href="#tail指令" class="headerlink" title="tail指令"></a>tail指令</h3><ul><li><p>显示文件的末尾内容, 默认显示末尾10行.</p></li><li><p>同head指令</p></li><li><p><strong>选项 <code>-f</code>实时显示文件内容.(非常重要)</strong></p><p>输入<strong>ctrl+c</strong>代表退出</p></li></ul><p><strong>拓展 : 重定向,将输出的内容写入到其他地方.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816937.png" alt="image-20230509150147565"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816653.png" alt="image-20230509150154370"></p><p>在linux系统中向文件中写入这个指令, 然后再tail的监控下得到了<code>helloworld</code></p><h3 id="和-指令"><a href="#和-指令" class="headerlink" title="&gt; 和 &gt;&gt; 指令"></a>&gt; 和 &gt;&gt; 指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037240.png" alt="image-20230509150523092"></p><ul><li><p>因为以上指令的输出地方都是再控制台里面, 我们可以利用重定向将他转换到其他地方</p></li><li><p>cal : 显示当前的日历</p></li></ul><p><code>cal &gt; /home/cc.txt</code>将日历覆盖到<code>cc.txt</code>文件之中</p><h3 id="ln指令-这里是l不是i"><a href="#ln指令-这里是l不是i" class="headerlink" title="ln指令(这里是l不是i)"></a>ln指令(这里是l不是i)</h3><p>软链接, 类似于window之中的<code>快捷键</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037056.png" alt="image-20230509151433783"></p><p><code>ln -s /root/ /home/myroot</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816792.png" alt="image-20230509151609372"></p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>查看已经执行过的历史指令.</p><ul><li><p>查看所有的指令<code>history</code></p></li><li><p>查看最近的十条指令<code>history 10</code></p></li><li><p>执行历史编号为<code>!5</code></p></li></ul><h2 id="时间日期类指令"><a href="#时间日期类指令" class="headerlink" title="时间日期类指令"></a>时间日期类指令</h2><p><code>date</code></p><p><code>date +%Y</code></p><p><code>date +%m</code></p><p><code>date +%d</code></p><p><code>date &quot;+%Y- %m- %d %H:%M:%S&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816870.png" alt="image-20230512102419810"></p><p><code>date -s 设计系统当前时间</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040881.png" alt="image-20230512102701478"></p><p><code>cal</code> 查看日历指令</p><h2 id="搜索查找类指令"><a href="#搜索查找类指令" class="headerlink" title="搜索查找类指令"></a>搜索查找类指令</h2><h3 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a>find指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040348.png" alt="image-20230512102954151"></p><ol><li><code>find /home -name hello.txt</code></li></ol><p>查找 home 名称下面的hello的记事本</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816791.png" alt="image-20230512103312599"></p><ol start="2"><li><p><code>find /opt -user nobody</code></p><p>可以换成将<code>nobody</code>替换成<code>root</code></p><p>因为跳转的太快我们看不清里面的文件， 我们还可以使用 |more 来减缓速度</p><p>例如<code>find / -user root | more</code></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816976.png" alt="image-20230512103813288"></p><p><code>find / -size +200M</code> 找到从根目录下大于200M的文件</p><p><code>ls -lh</code>将数据换成比较适合人看的单位</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040298.png" alt="image-20230512105002992"></p></li></ol><h3 id="locate-指令"><a href="#locate-指令" class="headerlink" title="locate  指令"></a>locate  指令</h3><p><code>快速定位文件的路径</code></p><p><strong>它的查询速度非常快速，他是建立自己的数据库进行查找</strong></p><ul><li>在第一次运行之前， 需要使用<code>updatedb</code>指令创建<code>locate</code>数据库, 否则会检索不到</li></ul><h3 id="which-指令"><a href="#which-指令" class="headerlink" title="which 指令"></a>which 指令</h3><p><strong>可以查看某一个指令在哪个目录存放 。</strong></p><p><code>which ls</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816676.png" alt="image-20230512104657145"></p><h3 id="grep-指令和管道符号"><a href="#grep-指令和管道符号" class="headerlink" title="grep 指令和管道符号"></a>grep 指令和管道符号</h3><p><code>grep 过滤查找， 管道符， &quot;|&quot; 表示将前一个命令的处理结果输出传递给后面的命名处理</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816821.png" alt="image-20230512104805852"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040821.png" alt="image-20230512105721349"></p><p><code>grep -n &quot;查找内容&quot; 地址</code></p><ul><li>常用选项</li></ul><p><code>-i</code> ： 忽略大小写</p><h2 id="压缩和解压指令"><a href="#压缩和解压指令" class="headerlink" title="压缩和解压指令"></a>压缩和解压指令</h2><h3 id="gzip-gunzip-指令"><a href="#gzip-gunzip-指令" class="headerlink" title="gzip &#x2F; gunzip 指令"></a>gzip &#x2F; gunzip 指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816275.png" alt="image-20230512105927399"></p><ul><li><p>gzip 地址&#x2F;</p><p>压缩后会保存源文件</p></li><li><p>gunzip压缩</p></li><li><p>选项 -r 递归压缩， 也就是压缩目录</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816278.png" alt="image-20230512110256282"></p><ul><li><code>zip -r myhome.zip /home/</code>将home目录及其包</li><li><code>unzip -d /opt/tmp/ home/myhome.zip</code> 解压myhome.zip刀tmp目录下</li></ul><h3 id="tar指令"><a href="#tar指令" class="headerlink" title="tar指令"></a>tar指令</h3><ul><li>zxvf <strong>解包文件</strong></li><li>zcvf <strong>压缩打包文件</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040312.png" alt="image-20230512110956001"></p><ul><li><strong>将上诉两个文件， 打包到一个tar.gz文件中</strong></li></ul><p><code>tar -zcvf pc.tar.gz helo.txt sss.txt</code></p><ul><li><strong>将<code>pc.tar.gz</code>解压到当前目录</strong></li></ul><p><code>tar -zxvf pc.tar.gz</code></p><ul><li><strong>将<code>pc.tar.gz</code>解压刀指定目录</strong></li></ul><p>(1).<code>mkdir /opt/tmp2</code></p><p>(2).<code>tar -zxvf /home/myhome.tar.gz -C /opt/tmp2</code></p><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><ul><li>任何一个用户都必须有一个组</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816805.png" alt="image-20230513102646026"></p><h2 id="文件-目录-所有者"><a href="#文件-目录-所有者" class="headerlink" title="文件&#x2F;目录 所有者"></a>文件&#x2F;目录 所有者</h2><ul><li><p>ls -ahl 查看所有文件，以及它的创建者</p></li><li><p>chown 用户名 文件名 将该文件 转换为对应的用户名</p></li></ul><h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><ul><li><code>groupadd 组名 groupadd monster</code></li><li>创建一个用户fox  <code>useradd -g monster</code></li><li>给用户设置密码 <code>passwd fox</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040005.png" alt="image-20230513103703454"></p><p>第一个root代表用户名， 第二个代表组名</p><ul><li>修改文件所在的组</li></ul><p><code>chgrp 组名 文件名</code></p><p><code>touch orange.txt</code></p><p><code>chgrp fox orange.txt</code></p><p>创建一个orange的文本， 然后把这个文本的组名换成fox组</p><h2 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h2><p><code>usermod -g 新组名 用户名</code></p><p><code>usermod -d 目录名 用户名</code> : <strong>用户需要有进入到目录的权限</strong></p><h2 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816112.png" alt="image-20230513105300579"></p><p>这行数据的含义如下</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816537.png" alt="image-20230513105326509"></p><p><strong>第一位</strong></p><p>是<code>l</code>代表链接</p><p>是<code>d</code>代表目录,相当于windows的目录</p><p>是<code>-</code>代表是普通文件</p><p>是<code>c</code>代表是字符设备 比如鼠标键盘 <strong>cd &#x2F;dev 就可以看到, 下面的也可以</strong>通过这个方式看到</p><p>是<code>b</code>是块设备, 比如硬盘</p><p><strong>第1-3位</strong>确定所有者拥有对该文件的权限 –user</p><p><strong>第4-6位</strong>确定所属组拥有的对该文件的权限 –group</p><p><strong>第7-9位</strong>确定其他用户组拥有该文件的权限 – Other</p><p>如果对应权限没有,利用<code>-</code>来表示<strong>缺省</strong></p><p><code>-    rwx    rw-    r--</code></p><p><strong>上面分隔开就可以表示权限</strong></p><p>rwx (<strong>r代表可读 w代表可写 x代表可以执行</strong>)</p><p>作用到文件和目录下面的区别</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071041461.png" alt="image-20230513110428616"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816112.png" alt="image-20230513105300579"></p><ul><li>两个root之后的<strong>数字代表文件的字节大小,</strong> 后面是<strong>最后修改的日期</strong> , 最后一个代表的是文件名</li></ul><h2 id="修改权限-chmod"><a href="#修改权限-chmod" class="headerlink" title="修改权限 - chmod"></a>修改权限 - chmod</h2><ul><li>要先切换到对应的用户名那边先。</li></ul><blockquote><p>u:所有(拥有)者 g:所有组 o:其他人 a:所有人</p></blockquote><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513111852339.png" alt="image-20230513111852339"></p><ul><li><p><code>-</code>运算符, 代表 除去用户对应输入字母的权限</p></li><li><p><code>+</code>运算符, 代表 增加用户对应输入字母的权限</p></li><li><p>当前abc的权限</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816155.png" alt="image-20230513112435746"></p><ul><li>输入该指令之后<code>chmod u=rwx,g=rwx,o=rx abc</code></li><li>权限变更位如下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071041389.png" alt="image-20230513112455168"></p><p>输入<code>chmod u-x,g+w abc</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816151.png" alt="image-20230513112703869"></p><p>所有者权限x消失了,<code>用户组</code>增加了<code>w</code>权限</p><ul><li>当然我们也可以通过数字来变更权限</li></ul><p><code>r = 4 w = 2 x = 1</code>,所以 rwx 对应的数字为 &#x3D; 4 + 2 + 1 &#x3D; 7</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816303.png" alt="image-20230513112858870"></p><h2 id="chown-修改文件所有者"><a href="#chown-修改文件所有者" class="headerlink" title="chown - 修改文件所有者"></a>chown - 修改文件所有者</h2><p><code>chown tom /home/abc.txt</code></p><p>修改abc.txt的所有者为<code>tom</code></p><p><strong>修改前</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071041460.png" alt="image-20230513113132399"></p><p><strong>修改后</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816550.png" alt="image-20230513113122116"></p><ul><li><code>-R</code>如果是目录,则使其所有子文件或者目录递归生效</li></ul><p><code>chown -R tom /home/test</code> 将test文件夹里面的所有文本全部变成tom用户的所属</p><h2 id="chgrp-修改文件所属组"><a href="#chgrp-修改文件所属组" class="headerlink" title="chgrp - 修改文件所属组"></a>chgrp - 修改文件所属组</h2><p><strong>类似于上面的chown</strong></p><ul><li>将abc.txt的组换成shaolin组</li></ul><p><code>chgrp shaolin /home/abc.txt</code></p><ul><li>将&#x2F;home&#x2F;test目录下的所有文件和目录的所有组全部变成shaolin组</li></ul><p><code>chgrp -R shaolin /home/test</code></p><h2 id="组的总结"><a href="#组的总结" class="headerlink" title="组的总结"></a>组的总结</h2><ul><li>如果想要对目录的文件进行修改， 我们必须先获得对应文件夹的<strong>执行权限</strong>。</li><li>如果我们有x权限，但是没有r权限，那么这个文件夹不能用<code>ls</code>操作， 但是可以cd到这个文件（而且我们也可以用<code>vim</code></li><li>对于一个目录， 如果你没有w权限， 那么你就不能就目录里的文件进行<strong>删除，和创建文件</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816783.png" alt="image-20230514160753450"></p><h1 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h1><ul><li>指定系统在某一个时间调度。</li><li>指定系统定时调度</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042458.png" alt="image-20230514162502238"></p><ul><li>占位符</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816211.png" alt="image-20230514162711101"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * ls -l /etc/ &gt; /tmp/to.txt（*/1 代表每1min都执行一次）</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042105.png" alt="image-20230514163107233"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816458.png" alt="image-20230514163052523"></p><p><code>cd</code> 到<code>/tmp/</code>里面，发现生成了一个<code>to.txt</code> ， 如果暂时还没有生成， 我们可以等一伙</p><ul><li>最后一个* 代表星期几</li></ul><h2 id="特殊符号的说明"><a href="#特殊符号的说明" class="headerlink" title="特殊符号的说明"></a>特殊符号的说明</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042313.png" alt="image-20230514163727308"></p><ul><li>星期和日期尽量不要同时选</li></ul><h2 id="一个小的案例"><a href="#一个小的案例" class="headerlink" title="一个小的案例"></a>一个小的案例</h2><ul><li>我们先创建一个文本<code>my.sh</code>(还要把my。sh的权限修改为有x， chmod u+x)</li><li>vim my.sh 输入<code>date &gt;&gt; /home/mycal</code>      <code>cal &gt;&gt; /home/mycal</code></li><li><code>crontab -e</code>  <code>*/1 * * * * my.sh</code></li><li>最后效果为</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816166.png" alt="image-20230514170338156"></p><h2 id="案例二（我还没做，到时候装了数据库再说）"><a href="#案例二（我还没做，到时候装了数据库再说）" class="headerlink" title="案例二（我还没做，到时候装了数据库再说）"></a>案例二（我还没做，到时候装了数据库再说）</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816170.png" alt="image-20230514171039076"></p><h2 id="其他crontab指令"><a href="#其他crontab指令" class="headerlink" title="其他crontab指令"></a>其他crontab指令</h2><ul><li>crontab -r ： 终止任务调度</li><li>crontab -l：列出当前有那些任务调度</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816329.png" alt="image-20230514170957165"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042556.png" alt="image-20230514170948449"></p><h2 id="at指令"><a href="#at指令" class="headerlink" title="at指令"></a>at指令</h2><ul><li><p>基本介绍</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042287.png" alt="image-20230514171200073"></p></li><li><p>拓展 ：ps -ef 检测当前的进程</p><ul><li>结合过滤语句可以查看是否存在atd<code>ps -ef | grep atd</code></li></ul></li></ul><p>at<strong>命令选项</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816074.png" alt="image-20230514171801752"></p><ul><li>at的时间定义</li><li></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042445.png" alt="image-20230514172118480"></p><ul><li>先输入时间指令</li><li>然后再输入命令指令</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042679.png" alt="image-20230514173315561"></p><ul><li>要退出的话，连续敲击<code>ctrl + D</code></li></ul><blockquote><p>atq可以查看当前系统执行工作任务</p></blockquote><blockquote><p>再输入命令的时候，打错了要输入ctrl + backspace</p></blockquote><blockquote><p>删除一个at进程， atrm 5(5 是他对应的编号)</p></blockquote><h1 id="linux-磁盘分区"><a href="#linux-磁盘分区" class="headerlink" title="linux 磁盘分区"></a>linux 磁盘分区</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816274.png" alt="image-20230515153704104"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042640.png" alt="image-20230515153925596"></p><ul><li><p>挂载 （mount）：</p><p>lsblk  <strong>查看挂载内容</strong><br>lsblk -f 查看挂载</p></li><li><p>分区（IDE硬盘 和SCSI硬盘）目前基本上都是SCSI硬盘</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042982.png" alt="image-20230515154509526"></p><ul><li>uuid 分区的唯一标识符</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816233.png" alt="image-20230515155025026"></p><h2 id="增加硬盘示例"><a href="#增加硬盘示例" class="headerlink" title="增加硬盘示例"></a>增加硬盘示例</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042420.png" alt="image-20230515155108654"></p><blockquote><p>新增一个newdisk， 然后把他挂载到分区1</p></blockquote><ul><li><p>增加一个快硬盘(右击对应虚拟机， 然后点击硬盘添加。)</p></li><li><p>分区指令 <code>fdisk /dev/?</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042589.png" alt="image-20230515155747169"></p><ul><li>之后还需要再进行格式化 ， 具体操作为</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816596.png" alt="image-20230515160027830"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816608.png" alt="image-20230515160431126"></p><p><strong>挂载</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042826.png" alt="image-20230515160535402"></p><p><strong>卸载</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816154.png" alt="image-20230515160719390"></p><ul><li><p>如果利用命令行挂载，重启之后，之前挂载的内容会失效</p><p>想要永久挂载</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816490.png" alt="image-20230515160917755"></p></li></ul><p>​       将你要挂载的内容加入到里面</p><p>​      第一个数字：0&#x2F;1 &#x3D; 备份&#x2F;不备份，第二个数字：2&#x2F;1&#x2F;0 &#x3D; 根目录&#x2F;其他目录文件检查&#x2F;不检    查</p><p>​     <img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816805.png" alt="image-20230515161206690"></p><ul><li>对于第一个位置 ，你可以填写<strong>uuid</strong>， 也可以写它的<strong>地址</strong> ，第二个位置为挂载到的地点， 后面几个就先照抄我们还没有学</li></ul><h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><p><code>df -h</code> 查看磁盘的情况</p><ul><li><p>如果使用率超过了80%，那么需要清理硬盘，或者增加硬盘</p></li><li><p>查看指定目录的磁盘占用情况，默认为当前目录</p></li><li><p>使用<code>du -h --max-depth=1来查看磁盘的文件个数</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816907.png" alt="image-20230515162009026"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816976.png" alt="image-20230515162456559"></p><h2 id="磁盘情况-实用命令"><a href="#磁盘情况-实用命令" class="headerlink" title="磁盘情况-实用命令"></a>磁盘情况-实用命令</h2><ul><li>统计opt目录下文件个数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816032.png" alt="image-20230515162722318"></p><p>grep过滤， 可以使用正则表达式， “^-“ 代表匹配前面为”-“的字符串</p><ul><li>统计opt文件夹下目录的个数</li></ul><p>grep过滤 ， 可以使用正则表达式，”^.”代表匹配前面任意一个字符串</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816176.png" alt="image-20230515162943471"></p><ul><li><p>统计&#x2F;opt文件夹下文件的个数，包括子文件夹里的</p><p><strong>ls -lR &#x2F;opt 目录下全部文件， wc -l可以统计个数</strong></p><p>ls -lR &#x2F;opt | grep “^.” | wc -l</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816291.png" alt="image-20230515163443478"></p></li><li><p>tree可以显示文件内的所有内容， 但是要下载<code>sudo yum install tree</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071043890.png" alt="image-20230515163726702"></p><h1 id="NAT网络原理图"><a href="#NAT网络原理图" class="headerlink" title="NAT网络原理图"></a>NAT网络原理图</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816734.png" alt="image-20230515165045620"></p><p>vmnet8可以跟linux虚拟机通讯</p><p>但是虚拟机<strong>不能ping vmnet8</strong> ，是因为<strong>windows</strong>里面会有防火墙</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071043253.png" alt="image-20230515165525475"></p><p>能上网， 是因为<strong>无线网卡</strong>做了<strong>代理</strong></p><h2 id="查看网络ip和代理"><a href="#查看网络ip和代理" class="headerlink" title="查看网络ip和代理"></a>查看网络ip和代理</h2><p>自行看65集就好</p><h2 id="linux网络环境配置"><a href="#linux网络环境配置" class="headerlink" title="linux网络环境配置"></a>linux网络环境配置</h2><ul><li>自动获取， 登录之后ip地址就会发生改变</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071043372.png" alt="image-20230515170707217"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816092.png" alt="image-20230515170918777"></p><p>从自动分配变成static</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816304.png" alt="image-20230516151017037"></p><ul><li><p>这一节就是教你怎么修改成静态ip的</p></li><li><p>网络服务生效 <strong>service network restart</strong> 或者选择 <strong>reboot</strong></p></li></ul><h1 id="设置主机名-和hosts映射"><a href="#设置主机名-和hosts映射" class="headerlink" title="设置主机名 和hosts映射"></a>设置主机名 和hosts映射</h1><ul><li><p>hostname - 查看当前主机名</p></li><li><p>修改主机的名字<code>vim /etc/hostname</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816399.png" alt="image-20230516142523551"></p><ul><li><p>那么如何通过主机名来查找主机</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816769.png" alt="image-20230516143434265"></p></li><li><p>你只要在etc&#x2F;hosts里面写入ip地址空格主机名，这样就可以通过主机名来访问了</p></li></ul><p>它的原理为如下</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071043820.png" alt="image-20230516143942597"></p><ul><li><strong>先找网络域名服务器， 在按照该图来进行修改</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816020.png" alt="image-20230516144200859"></p><ul><li>如果某个人把你的etc&#x2F;hosts修改为如下信息， 那么就会出现dns域名劫持</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516144340815.png" alt="image-20230516144340815"></p><ul><li>查看一个网站的ip地址可以使用ping 网站名称</li></ul><p>想要修改hosts文件，可以用记事本管理员模式打开， 然后打开到<code>C:\Windows\System32\drivers\etc\hosts</code></p><h1 id="Linux进程"><a href="#Linux进程" class="headerlink" title="Linux进程"></a>Linux进程</h1><p><code>pid</code>: 进程号（每一个程序分配一个ID号）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816242.png" alt="image-20230516151848444"></p><h2 id="显示系统的执行进程"><a href="#显示系统的执行进程" class="headerlink" title="显示系统的执行进程"></a>显示系统的执行进程</h2><h3 id="ps指令"><a href="#ps指令" class="headerlink" title="ps指令"></a>ps指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816621.png" alt="image-20230516151949132"></p><blockquote><p>User 代表进程用户名</p><p>CPU 程序占用CPU百分比</p><p>MEM 占用实际物理内存的百分比</p><p>YSZ 占用虚拟内存的大小（KB）单位， 下面那个也是</p><p>VSZ 占用物理内存的大小（KB）单位，</p><p>STAT 当前运行的状态 <strong>s代表休眠</strong>， <strong>r正在运行</strong>    <strong>Z 僵尸进程</strong>    <strong>T 被跟踪或者停止</strong> <strong>D短期等待</strong></p><p>start 进程的开始时间</p><p>TIME 占用的cpu时间</p><p>command 启动这个进程的名字（也就是进程）</p><p>TTY 终端的名称 ， 缩写</p></blockquote><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516152346986.png" alt="image-20230516152346986"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li>要求以全格式查看所有进程， 已经进程的父进程</li></ul><p><code>ps -ef</code></p><p><strong>-e显示所有进程 -f全格式</strong></p><p>ppid <strong>代表父进程</strong>， 父进程为0 代表没有父进程</p><p>sshd 父进程信息</p><p><code>ps -ef | more sshd</code></p><h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516153714487.png" alt="image-20230516153714487"></p><p>killall会把子进程也给干掉</p><h3 id="四个实践"><a href="#四个实践" class="headerlink" title="四个实践"></a>四个实践</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816223.png" alt="image-20230516153837280"></p><ul><li>踢掉某一个用户 （注意不能用root的时候用<code>su -alan</code>,要直接新开一个shell来登录<ul><li>ps -aux | grep sshd</li></ul></li><li>终止远程登录服务<ul><li><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816286.png" alt="image-20230516155231085"></li><li>这个进程号代表xshell的进程</li><li>重新启动指令 &#x2F;bin&#x2F;systemctl start sshd.service</li></ul></li><li>终止多个gedit   <code>killall gedit</code></li><li>强制删除一个进程（因为有一些进程杀不掉） kill -9 xxxx</li></ul><h3 id="查看进程树pstree"><a href="#查看进程树pstree" class="headerlink" title="查看进程树pstree"></a>查看进程树pstree</h3><p>pstree 显示进程</p><ul><li><p>选项</p><ul><li><p>-p 显示进程号</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816791.png" alt="image-20230516155543174"></p></li><li><p>-u 显示进程的用户信息</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816804.png" alt="image-20230516155607212"></p></li></ul></li></ul><h2 id="服务进程"><a href="#服务进程" class="headerlink" title="服务进程"></a>服务进程</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516155900357.png" alt="image-20230516155900357"></p><ul><li>指令</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816991.png" alt="image-20230516155848640"></p><ul><li>etc&#x2F;init.d还可以通过该指令查看</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816171.png" alt="image-20230516160002842"></p><p>停止掉网络服务之后， 就不能够在连接xshell</p><p><code>service network stop</code>: 可以让xshell连接不到服务器</p><p><code>service network restart</code>： xshell连接上</p><h3 id="打开和关闭自启动"><a href="#打开和关闭自启动" class="headerlink" title="打开和关闭自启动"></a>打开和关闭自启动</h3><p><code>setup</code>打开这个管理界面</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516160327392.png" alt="image-20230516160327392"></p><ul><li><p>带上<code>*</code>号的会自启动</p></li><li><p>取消星号 摁下空格</p></li><li><p>tab移动光标来退出</p></li></ul><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816614.png" alt="image-20230516170223204"></p><ul><li>多数选择3</li></ul><h3 id="chkconfig指令"><a href="#chkconfig指令" class="headerlink" title="chkconfig指令"></a>chkconfig指令</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516170629907.png" alt="image-20230516170629907"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516171056890.png" alt="image-20230516171056890"></p><ul><li>输入chkconfig –level 3 network off 来关闭某个级别的网络服务</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516171101595.png" alt="image-20230516171101595"></p><p>敲击chkconfig –level 3 network on之后</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816319.png" alt="image-20230516171233340"></p><h2 id="systemctl指令（明天学）-后天（昨天游泳了）-swimmer"><a href="#systemctl指令（明天学）-后天（昨天游泳了）-swimmer" class="headerlink" title="systemctl指令（明天学）&#x2F; 后天（昨天游泳了）:swimmer:"></a>systemctl指令（明天学）&#x2F; 后天（昨天游泳了）:swimmer:</h2><ul><li>基本指令</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816440.png" alt="image-20230518154330934"></p><p> 它的指令管理的服务在<code>/usr/lib/systemd/system</code> 查看</p><ul><li>firewalld.service  <strong>防火墙的名称</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816061.png" alt="image-20230518154259349"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816074.png" alt="image-20230518154312007"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518154424204.png" alt="image-20230518154424204"></p><ul><li>systemctl [start | stop | restart | status] 服务名</li></ul><p>systemctl status firewalld 查看防火墙的状态</p><ul><li>如果想要将某个东西可以关闭或者开启自启动，要用enable或者disable</li></ul><h3 id="防火墙的原理"><a href="#防火墙的原理" class="headerlink" title="防火墙的原理"></a>防火墙的原理</h3><blockquote><p>防火墙可以理解为筛子，通过预先设置的大小，来过滤掉不符合尺寸的服务</p></blockquote><ul><li>没有防火墙的时候， 外面的东西就可以随便进入</li></ul><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816287.png" alt="image-20230724122724783"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816308.png" alt="image-20230724122807869"></p><ul><li><strong>打开或者关闭端口</strong>但是同时不关闭防火墙</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518160030406.png" alt="image-20230518160030406"></p><p> 查看协议 netstat -anp | more ,最左侧的数据就是协议</p><p>在修改端口状态之后，还有<strong>重新载入</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816001.png" alt="image-20230518160249899"></p><p><code>firewall-cmd --permanent --add-port=111/tcp</code> 注意这里的firewall结尾是没有d的</p><p><code>firewall-cmd --reload</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816016.png" alt="image-20230518160752435"></p><ul><li><p>查看防火墙是否存在</p><p>firewall-cmd –query-port&#x3D;111&#x2F;tcp</p></li><li><p>关闭之后</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518160902340.png" alt="image-20230518160902340"></p><blockquote><p>防火墙是 yes 才能够被访问到</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816233.png" alt="image-20230625112314948"></p><hr><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230625112324723.png" alt="image-20230625112324723"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816882.png" alt="image-20230625112425647"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230625112438681.png" alt="image-20230625112438681"></p><h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><p>top指令 ， 不同于<strong>ps</strong> ，他是<strong>动态的监控</strong></p><p>选项</p><p>-d 秒数 指定top命令每隔<strong>几秒钟更新</strong>，默认是3秒</p><p>-i 使得top不显示<strong>任何闲置或者僵死</strong>的进程</p><p>-p 通过指定监控进程id来仅仅<strong>监控某个进程的状态</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816940.png" alt="image-20230518161751226"></p><p>通过指定监控进程id</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518161610873.png" alt="image-20230518161610873"></p><blockquote><p>第一个数字代表系统时间</p><p>第二个数字代表运行时间</p><p>第三个代表使用的用户</p><p>第四个代表负载均衡（三个负载加起来，除以3 》 0.7说明电脑配置要升级一下了）</p></blockquote><ul><li>交互操作说明</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816192.png" alt="image-20230518162103794"></p><ul><li><p>监控xxx用户， 方法 ： <strong>先输入top 回车， 然后再输入<code>u</code>  在输入用户名，回车即可</strong></p><p>之前没有alan进程，但是我们又登录了alan就新增了一个进程</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518163032902.png" alt="image-20230518163032902"></p><ul><li><p>终止指定进程 方法 ： 输入top回车， 然后再输入k回车， 再输入要结束的id进程号</p></li><li><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518163231249.png" alt="image-20230518163231249"></p></li><li><p>再按下9， 强制删除（型号量）</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518163244507.png" alt="image-20230518163244507"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816101.png" alt="image-20230518163323100"></p><h2 id="netstat指令"><a href="#netstat指令" class="headerlink" title="netstat指令"></a>netstat指令</h2><p>输入 <code>netstat -an</code></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518163519203.png" alt="image-20230518163519203"></p><p>proto : 协议</p><p><code>netstat -anp</code> 会更加详细（会显示哪个进程再调用）</p><h3 id="local-address-and-foreign-address之间的关系"><a href="#local-address-and-foreign-address之间的关系" class="headerlink" title="local address and foreign address之间的关系"></a>local address and foreign address之间的关系</h3><p>local是linux的地址， foreign是windos的地址（这里要看本机的情况而定）</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518164139574.png" alt="image-20230518164139574"></p><ul><li>如果关闭连接之后</li><li>状态是先变成time-Wait 后面才会没有（因为tcp协议会暂时以为是只是网络不好）</li><li>查看sshd服务的信息 <code>netstat -anp | grep ssh</code></li></ul><h2 id="rpm管理"><a href="#rpm管理" class="headerlink" title="rpm管理"></a>rpm管理</h2><ul><li>介绍</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816493.png" alt="image-20230518164911922"></p><p><code>rpm -qa | grep xx</code> 查询已安装的rpm列表</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816500.png" alt="image-20230518165010229"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816515.png" alt="image-20230518165023300"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518165152222.png" alt="image-20230518165152222"></p><p><code>rpm -q firefox</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816052.png" alt="image-20230518165228534"></p><p><code>rpm -qi firefox</code></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518165319466.png" alt="image-20230518165319466"></p><p><code>rpm -al firefox</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816351.png" alt="image-20230518165424630"></p><ul><li><p><strong>查询文件所属的包</strong></p><p>rpm -qf &#x2F;etc&#x2F;passwd</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816588.png" alt="image-20230518165710126"></p><ul><li>删除rpm包</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816935.png" alt="image-20230518165807424"></p><p> 强制删除 <strong>$rpm -e –nodeps foo</strong>  因为存在其他软件，需要依赖于这个安装包</p><ul><li><p>安装rpm包</p><p>rpm -ivh RPM包全路径名称</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518170005403.png" alt="image-20230518170005403"></p></li></ul><h2 id="yum指令"><a href="#yum指令" class="headerlink" title="yum指令"></a>yum指令</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816342.png" alt="image-20230518170511733"></p><p><code>yum list | grep xx</code>查看yum服务器是否又需要安装的软件</p><p><code>yum install xxx</code>下载安装</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>tomcat 安装</p><p>步骤如下：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816428.png" alt="image-20230519150409019"></p><p><code>[Apache Tomcat/8.5.88](http://192.168.202.138:8080/)</code></p><p>然后就可以访问了</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230519152248621.png" alt="image-20230519152248621"></p><ul><li>在apa &#x2F;&#x2F; 的webapps 的root中输入文件</li></ul><p><a href="http://192.168.202.138:8080/wjh.html">192.168.202.138:8080&#x2F;wjh.html</a></p><p><code>/opt/tomcat/apache-tomcat-8.5.88/bin</code>,它的路径为</p><ul><li>注意<strong>使用之前</strong>要先开启<code>./startup.sh</code></li></ul><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><p>下载文件：</p><p><code>[wget](https://so.csdn.net/so/search?q=wget&amp;spm=1001.2101.3001.7020) http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</code></p><p><a href="https://blog.csdn.net/Tommy__li/article/details/127080007">(65条消息) 韩顺平——linux下的mysql安装过程（完全按照视频流程来的）成功版_快乐本乐的博客-CSDN博客</a></p><p>可以参考以上链接安装</p><h2 id="shell编程快速入门"><a href="#shell编程快速入门" class="headerlink" title="shell编程快速入门"></a>shell编程快速入门</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;hello,world~&quot;</span><br></pre></td></tr></table></figure><ul><li><p>直接写脚本名称。运行 但是得加上执行权限</p></li><li><p>使用sh + 脚本名称 就可以不需要加上权限x</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518171847762.png" alt="image-20230518171847762"></p></li></ul><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518171951253.png" alt="image-20230518171951253"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816189.png" alt="image-20230518172413937"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816638.png" alt="image-20230518172427077"></p><ul><li>vim : set nu <strong>可以查看行号</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816704.png" alt="image-20230518172611279"></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816708.png" alt="image-20230519150025794"></p><p>定义环境变量要在&#x2F;etc&#x2F;profile文件中。</p><p><strong>export</strong>之后， 要<strong>source &#x2F;etc&#x2F;profile</strong>文件，才可以显示出来文件</p><ul><li><p>shell的补充</p><p>shell脚本的多行注释（字符串要独立写为一行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开头打这个:&lt;&lt;!</span><br><span class="line"></span><br><span class="line">结尾打这个!</span><br></pre></td></tr></table></figure></li></ul><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816914.png" alt="image-20230519153407645"></p><p>在shcode文件夹中建立一个sh文件</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816385.png" alt="image-20230519153720474"></p><ul><li>输入部分指令之后，得到一下的结果</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230519153803222.png" alt="image-20230519153803222"></p><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816894.png" alt="image-20230519154100220"></p><p><code>$! 后台最后一个运行的进程的进程号结果为</code></p><h2 id="shell-运算符"><a href="#shell-运算符" class="headerlink" title="shell - 运算符"></a>shell - 运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816043.png" alt="image-20230519154542299"></p><ul><li>案例一（还有没有开始弄）</li></ul><p><strong>案例二</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816618.png" alt="image-20230519160135767"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230519160124338.png" alt="image-20230519160124338"></p><h2 id="shell-判断"><a href="#shell-判断" class="headerlink" title="shell 判断"></a>shell 判断</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816399.png" alt="image-20230519160827175"></p><ul><li><p>过程</p><p><strong>中括号和语句之间要有空格</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816515.png" alt="image-20230519161029957"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816060.png" alt="image-20230519180822403"></p><ul><li>如果要写一个为空的判断， 中括号之间必要要有空格（空判断为false）</li><li>如果只在中括号中输入字符， 那么条件为真， 因为非空返回true</li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816241.png" alt="image-20230519181941468"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816641.png" alt="image-20230519182000153"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816797.png" alt="image-20230519182236352"></p><ul><li>需要注意的是，这里的其他输入的是<code>*</code>， 而不是<code>“*”</code>.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">echo &quot;1&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;2&quot;)</span><br><span class="line">echo &quot;2&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;5&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816403.png" alt="image-20230519184205657"></p><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816662.png" alt="image-20230519184121248"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816879.png" alt="image-20230520142137748"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816119.png" alt="image-20230520142443008"></p><ul><li>通过这种方式就可ui理解read函数</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816212.png" alt="image-20230520142603619"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816404.png" alt="image-20230520142731563"></p><ul><li>dirname</li></ul><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520142840366.png" alt="image-20230520142840366"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816275.png" alt="image-20230520143032557"></p><h2 id="综合实战"><a href="#综合实战" class="headerlink" title="综合实战"></a>综合实战</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816305.png" alt="image-20230520144832152"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816628.png" alt="image-20230520145411988"></p><ul><li>备份<strong>数据库</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816834.png" alt="image-20230520145718349"></p><ul><li>删除源文件， 然后打包</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520150317285.png" alt="image-20230520150317285"></p><p><strong>-exec继续执行   命令  ｛｝前面指令得到的内容   \；结尾符号</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520150506395.png" alt="image-20230520150506395"></p><h2 id="自己的实战复习"><a href="#自己的实战复习" class="headerlink" title="自己的实战复习"></a>自己的实战复习</h2><ul><li>时间</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">BACKUP=/root/shcode</span><br><span class="line">DATETIME=$(date +%Y-%m-%d_%H%M%S)</span><br><span class="line">touch $&#123;BACKUP&#125;/$&#123;DATETIME&#125;.sh</span><br></pre></td></tr></table></figure><ul><li>date代表当前的日期， 后面的代表时间分钟秒数，还有小时分钟和秒数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816300.png" alt="image-20230520151707190"></p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520153222128.png" alt="image-20230520153222128"></p><ul><li>重要的任务</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816678.png" alt="image-20230520153338241"></p><p><strong>lastlog 不要用cat查看， 直接打入<code>lastlog</code>就好了</strong></p><p><strong>ulmp 不要用cat 用who就好了</strong></p><h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><ul><li>再<code>/etc/rsyslog.conf</code>文件里面有一个后台程序，会自动的生成这些日志</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520154102859.png" alt="image-20230520154102859"></p><ul><li><p>查看<strong>rsyslog</strong>是否存在</p><p><code>ps -aux | grep rsyslog</code></p><p><code>ps -aux | grep -v rsyslog</code> 反向匹配（选择不含有rsyslog的）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816888.png" alt="image-20230521142403019"></p></li><li><p>查看所有进程状态</p><p><code>systemctl list-unit-files | grep &quot;rsyslog&quot;</code></p></li><li><p>日志类型</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816162.png" alt="image-20230520155917438"></p><ul><li><strong>日志级别</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816219.png" alt="image-20230520155326718"></p><p>一个日志的格式为<code>*.*</code>，第一个<code>*</code>代表<strong>日志的类型</strong>（具体参考第一张图片），第二个<code>*</code>代表日志级别</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816912.png" alt="image-20230520155710048"></p><ul><li>对于一个日志它可以这么查看， 第一个代表时间， 第二个代表用户，第三个代表程序或者服务，第四个发生的事件</li></ul><h2 id="日志管理服务（自定义）"><a href="#日志管理服务（自定义）" class="headerlink" title="日志管理服务（自定义）"></a>日志管理服务（自定义）</h2><ul><li><p>第一步 <code>vim  /etc/rsyslog.conf</code></p></li><li><p>第二步 然后找到一个最后的一个日志类型信息，打入<code>*.*</code>，然后输入<code>/etc/log/wjh.log</code></p></li><li><p>然后reboot</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816947.png" alt="image-20230521143904131"></p></li><li><p>当我输错秘密的时候， 就会产生一下的文件</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521144119246.png" alt="image-20230521144119246"></p><h2 id="日志轮替（把旧的日志文件改名等操作，换成新的）"><a href="#日志轮替（把旧的日志文件改名等操作，换成新的）" class="headerlink" title="日志轮替（把旧的日志文件改名等操作，换成新的）"></a>日志轮替（把旧的日志文件改名等操作，换成新的）</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521144413309.png" alt="image-20230521144413309"></p><p>这个文件规定了<strong>轮替的规则</strong></p><p>但是也可以单独的给某个日志指定策略</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816064.png" alt="image-20230521144541993"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816350.png" alt="image-20230521144818686"></p><p>logrotate。log文件的规则如上。</p><p><strong>自定义</strong>的方法</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816405.png" alt="image-20230521145049833"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521145234326.png" alt="image-20230521145234326"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521145502254.png" alt="image-20230521145502254"></p><p>我们再自定义日志文件的时候，可以把它写到<code>/etc/logrotate.d</code>的目录下。没必要一股儿脑的全部写到<code>/etc/logrotate.conf</code>配置文件中</p><p>我自己写了一个文件为<code>wjh.log</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/var/log/wjh.log</span><br><span class="line">&#123;</span><br><span class="line">        missingok</span><br><span class="line">        daily</span><br><span class="line">        copytruncate</span><br><span class="line">        rotate 7</span><br><span class="line">        notifempty</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日志轮换机制"><a href="#日志轮换机制" class="headerlink" title="日志轮换机制"></a>日志轮换机制</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816480.png" alt="image-20230521150100024"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521150212116.png" alt="image-20230521150212116"></p><p>它会又一个crond 的后台程序， 然后回用logrotate 然后对<code>/etc/logrotate.d</code></p><p>或者是<code>/etc/logrotate.conf</code>来处理</p><h2 id="内存日志"><a href="#内存日志" class="headerlink" title="内存日志"></a>内存日志</h2><ul><li>查看内存日志， 他是写入内存的，而不是文件</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521150410432.png" alt="image-20230521150410432"></p><h2 id="linux定制（先过）"><a href="#linux定制（先过）" class="headerlink" title="linux定制（先过）"></a>linux定制（先过）</h2><p><strong>总的思路</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816437.png" alt="image-20230521152307561"></p><h2 id="备份-实体机做快照"><a href="#备份-实体机做快照" class="headerlink" title="备份 - 实体机做快照"></a>备份 - 实体机做快照</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816680.png" alt="image-20230521153142100"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816171.png" alt="image-20230521153837239"></p><h3 id="restore-回复"><a href="#restore-回复" class="headerlink" title="restore 回复"></a>restore 回复</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816831.png" alt="image-20230521154545118"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061817069.png" alt="image-20230521155219024"></p><h2 id="Nginx-命令"><a href="#Nginx-命令" class="headerlink" title="Nginx 命令"></a>Nginx 命令</h2><p>以下指令都是再sbin目录下运行</p><p><code>/usr/local/nginx/sbin</code></p><ul><li><p>.&#x2F;nginx -v ,显示nginx的版本</p></li><li><p>.&#x2F;nginx -t 检查语法</p></li><li><p>.&#x2F;nginx  启动nginx</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230723163209633.png" alt="image-20230723163209633"></p><ul><li>.&#x2F;nginx stop 停止服务</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230723163722696.png" alt="image-20230723163722696"></p><h2 id="lrzsz-指令"><a href="#lrzsz-指令" class="headerlink" title="lrzsz 指令"></a>lrzsz 指令</h2><p>这是可以用来传输文件的指令</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230724114528812.png" alt="image-20230724114528812"></p><ul><li>他会传输到当前的文件夹里面</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230724115418717.png" alt="image-20230724115418717"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2023/11/06/mysql/"/>
      <url>/2023/11/06/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="报告错误总结"><a href="#报告错误总结" class="headerlink" title="报告错误总结"></a>报告错误总结</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802384.png" alt="image-20230515190512074"></p><p>​              <strong>多半是用了查询语句， 但是执行用的是executeUpdate, 要使用executeQuery</strong></p><p>对于创建文件来说， 它返回的受到影响的行数为0， 所以这时候不要用以下语句来判断是否成功</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803727.png" alt="image-20230515190629844"></p><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>进入数据库的指令</p><p><code>mysql -u root -p</code> ，<strong>我们的密码是（空的）（window） 123456（linux）</strong></p><p>快捷键</p><ol><li>shift+ctrl +c</li><li>shift+ctrl+r</li></ol><ul><li>字符集的一些注意点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802388.png" alt="image-20221113225133612"></p><p><strong>基字符集</strong></p><ul><li>utf-8等等</li></ul><p><strong>这些是数据库排序规则</strong></p><ol><li>utf8_general_ci<code>不区分大小写</code></li><li>utf8_bin<code>区分大小写</code></li></ol><ul><li>删除数据库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803966.png" alt="image-20221113225638295"></p><p><strong>SELECT {*|字段列名}FROM 数据表名 WHERE 查询条件</strong></p><ul><li>你可以用 *来替代所有字段列名</li><li>或者自定义字段列名</li><li>|   代表或者</li></ul><p><strong>LIMIT + 数字</strong>表示打印的个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    customer_number</span><br><span class="line">FROM</span><br><span class="line">    orders</span><br><span class="line">GROUP BY customer_number</span><br><span class="line">ORDER BY COUNT(*) DESC</span><br><span class="line">LIMIT 1</span><br><span class="line"># z</span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802396.png" alt="image-20221113225844499"></p><ul><li>查询</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803549.png" alt="image-20221113231328062"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># t1代表的是表的名字，NAME是这个表定义的名称</span><br><span class="line">SELECT * FROM t1 WHERE NAME = &#x27;tom&#x27;</span><br><span class="line">s</span><br></pre></td></tr></table></figure><h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><p><code>SHOW DATABASES</code></p><ul><li>注意这里要写上s</li></ul><h2 id="显示数据库创建语句"><a href="#显示数据库创建语句" class="headerlink" title="显示数据库创建语句"></a>显示数据库创建语句</h2><p><code>SHOW CREATE DATABASE 名称</code></p><ul><li>名称尽量带上反引号，否则编译器容易误解</li><li>如果名称与关键字重合那就必须带上双引号</li></ul><p><code>SHOW CREATE DATABASE</code>  </p><h2 id="数据库删除语句（慎用）"><a href="#数据库删除语句（慎用）" class="headerlink" title="数据库删除语句（慎用）"></a>数据库删除语句（慎用）</h2><p><code>DROP DATABASE 名称</code></p><h2 id="数据库的备份"><a href="#数据库的备份" class="headerlink" title="数据库的备份"></a>数据库的备份</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802090.png" alt="image-20221115233305552"></p><ul><li>必须在dos操作系统下执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p -B wjh_db05 &gt; d:\\pr\\bak1.sql（会自动创建文件）</span><br></pre></td></tr></table></figure><ul><li>恢复数据(方法一)</li></ul><p>要先进入mysql命令行才能够执行</p><p><code>mysql -u root -p</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source d:\\bak1.sql</span><br></pre></td></tr></table></figure><ul><li>恢复方法二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接手动复制数据库的数据赋值到文件中,放到查询编译器中，执行</span><br></pre></td></tr></table></figure><h2 id="仅仅备份数据库中的表"><a href="#仅仅备份数据库中的表" class="headerlink" title="仅仅备份数据库中的表"></a>仅仅备份数据库中的表</h2><p><code>mysqldump -u root -p 数据库 然后表的名称</code></p><p><strong>一定要熟悉以上的语法</strong></p><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a><strong>创建表</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE table name&#123;</span><br><span class="line"> field1 datatype,</span><br><span class="line"> field2 datatype</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803580.png" alt="image-20221116090408023"></p><ol><li>character set 如果没有指定字符集，就以创建数据库的规则为准</li><li>collate 同上</li><li>engine 同上</li></ol><p>创建方式1： 用图形化创建表</p><p>创建方式2： 用指令创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line"> id INT,</span><br><span class="line"> `name` VARCHAR(255),</span><br><span class="line"> `password` VARCHAR(255),</span><br><span class="line"> `birthday` DATE)</span><br><span class="line"> CHARACTER SET utf8 COLLATE utf8_bin ENGINE INNODB</span><br></pre></td></tr></table></figure><ul><li><strong>后面的类型可以不写</strong></li></ul><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><ol><li>增加一个行叫做image</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">  ADD image VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">  AFTER RESUME</span><br></pre></td></tr></table></figure><ol start="2"><li>修改job列 使其长度为60</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">  MODIFY job VARCHAR(60) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">  AFTER RESUME</span><br></pre></td></tr></table></figure><ol start="3"><li>删除sex这一行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">  DROP sex</span><br></pre></td></tr></table></figure><ol start="4"><li>表名改成 employee</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE emp T10 employee （第一个是数据库，第二个是要修改的原表名称，第三个是修改后的表名</span><br></pre></td></tr></table></figure><ol start="5"><li>修改表的字符集为utf8</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employee CHARACTER SET utf8</span><br></pre></td></tr></table></figure><ol start="6"><li>列名name改成user_name</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employee </span><br><span class="line"> CHANGE `name` `user_name` VARCHAR(64) NOT NULL DEFAULT &#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="MySQL的常用数据类型"><a href="#MySQL的常用数据类型" class="headerlink" title="MySQL的常用数据类型"></a>MySQL的常用数据类型</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804568.png" alt="image-20221116092017426"></p><ol><li>数值类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802392.png" alt="image-20221116092456448"></p><ol start="2"><li>文本类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804791.png" alt="image-20221116092635015"></p><ol start="3"><li>二进制数据类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804504.png" alt="image-20221116092747860"></p><ol start="4"><li>日期类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802448.png" alt="image-20221116092833735"></p><p>​           datetime YYYY-MM-DD HH:MM:SS</p><ol start="5"><li><p>时间戳</p><p><strong>timestamp</strong></p></li></ol><h3 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><ol><li>使用规则：在能够满足需求的情况下，尽量选择小的数据类型</li><li>必须要在数据范围内的数据才能够被存入到数据中</li></ol><h4 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h4><ol><li>打印出来是以二进制的形式输出</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t05(num BIT(8));</span><br><span class="line">INSERT INTO t05 VALUES(254);</span><br><span class="line">SELECT * FROM t05; </span><br></pre></td></tr></table></figure><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t06(</span><br><span class="line"> nums1 FLOAT,</span><br><span class="line"> nums2 DOUBLE,</span><br><span class="line"> nums3 DECIMAL(30,20));</span><br><span class="line">INSERT INTO t06 VALUES(88.661616,88.6151515115151,88.5555555555555);</span><br><span class="line">SELECT *FROM t06;</span><br></pre></td></tr></table></figure><p>输出结果为</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804479.png" alt="image-20221116121209785"></p><ul><li><p>DECIMAL的注意事项</p></li><li><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221116121243929.png" alt="image-20221116121243929"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802145.png" alt="image-20221116121341610"></p></li></ul><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804303.png" alt="image-20221118120951402"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802185.png" alt="image-20221116121735280"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802381.png" alt="image-20221116121843219"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t10(</span><br><span class="line"> `name` VARCHAR(32766))CHARSET gbk;</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 在数据范围内</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t10(</span><br><span class="line"> `name` VARCHAR(32767))CHARSET gbk;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 超过了gbk格式的数据范围</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221116122220141.png" alt="image-20221116122220141"></p><p><strong>提示输入数值过大</strong></p><blockquote><p>问题1：为什么这里要减去三个字节</p><p>回答： 因为要用1~3的字节去记录大小</p><p>问题2：这里的size是代表字符还是字节</p><p>回答：是字符</p></blockquote><ul><li>细节</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804984.png" alt="image-20221118121154289"></p><p><strong>注意这里面的4是字符而不是字节</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t11(</span><br><span class="line"> `name` CHAR(4));</span><br><span class="line">INSERT INTO t11 VALUES(&#x27;abs&#x27;);</span><br><span class="line">SELECT * FROM t11;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802478.png" alt="image-20221118122106130"></p><ul><li>varchar是一个可变长的字符，不会造成空间的浪费，而CHAR只能根据最开始分配的空间来给内存</li><li>但是char的查询速度快于varchar，如果数据的定长的话，我们就尽量去使用char</li><li>如果varchar不够用，可以使用mediumtext或者longtext，或者可以写text</li></ul><p>总 结</p><ol><li>空间大小上： <code>char &gt; varchar</code></li><li>速度快慢上：<code>char &gt; varchar</code></li><li>如果文本过大就选择text</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802520.png" alt="image-20221118122643836"></p><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804913.png" alt="image-20221119143143769"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t14(</span><br><span class="line"> birthday DATE , -- 生日</span><br><span class="line"> jobtime DATETIME ,-- 记录年月日 时分秒</span><br><span class="line"> login_time TIMESTAMP </span><br><span class="line">  NOT NULL DEFAULT CURRENT_TIMESTAMP </span><br><span class="line">  ON UPDATE CURRENT_TIMESTAMP);-- 登录时间</span><br><span class="line">SELECT *FROM t14;</span><br><span class="line">INSERT INTO t14(birthday,jobtime)</span><br><span class="line"> VALUES(&#x27;2022-11-11&#x27;,&#x27;2022-11-11 10:10:10&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804550.png" alt="image-20221119143948153"></p><p><strong>不用输入时间自动跳出来登陆时间</strong></p><p>需要输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `emp`(</span><br><span class="line"> id INT,</span><br><span class="line"> `name` VARCHAR(32),</span><br><span class="line"> sex CHAR(1),</span><br><span class="line"> birthday DATE,</span><br><span class="line"> entry_date DATETIME,</span><br><span class="line"> job VARCHAR(32),</span><br><span class="line"> salary DOUBLE,</span><br><span class="line"> `resume` TEXT) CHARSET utf8 COLLATE utf8_bin ENGINE INNODB;</span><br><span class="line"># 添加的时间</span><br><span class="line">INSERT INTO `emp`</span><br><span class="line"> VALUES(100,&#x27;小妖怪&#x27;,&#x27;男&#x27;,&#x27;2000-11-11&#x27;,</span><br><span class="line"> &#x27;2010-11-10 11:11:11&#x27;,&#x27;巡山的&#x27;,3000,&#x27;大王叫我来巡山&#x27;);</span><br><span class="line">SELECT *FROM `emp`</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221119144705934.png" alt="image-20221119144705934"></p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="insert-语句"><a href="#insert-语句" class="headerlink" title="insert 语句"></a>insert 语句</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221119164904712.png" alt="image-20221119164904712"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 注意写上字符集以及校对规则和引擎</span><br><span class="line">CREATE TABLE `good`(</span><br><span class="line"> id INT,</span><br><span class="line"> goods_name VARCHAR(15),</span><br><span class="line"> price DOUBLE)CHARSET utf8 COLLATE utf8_bin ENGINE INNODB;</span><br><span class="line">INSERT INTO `good` (id,goods_name,price)</span><br><span class="line"> VALUES(10,&#x27;华为手机&#x27;,2000);</span><br><span class="line">INSERT INTO `good` (id,goods_name,price)</span><br><span class="line"> VALUES(20,&#x27;苹果手机&#x27;,3000);</span><br><span class="line">SELECT* FROM good;</span><br><span class="line"></span><br><span class="line">#上诉的insert语句也可以简化写为（但是必须和你写的表的顺序一致）</span><br><span class="line">INSERT INTO `good` </span><br><span class="line"> VALUES(20,&#x27;苹果手机&#x27;,3000);</span><br></pre></td></tr></table></figure><ul><li>注意点</li></ul><ol><li><blockquote><p>插入的数据应当和字段类型相同。</p></blockquote></li></ol><p>错误示范：</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221119170335962.png" alt="image-20221119170335962"></p><p>同时我们用单引号括起来的是一个数字，那么它会进行转型，这种时候就是正确的</p><ol start="2"><li><blockquote><p>数据的长度应该在列的范围内</p></blockquote></li></ol><p>错误示范：</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803671.png" alt="image-20221119170536712"></p><ol start="3"><li><blockquote><p>在values中列出的数据位置必须与被加入的列的排列位置相对应</p></blockquote></li><li><blockquote><p>字符和日期形数据应该包含在单引号中</p></blockquote></li><li><blockquote><p>列可以插入空值（前提是该字段允许为空），insert into table value (null)</p></blockquote></li><li><blockquote><p> insert into tab_name(列名..)</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `goods` v（填入内容） （填入内容） （填入内容）</span><br></pre></td></tr></table></figure><ol start="7"><li><blockquote><p>如果是给表中的所有字段添加数据，可以不写前面的字段名称,但是不能少一条字段</p></blockquote></li><li><blockquote><p>默认值，当不给某个字段值时，如果有默认值就会添加默认值，否则报错</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 这个时候就是可以的</span><br><span class="line">CREATE TABLE &#x27;goods&#x27;(</span><br><span class="line">  id INT,</span><br><span class="line">     &#x27;label&#x27; VARCHAR(10),</span><br><span class="line">     &#x27;price&#x27; DOUBLE </span><br><span class="line"> )</span><br><span class="line">INSERT INTO `goods`(id,goods_name)</span><br><span class="line">  VALUES(80,&#x27;格力手机&#x27;);</span><br><span class="line"># 当表的创建格式为以下的情况的时候,编译器就会报错</span><br><span class="line">CREATE TABLE &#x27;goods&#x27;(</span><br><span class="line">  id INT,</span><br><span class="line">     &#x27;label&#x27; VARCHAR(10),</span><br><span class="line">     &#x27;price&#x27; DOUBLE NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h3 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from xxx(the name of list) where user_name = &quot;yyy&quot;</span><br><span class="line"># 从表名为 xxx 的表中 删除掉名字为 yyy 的 的那一列</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 删除表中的名称为yy的user_name</span><br><span class="line">DELETE FROM xxx</span><br><span class="line">  WHERE user_name = &#x27;yyy&#x27;;</span><br><span class="line"># 删除表中为user_name的数据</span><br><span class="line">DELETE FROM XXX</span><br><span class="line"></span><br><span class="line"># 删除表中邮箱相同的,并且只保留它的id最小值</span><br><span class="line">DELETE p1 from </span><br><span class="line">        Person p1,Person p2</span><br><span class="line">        where </span><br><span class="line">        p1.email=p2.email AND p1.id&gt;p2.id</span><br><span class="line">        </span><br><span class="line">DELETE </span><br><span class="line">FROM</span><br><span class="line"> Person </span><br><span class="line">WHERE</span><br><span class="line"> id NOT IN (SELECT * FROM ( SELECT min( id ) AS id FROM Person GROUP BY email ) t)</span><br><span class="line">    </span><br><span class="line"># delete不能删除某一列的数据</span><br><span class="line"># 如果需要删掉某一行的一个字段，我们需要利用update进行替换</span><br><span class="line">UPDATE employee SET job = &#x27;&#x27; WHERE user_name = &#x27;老妖怪&#x27;</span><br><span class="line"></span><br><span class="line"># 删除表是用drop而不是delete</span><br></pre></td></tr></table></figure><ul><li>因为delete语句不能删除某一列的值（可使用update 设为null)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE xxx(表名称) SET x = &#x27;&#x27; WHERE user_name = &#x27;老妖怪&#x27; </span><br></pre></td></tr></table></figure><h3 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h3><ol><li>将所有的员工薪水修改为5000</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATuE employee SET salary = 5000</span><br></pre></td></tr></table></figure><ol start="2"><li>将姓名为小妖怪的员工修改为3000</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employee set salary = 3000 where user_name = &#x27;小妖怪&#x27; </span><br></pre></td></tr></table></figure><ol start="3"><li>将老妖怪的薪水增加3000</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employee set salary = salary + 3000 where user_name = &#x27;老妖怪&#x27; </span><br></pre></td></tr></table></figure><ul><li>set可以根据需要修改多个字段的值</li></ul><p><code>set xxx = xxxx yyy = yyyy</code></p><h4 id="CASE语句"><a href="#CASE语句" class="headerlink" title="CASE语句"></a>CASE语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 将性别为男的改成女的，女的改成男的</span><br><span class="line">UPDATE salary</span><br><span class="line">SET</span><br><span class="line">    sex = CASE sex</span><br><span class="line">        WHEN &#x27;m&#x27; THEN &#x27;f&#x27;</span><br><span class="line">        ELSE &#x27;m&#x27;</span><br><span class="line">    END;</span><br></pre></td></tr></table></figure><h3 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT  *FROM `student`;</span><br><span class="line"># 去重查询（必须查出来的每一个列都相同）</span><br><span class="line">select DISTINCT english from student</span><br><span class="line"></span><br><span class="line">#如果两个人的英语成select DISTINCT english from student绩相同但是名字不一样</span><br><span class="line">select DISTINCT english name from student</span><br><span class="line">#这个时候，就不会去重</span><br></pre></td></tr></table></figure><h4 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name` (chinese+math+english)from student</span><br><span class="line"># 计算学术三个科目的总分</span><br><span class="line">SELECT `name` as &#x27;名字&#x27;,(chinese+math+english) as &#x27;总分&#x27;</span><br><span class="line">from student</span><br><span class="line"># as可以替换名字</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>   <strong>自己到力扣做题就懂了</strong></p><ul><li><strong>如果想要离散的空间查询需要用到IN</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from student where math in(89,90,91)</span><br><span class="line"># 代表着查询数学成绩为 89, 90 ,91的学生</span><br></pre></td></tr></table></figure><ul><li>模糊匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select *from student where math like &#x27;韩%&#x27;</span><br><span class="line"># 一定要加上%</span><br><span class="line"></span><br><span class="line"># 需要注意的是这里没有讲清楚实际上 :</span><br><span class="line">#如果这里写的是 %韩% 的话那么代表查找存在韩的数据</span><br><span class="line"># 如果是韩% 代表查找以韩开头的数据</span><br><span class="line"># 如果是%韩 , 代表查找 以韩为结尾d</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803693.png" alt="image-20221120094701115"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select * from student </span><br><span class="line">  order by math(默认升序)</span><br><span class="line">select * from student </span><br><span class="line">  order by math asc(升序) // 默认为升序</span><br><span class="line">select * from student </span><br><span class="line">  order by math desc(减序)</span><br><span class="line"></span><br><span class="line"># 排序的组合操作</span><br><span class="line">#如果我们想要部门按照部门号升序，然后按照工资降序</span><br><span class="line">select *from emp </span><br><span class="line"> order by deptno asc, sal desc </span><br></pre></td></tr></table></figure><h2 id="函数-与select配合的"><a href="#函数-与select配合的" class="headerlink" title="函数(与select配合的)"></a>函数(与select配合的)</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><blockquote><p>查询的结果有多少行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*)from student where math&gt;90</span><br><span class="line"># 统计数学大于90的学生</span><br></pre></td></tr></table></figure><ul><li>count(*) 返回满足条件的行数</li><li>count(列):统计满足条件某列有多少个，<strong>但是会排除为null的情况</strong></li></ul><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><blockquote><p>返回满足where条件的行的和 一般使用在数值列中（注意他只能对数值起作用）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select sum(math) from student;</span><br><span class="line"># 统计一个班所有人的数学总成绩</span><br></pre></td></tr></table></figure><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><blockquote><p>求平均值，同上对数值起作用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(math) from student</span><br></pre></td></tr></table></figure><h3 id="max-min"><a href="#max-min" class="headerlink" title="max&#x2F;min"></a>max&#x2F;min</h3><blockquote><p>求最大值或者最小值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select max(math) from student</span><br><span class="line">select min(math) from student</span><br></pre></td></tr></table></figure><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221120100654899.png" alt="image-20221120100654899"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal),max(sal), deptno from employee group by deptno</span><br><span class="line"># 按照部门分组查询平均工资和最高工资</span><br><span class="line"># 需要注意是，一个部门有很多人，每个人的工资不一样</span><br></pre></td></tr></table></figure><p><strong>最后的输出结果为</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121194906997.png" alt="image-20221121194906997"></p><h3 id="having（和group共同使用）"><a href="#having（和group共同使用）" class="headerlink" title="having（和group共同使用）"></a>having（和group共同使用）</h3><p>相当于where条件筛选，他和group是好兄弟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal) as avg_sal,deptno</span><br><span class="line"> from emp group by deptno</span><br><span class="line"> having avg_sal&lt;3000</span><br><span class="line"># 筛选平均工资小于3000的部门9</span><br><span class="line"></span><br><span class="line"># 筛选至少合作过三次的导演</span><br><span class="line">SELECT actor_id, director_id FROM ActorDirector </span><br><span class="line">    GROUP BY actor_id, director_id</span><br><span class="line">    HAVING COUNT(*) &gt;= 3;</span><br><span class="line"># GROUP BY 就是分组，这样子写的话，就是把一对导演和演员分成一组</span><br></pre></td></tr></table></figure><h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803507.png" alt="image-20221121195045357"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select charset(ename) from emp;</span><br><span class="line">返回charset（name）的表</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(ename,&#x27;工作是&#x27;,job) from emp;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121195537204.png" alt="image-20221121195537204"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803104.png" alt="image-20221121195659676"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803107.png" alt="image-20221121200009584"></p><ul><li>练习 以首字母小写的方式显示所有员工emp表的姓名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 方法一</span><br><span class="line">select CONCAT(Lcase(SUBSTRING(ename,1,1)),SUBSTRING(ename,2)) as new_name</span><br><span class="line"> from emp;</span><br><span class="line">## 注意这里的下标从0开始</span><br><span class="line"></span><br><span class="line"># 方法二</span><br><span class="line">select concat(lcase(Left(ename,1)),substring(ename,2)) as new_name;</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803112.png" alt="image-20221121200659389"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121200914705.png" alt="image-20221121200914705"></p><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803736.png" alt="image-20221121201227293"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mes(</span><br><span class="line"> id INT,</span><br><span class="line"> content VARCHAR(30),</span><br><span class="line"> send_time DATETIME);</span><br><span class="line">INSERT INTO mes</span><br><span class="line"> VALUES(1,&#x27;北京新闻&#x27;,CURRENT_TIMESTAMP);</span><br><span class="line">SELECT* FROM mes;</span><br><span class="line"></span><br><span class="line"># 计算时间差的时候其实除了使用DATEDIFF还可以 使用between xxx and xxx（时间用&#x27;&#x27;b）</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121201726906.png" alt="image-20221121201726906"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803151.png" alt="image-20221121201840084"></p><ul><li>请写出以上的所有mysql语句</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121202025586.png" alt="image-20221121202025586"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#如果改成20min之内就是</span><br><span class="line">select * from mes</span><br><span class="line">where date_add(send_time,INTERVAL 20 MINUTE)&gt;=NOW();</span><br></pre></td></tr></table></figure><ul><li>year&#x2F;month&#x2F;date（）</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121202816540.png" alt="image-20221121202816540"></p><p><strong>分别返回年&#x2F;月&#x2F;日</strong></p><ul><li>unix_timestamp返回的是1970-1-1到现在的<strong>秒数</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select unix_timestamp(now()) from xxx</span><br></pre></td></tr></table></figure><ul><li>from_unixtime</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># &#x27;%Y-%m-%d&#x27;(年月日的格式)</span><br><span class="line">select from_unixtime(1618483484,%Y-%m-%d) from dual</span><br><span class="line"># &#x27;%Y-%m-%d %H:%i:%s&#x27;(int转换位年月日的格式)</span><br></pre></td></tr></table></figure><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803540.png" alt="image-20221121203640271"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select user() from dual;</span><br><span class="line"># 返回的是用户ip地址</span><br><span class="line">select database()</span><br><span class="line"># 查询当前使用数据库名称</span><br><span class="line">select MD5(&#x27;HSP&#x27;)from dual </span><br><span class="line"># 在数据库中存放的是加密后的密码（长度是32位）</span><br><span class="line">select password(&#x27;hsp&#x27;)from dual</span><br><span class="line"># 加密函数，mysql数据库的用户密码就是password函数加密</span><br></pre></td></tr></table></figure><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803664.png" alt="image-20221121204649874"></p><p><strong>多分支的任务需求</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121205703208.png" alt="image-20221121205703208"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 如果第一个exp1为真就返回exp2，否则返回expr3</span><br><span class="line">select if(TRUE,&#x27;北京&#x27;,&#x27;上海&#x27;)from dual;</span><br><span class="line">#输出                         北京</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 看上表规则</span><br><span class="line">select if(NULL,&#x27;北京&#x27;，&#x27;上海&#x27;)</span><br><span class="line">#输出                         上海</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多分支</span><br><span class="line"># 判断是否为空要使用is null/is not null</span><br><span class="line">select  ename  IF(comm is null，0.0,comm);</span><br><span class="line">#或者写出</span><br><span class="line">select  ename  IFNULL(comm，0.0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#多分支</span><br><span class="line">select ename, (select case</span><br><span class="line">               when job = &#x27;cherk&#x27; then &#x27;职员&#x27;</span><br><span class="line">               when job = &#x27;manager&#x27; then &#x27;经理&#x27;</span><br><span class="line">               when job = &#x27;salesman&#x27; then &#x27;销售人员&#x27;</span><br><span class="line">               when job end) as &#x27;job&#x27;</span><br><span class="line">               from emp</span><br></pre></td></tr></table></figure><ul><li>模糊匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select ename from list ename Like &quot;__0%&quot;</span><br><span class="line"># 查询ename第三个数字是0的表</span><br><span class="line">select ename from list ename like &quot;s%&quot;</span><br><span class="line"># 查询ename以s作为开头的ename</span><br></pre></td></tr></table></figure><ul><li>分页查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># grammer select * from * limit xxxx</span><br><span class="line">select *from emp order by empno</span><br><span class="line">select * from emp</span><br><span class="line">  order by empno </span><br><span class="line">  limit 0, 3;</span><br><span class="line">select * from emp </span><br><span class="line">  order by empno </span><br><span class="line">  limit 3, 3;</span><br><span class="line">select * from emp</span><br><span class="line">  order by empno</span><br><span class="line">  limit 6,</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li><p>多表查询的时候，<strong>就是列拼接在一起，然后相乘得到行数</strong></p></li><li><p>当有<strong>两个表相同的字段</strong>我们需要做出区分</p></li><li><p>自连接</p></li></ul><p><strong>问题</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221125184303704.png" alt="image-20221125184303704"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 显示员工和他上级的名字</span><br><span class="line"># 把同一张表当作两张表使用</span><br><span class="line"># 需要给表取别名，表名，表别名</span><br><span class="line"># 列名不明确，可以指定列的别名</span><br><span class="line">select worker.ename as &#x27;职员表&#x27;,boss.ename As &#x27;上级表&#x27;</span><br><span class="line">    from emp worker, emp boss# 注意这个可以不用加上as </span><br><span class="line">                where worker.mgr = boss.empno;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mysql子查询"><a href="#mysql子查询" class="headerlink" title="mysql子查询"></a>mysql子查询</h2><h3 id="单行和多行的子查询"><a href="#单行和多行的子查询" class="headerlink" title="单行和多行的子查询"></a>单行和多行的子查询</h3><ul><li>单行子查询：返回单行</li><li>多行子查询：返回多行<ul><li>all ： <strong>所有的条件</strong></li><li>any： <strong>存在一个条件</strong></li></ul></li></ul><p><strong>问题</strong>1</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803218.png" alt="image-20221125185534231"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 子条件</span><br><span class="line">select deptno </span><br><span class="line">  from emp</span><br><span class="line">  where ename = &#x27;SMITH&#x27;</span><br><span class="line"># 然后把他嵌套进去</span><br><span class="line">select* from emp </span><br><span class="line">  where deptno =(</span><br><span class="line">            select deptno </span><br><span class="line">   from emp</span><br><span class="line">   where ename = &#x27;SMITH&#x27;</span><br><span class="line">        ) </span><br></pre></td></tr></table></figure><p><strong>问题2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 薪水大于所有查询子条件的元素 </span><br><span class="line">select ename,sal,deptno </span><br><span class="line">  from emp</span><br><span class="line">  where sal&gt;ALL(</span><br><span class="line">         select sal</span><br><span class="line">              from emp</span><br><span class="line">           where deptno = 30</span><br><span class="line">        )</span><br><span class="line"> # 方法二</span><br><span class="line">select ename,sal,deptno </span><br><span class="line">  from emp</span><br><span class="line">  where sal(</span><br><span class="line">         select MAX(sal)</span><br><span class="line">              from emp</span><br><span class="line">           where deptno = 30</span><br><span class="line">        )</span><br><span class="line">#  求薪水最小的就反过来</span><br></pre></td></tr></table></figure><ul><li>any</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select sal , empno </span><br><span class="line"> from emp</span><br><span class="line"> where sal &gt; any(</span><br><span class="line">     select sal </span><br><span class="line">         from emp</span><br><span class="line">         where dep = 30;</span><br><span class="line">    )</span><br><span class="line">当前元素比dep= 30的任一一个元素的val要大</span><br><span class="line">select sal ,empno</span><br><span class="line"> from emp</span><br><span class="line"> where sal &gt; (</span><br><span class="line">     select min(sal) </span><br><span class="line">         from emp</span><br><span class="line">         where dep = 30;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="子查询的临时表"><a href="#子查询的临时表" class="headerlink" title="子查询的临时表"></a>子查询的临时表</h3><p>任务：我们需要查询每一个商品类别中最高价格的商品信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 每一个商品种类最高价格的查询</span><br><span class="line">select cat_id, MAX(shop_price)</span><br><span class="line">  from ecs_goods</span><br><span class="line">  Group BY cat_id</span><br><span class="line"># 实现</span><br><span class="line">select goods_id ecs_goods.cat_id, goods_name,shop_price</span><br><span class="line">  from(</span><br><span class="line">          select cat_id ,MAX(shop_price) as max_price</span><br><span class="line">             from ecs_goods</span><br><span class="line">             group by cat_id</span><br><span class="line">        )temp# 这个就被叫做临时表</span><br><span class="line">        , ecs_goods</span><br><span class="line">        where temp.cat_id = ecs_goods.cat_id</span><br><span class="line">        AND temp.max_price = ecs_goods.shop_price </span><br><span class="line"></span><br><span class="line"># 从员工表中找到一个工资比经理高的员工</span><br><span class="line"> select a.Name as Employee </span><br><span class="line"> from Employee a, (select Salary,Id from Employee) b</span><br><span class="line"> where a.ManagerId=b.Id and a.Salary &gt; b.Salary </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> # 注意在写完临时表后必须给临时表命名命名格式是 在括号后面直接写 表的名字，或者是写上as 表名</span><br><span class="line"> select  k.c as employee </span><br><span class="line">                from (</span><br><span class="line">                    select a.name as c from employee as a,employee as b </span><br><span class="line">                    where a.managerId = b.id and a.salary&gt;b.salary</span><br><span class="line">                )as `k`</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#子表</span><br><span class="line">select deptno, job</span><br><span class="line">  from emp</span><br><span class="line">  where ename = &#x27;SMITH&#x27;</span><br><span class="line">select *from emp </span><br><span class="line">  //类似于python的列表， 可以进行多段匹配</span><br><span class="line">  where(deptno,job)=(</span><br><span class="line">            select deptno, job</span><br><span class="line">   from emp</span><br><span class="line">   where ename = &#x27;SMITH&#x27;</span><br><span class="line">        )AND ename !=&#x27;SMITH&#x27;;</span><br></pre></td></tr></table></figure><ul><li>练习一:<strong>查找每一个部门工资高于本部门平均工资的人的资料</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 找到每一个部门,的平均工资</span><br><span class="line">select deptno AVG(sal) as avg_sal</span><br><span class="line">  from emp</span><br><span class="line">  group by deptno</span><br><span class="line">  </span><br><span class="line">#  将该表作为一个临时表</span><br><span class="line">select ename, sal, temp.avg_sal,emp.deptno from emp,(</span><br><span class="line">  select deptno AVG(sal) as avg_sal</span><br><span class="line">  from emp</span><br><span class="line">  group by deptno </span><br><span class="line">  )temp where emp.deptno = temp.deptno AND emp.sal&gt;temp.avg_sal;</span><br></pre></td></tr></table></figure><ul><li>练习二: <strong>查找每一个部门工资最高的人的详细资料</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 弄出一个子查询(每一个部门最高工资的人的)</span><br><span class="line">select dentno, MAX(sal) as max_sal</span><br><span class="line">      from emp</span><br><span class="line">                        group by deptno</span><br><span class="line">                      </span><br><span class="line">                      </span><br><span class="line"># 然后当作临时表进行查询</span><br><span class="line">select ename,emp.deptno,max_sal</span><br><span class="line">   from emp ,(</span><br><span class="line">                select dentno, MAX(sal) as max_sal</span><br><span class="line">                from emp</span><br><span class="line">                group by deptno</span><br><span class="line">            )temp where emp.deptno = temp.deptno AND emp.sal = temp.max_sal</span><br></pre></td></tr></table></figure><ul><li>练习三: <strong>查询每一个部门的信息,包括部门名,编号,地址和人员数量</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--1. 部门名 来自 dept表</span><br><span class="line">select count(*),deptno</span><br><span class="line">  from emp</span><br><span class="line">  group by deptno</span><br><span class="line"></span><br><span class="line">select dname, dept, deptno, loc ,tmp.per_num as&#x27;人数&#x27;</span><br><span class="line">  from  (</span><br><span class="line">            select count(*) as per_num,deptno</span><br><span class="line">            from emp</span><br><span class="line">            group by deptno</span><br><span class="line">        ) tmp, dept</span><br><span class="line">        where tmp.deptno = dept.deptno</span><br><span class="line"></span><br><span class="line"># select 也可以改写为tmp.*,这样代表tmp的所有字段</span><br><span class="line">select tmp.*, dname,loc</span><br><span class="line">  from dept,(</span><br><span class="line">            select count(*) as per_num,deptno</span><br><span class="line">            from emp</span><br><span class="line">            group by deptno</span><br><span class="line">        ) tmp</span><br><span class="line">        where tmp.deptno = dept.deptno</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h2 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h2><p>目的:</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221126081534874.png" alt="image-20221126081534874"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 复制一个表的数据到另一个表</span><br><span class="line">insert into my_tab01</span><br><span class="line">  (id,`name`,sal,job,deptno)</span><br><span class="line">  select empno,ename,sal,job,deptno from emp&#x27;</span><br><span class="line"># 自我复制</span><br><span class="line">insert into my_tab02</span><br><span class="line">  select * from my_tab02</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>题目如何去掉一个表的重复记录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> # 把表的结构复制到emp表中,这样就不用重复打那么多字了(注意是表的结构)</span><br><span class="line"> create table my_tab02 like emp;</span><br><span class="line"> </span><br><span class="line"># 构造重复行 </span><br><span class="line"> insert into my_tab02</span><br><span class="line">  select * from my_tab02</span><br><span class="line"> # 现在就有很多重复的行,那如何去重呢</span><br><span class="line"> </span><br><span class="line"> # 方法就是创建一个临时表,</span><br><span class="line"> # 挑选这个表的distinct * from,插入到另一个表中</span><br><span class="line"> # 然后删除原表,新表改成原表的名字</span><br><span class="line"> </span><br><span class="line">create table my_tmp like my_tab02</span><br><span class="line">insert into my_tmp </span><br><span class="line">  select distinct * from my_tab02;</span><br><span class="line">delect from my_tab02;</span><br><span class="line">insert into my_tab02 </span><br><span class="line">   select * from my_tmp;</span><br><span class="line">   </span><br><span class="line"># 或者我们也可以写成这样，来修改名字</span><br><span class="line"># [old] rename to [new]</span><br><span class="line">alter table my_tab02 rename to my_tmp</span><br></pre></td></tr></table></figure><h2 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h2><ul><li><code>union all将两个查询结果合并，不会去重</code></li><li><code>union就是两个结 果合并，回去重，事实上很像or</code></li></ul><h2 id="表的外连接"><a href="#表的外连接" class="headerlink" title="表的外连接"></a>表的外连接</h2><ul><li>如果要搞一个表的相同两个集合</li></ul><h4 id="表的自连接"><a href="#表的自连接" class="headerlink" title="表的自连接"></a>表的自连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">method1 :</span><br><span class="line">select </span><br><span class="line"> *</span><br><span class="line"> from emp.worker , emp.boss</span><br><span class="line"> where worker.mg</span><br><span class="line">SELECT</span><br><span class="line">     a.NAME AS Employee</span><br><span class="line">FROM Employee AS a JOIN Employee AS b</span><br><span class="line">     ON a.ManagerId = b.Id</span><br><span class="line">     AND a.Salary &gt; b.Salary</span><br><span class="line">相当于from两个表连接在一起      </span><br><span class="line">     </span><br></pre></td></tr></table></figure><p>问题<img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221127080047582.png" alt="image-20221127080047582"></p><p>发现两个表合并不能很好的实现</p><p>引出我们的外连接</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221127080338884.png"></p><p>引出我们的外连接问题<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803063.png" alt="image-20221127080727053"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 即便左表没有和右表连接的地方，也会出现左表,且左表为null</span><br><span class="line">select &#x27;name&#x27; stu.id,</span><br><span class="line">  from stu LEFT JOIN exam</span><br><span class="line">  ON stu.i d = exam.id</span><br><span class="line">  </span><br><span class="line"># 左连接如下写法</span><br><span class="line">select &#x27;name&#x27; stu.id,</span><br><span class="line">  from stu RIGHT JOIN exam</span><br><span class="line">  ON stu.id = exam.id</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221127080923568.png" alt="image-20221127080923568"></p><p>问题<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803169.png" alt="image-20221127081333443"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select eptno.id,ename,work </span><br><span class="line">  from company left join emp</span><br><span class="line">  ON where company.id = emp.id</span><br></pre></td></tr></table></figure><h2 id="mysql的约束"><a href="#mysql的约束" class="headerlink" title="mysql的约束"></a>mysql的约束</h2><ul><li><p>查看约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#使用dec+表名</span><br><span class="line">dec t17</span><br><span class="line"># 就会显示约束的情况</span><br></pre></td></tr></table></figure></li></ul><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><ul><li>主键列的值是不可以重复的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在字段后面添加primary key就是把一个字段变成主键</span><br><span class="line">create table t17(</span><br><span class="line">  id int primary key,</span><br><span class="line">  `name` varchar(32),</span><br><span class="line">  emain varchar(32));</span><br><span class="line">        </span><br></pre></td></tr></table></figure><ul><li>主键插入的元素不可以为<strong>null</strong></li><li>一个表只能有一个主键，但可以<strong>复合主键</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 只有当id和name都和表中的一个数据相同的时候，才不能插入</span><br><span class="line">create table t17(</span><br><span class="line">  id int,</span><br><span class="line">  `name` varchar(32),</span><br><span class="line">  emain varchar(32)</span><br><span class="line">  primary key(id,`name`));--这就是复合主键</span><br></pre></td></tr></table></figure><ul><li>定义主键的方式二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table t19(</span><br><span class="line">  id int,</span><br><span class="line">     `name` varchar(32),</span><br><span class="line">     emain varchar(32),</span><br><span class="line">     primary key(`name`)--把定义写在后面</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table t19(</span><br><span class="line">    id int unique,--id不可以重复</span><br><span class="line">    `name` varchar(32),</span><br><span class="line">    ename varchar(32),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>如果unique没有增加not null约束，那么你就可以添加null的元素，<strong>而且null可以填写多个</strong>（当然非null不能填写多个）</li><li>一张表中可以有<strong>多个unique字段</strong></li><li>primary key和unique的区别在于，<strong>primary key在一个表中只能存在一次，但是unique可以有多个</strong>，其他的特征都是相同的</li></ul><h2 id="表的外键"><a href="#表的外键" class="headerlink" title="表的外键"></a>表的外键</h2><blockquote><p>如果我们要求每一个学生所在的班级编号是存在的班级编号，我们就可以把class_id做成外键约束</p></blockquote><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221129233418189.png" alt="image-20221129233418189"></p><ul><li>相互约束的表格，必须得先删除左边的表，才能删除右边的表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 创建主表</span><br><span class="line">CREATE TABLE my_class(</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">     `name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;);</span><br><span class="line"> </span><br><span class="line"># 创建从表</span><br><span class="line">CREATE TABLE my_stu(</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">     `name`  VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">     class_id INT,</span><br><span class="line">     # 制定外键关系</span><br><span class="line">     FOREIGN KEY(class_id) REFERENCES my_class(id))</span><br><span class="line">  )</span><br><span class="line">  // 第一个是key（从表的属性）re（主表（属性））</span><br><span class="line">  </span><br><span class="line">INSERT INTO my_class</span><br><span class="line"> VALUES(100,&#x27;java&#x27;),(200,&#x27;web&#x27;);   </span><br><span class="line">    #成功插入</span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"> VALUES(1,&#x27;tom&#x27;,100),(2,&#x27;jack&#x27;,200);</span><br><span class="line"> #成功插入</span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"> VALUES(3,&#x27;hsp&#x27;,300);</span><br><span class="line"> #插入失败</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803973.png" alt="image-20221130115600150"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 4</span><br><span class="line">insert into my_stu</span><br><span class="line">  values(5, &#x27;king&#x27;, NULL);</span><br><span class="line"># 注意这是不会报错的</span><br><span class="line"># 5</span><br><span class="line">delete from my_class</span><br><span class="line">  where id == 5;</span><br><span class="line"># 外键约束失败了， 数据不能随意删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="check"><a href="#check" class="headerlink" title="check"></a>check</h2><ul><li><p>mysql15.7,只做语法校验，不会生效</p><p>oracle ,sql server便会生效</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table t23(</span><br><span class="line">  id int primary key,</span><br><span class="line">  `name` varchar(32),</span><br><span class="line">  sex varchar(6) check(sex in(&#x27;man&#x27;,&#x27;woman&#x27;))),</span><br><span class="line">  sal double check(sal&gt;1000 AND sal&lt;2000)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h2 id="ENUM"><a href="#ENUM" class="headerlink" title="ENUM"></a>ENUM</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sex enum(&#x27;男&#x27;,&#x27;女&#x27;)not null</span><br><span class="line"># 表示sex只可能是男生或者女生</span><br></pre></td></tr></table></figure><h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803037.png" alt="image-20221204221806824"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t24</span><br><span class="line"> (id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line"> email VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line"> `name` VARCHAR(32)NOT NULL DEFAULT &#x27;&#x27;);</span><br><span class="line">DESC t24</span><br><span class="line">INSERT INTO t24 </span><br><span class="line"> VALUES(NULL,&#x27;jack@qq.com&#x27;,&#x27;jack&#x27;);</span><br><span class="line"> </span><br><span class="line"># 方法二</span><br><span class="line"># 注意这里必要写参量</span><br><span class="line">insert into t24</span><br><span class="line"> (email, &#x27;name&#x27;) values(&#x27;jack@qq.com&#x27;, &#x27;jack&#x27;);</span><br><span class="line">SELECT* FROM t24</span><br><span class="line"># 出现null的时候会自动变成1</span><br></pre></td></tr></table></figure><ul><li><p>细节</p><ol><li><p>一般来说自增长需要和primary key配合使用</p></li><li><p>自增长也可以单独使用（但是需要配合一个unique）</p></li><li><p>自增长修饰的字段为整数形的（虽然小数也可以但是非常非常少这样使用）</p></li><li><p>自增长默认从1开始，你也可以通过如下命令修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table t24 auto_increment = 100</span><br><span class="line"># 下次开始的时候就是从100开始</span><br></pre></td></tr></table></figure></li><li><p>如果你添加数据时，<strong>给自增长字段指定的有值，则以指定的值为准，如果指定了自增长，一般来说，就按照自增长的规则来添加数据</strong></p></li></ol></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引优化速度"><a href="#索引优化速度" class="headerlink" title="索引优化速度"></a>索引优化速度</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221204223135245.png" alt="image-20221204223135245"></p><ul><li><p>当表的元素特别多的时候，在没有创建索引时，我们的查询一条记录会非常慢</p></li><li><p>创建索引</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># create index 索引的名称 on 表名 (列名)</span><br><span class="line">create index empno_index on emp (empno)</span><br><span class="line"># 创建索引之后，在select贼快,但是在创建索引的过程中需要一些时间，并且内存会变大</span><br><span class="line">select * from emp where ename = &#x27;axJxC&#x27;;</span><br></pre></td></tr></table></figure><h3 id="索引机制"><a href="#索引机制" class="headerlink" title="索引机制"></a>索引机制</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803256.png" alt="image-20221204224422620"></p><ul><li><p>索引的原理</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803286.png" alt="image-20221204224635635"></p></li></ul><p> 使用索引后，就会形成一个数据结构，比如二叉树。这个有序的二叉树就会存储这些数据</p><ul><li><p>坏处</p><ol><li><p>占用<strong>磁盘空间</strong></p></li><li><p>会对<strong>update delete insert造成一定的影响</strong></p></li></ol></li></ul><p>但是因为<strong>select在业务开发中的使用次数多于update delete insert之和</strong>,所以这个东西还是特别使用的</p><h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><ul><li><p>查询一个表是否有索引</p></li><li><p>添加唯一索引</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index id_index on t25(id);</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除索引</span><br><span class="line">drop index id_index on t25</span><br><span class="line"></span><br><span class="line"># 删除主键索引</span><br><span class="line">alter table drop primary key </span><br></pre></td></tr></table></figure><ul><li>查询索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 方式1</span><br><span class="line">show index from 表名</span><br><span class="line"></span><br><span class="line"># 方式二</span><br><span class="line">show indexes from 表名</span><br><span class="line"></span><br><span class="line"># 方式三</span><br><span class="line">DESC b</span><br></pre></td></tr></table></figure><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p> 主键就是<strong>一种索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table t11(</span><br><span class="line">id int primary key,-- 主键，同时也是索引</span><br><span class="line">name varchar(32))</span><br><span class="line">);</span><br><span class="line">create table t12(</span><br><span class="line">id int unique,-- 主键，同时也是索引</span><br><span class="line">name varchar(32))</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><ul><li>这是一种最常用的索引。</li></ul><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t25(</span><br><span class="line"> id INT,</span><br><span class="line"> `name` VARCHAR(32));</span><br><span class="line">INSERT INTO t25</span><br><span class="line"> VALUES(20,&quot;java&quot;);</span><br><span class="line">SHOW  INDEXES FROM t25 </span><br><span class="line"># 如果某列值是不重复，那么优先考虑唯一索引，否则考虑普通索引</span><br><span class="line">CREATE UNIQUE INDEX id_index ON t25(id);</span><br><span class="line"></span><br><span class="line"># 添加索引方式2</span><br><span class="line">alter table t25 add index id_index (id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加主键索引</span><br><span class="line">alter table t26 add primary key (id)</span><br></pre></td></tr></table></figure><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><ul><li>我们常用solr和elasticsearch（ES）。</li></ul><h2 id="mysql事务"><a href="#mysql事务" class="headerlink" title="mysql事务"></a>mysql事务</h2><ul><li>事务的理解</li></ul><p>现在需要把多个数据视为一个整体。将多个dml（delete，update，insert）当做一个整体，要么全部成功，要么全部失败</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103115023554.png" alt="image-20230103115023554"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table t27&#123;</span><br><span class="line"> id int,</span><br><span class="line"> `name` varchar(32)</span><br><span class="line">&#125;</span><br><span class="line">start transaction </span><br><span class="line">savepoint a</span><br><span class="line">insert into t27 values(200,&#x27;javk&#x27;);</span><br><span class="line">rollback a</span><br><span class="line"># commit 就会真的生效了，还会把所有的回滚机制回退。 </span><br><span class="line">commit </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803202.png" alt="image-20230506232037664"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction  也可以写成 set autocommit = off;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803366.png" alt="image-20230103120031423"></p><ul><li>默认情况下会自动提交事务，但是不会保持。</li><li>必须使用innODB引擎才能使用支持事务</li></ul><h3 id="mysql事务隔离级别"><a href="#mysql事务隔离级别" class="headerlink" title="mysql事务隔离级别"></a>mysql事务隔离级别</h3><p> <img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103120900930.png" alt="image-20230103120900930"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803816.png" alt="image-20230103120909327"></p><ul><li>更好理解的方式</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230507141313883.png" alt="image-20230507141313883"></p><ul><li>知乎的一篇博客（讲的也可以）</li></ul><p><a href="https://zhuanlan.zhihu.com/p/150107974">大白话讲解脏写、脏读、不可重复读和幻读 - 知乎 (zhihu.com)</a></p><h3 id="隔离级别的详细说明"><a href="#隔离级别的详细说明" class="headerlink" title="隔离级别的详细说明"></a>隔离级别的详细说明</h3><ul><li>脏读就是在没有<strong>commit</strong>的时候，一个事务被修改了，另一端也可以被查询到</li><li>不可重复读和幻读是，你commit了，当这个事务在commit之前被修改了，那么另一端就可以看到</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103121208049.png" alt="image-20230103121208049"></p><ul><li>可串行化在<strong>事物没有提交</strong>的时候， 就会卡住不会动</li></ul><h3 id="查看mysql的隔离级别"><a href="#查看mysql的隔离级别" class="headerlink" title="查看mysql的隔离级别"></a>查看mysql的隔离级别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看隔离级别</span><br><span class="line">select @@tx_isolation</span><br><span class="line"></span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803598.png" alt="image-20230103145804494"></p><ul><li>查看系统隔离级别</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看系统隔离级别</span><br><span class="line">suselect @@global.tx_isolation</span><br></pre></td></tr></table></figure><h3 id="修改一个控制台的隔离级别设置"><a href="#修改一个控制台的隔离级别设置" class="headerlink" title="修改一个控制台的隔离级别设置"></a>修改一个控制台的隔离级别设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level 隔离级别</span><br><span class="line"># 被设置为读未提交的隔离级别</span><br><span class="line">比如：set session transaction isolation level read uncommitted</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>修改系统隔离级别</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置系统当前隔离级别</span><br><span class="line">set global transaction isolation level 隔离级别</span><br></pre></td></tr></table></figure><ul><li><strong>mysql默认的事务隔离级别是repeatable read，一般情况下，没有特殊要求，没有必要修改</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803898.png" alt="image-20230103160128015"></p><h2 id="mysql表的类型和存储引擎"><a href="#mysql表的类型和存储引擎" class="headerlink" title="mysql表的类型和存储引擎"></a>mysql表的类型和存储引擎</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103162842363.png" alt="image-20230103162842363"></p><ul><li>事务安全型比如说是InnoDB</li><li>非事务安全性就是其他的引擎</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803217.png" alt="image-20230103163129815"></p><ul><li><p>表锁的级别高一些， 锁的更多</p></li><li><p>细节说明：</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103163509171.png" alt="image-20230103163509171"></p><h2 id="myisam引擎"><a href="#myisam引擎" class="headerlink" title="myisam引擎"></a>myisam引擎</h2><p><strong>速度快，不支持外键，和事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table t28(</span><br><span class="line">  id int,</span><br><span class="line">  `name` varchar(32))engine myisam;</span><br><span class="line">start transaction;</span><br><span class="line">savepoint t1;</span><br><span class="line">insert into t28 values(1,&#x27;jack&#x27;);</span><br><span class="line">select* from t28;</span><br><span class="line"># 这里就会报错。因为myisam引擎不支持回滚。</span><br><span class="line">rollback to t28</span><br></pre></td></tr></table></figure><h2 id="memory引擎"><a href="#memory引擎" class="headerlink" title="memory引擎"></a>memory引擎</h2><p>数据存储在内存中</p><p>执行速度很快，<strong>但是关闭数据库的时候，就会出现删除记录，但是会保留结构。</strong>， 但是<strong>表的结构还是存在</strong>的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table t28(</span><br><span class="line">  id int,</span><br><span class="line">  `name` varchar(32))engine memory;</span><br><span class="line">insert int t29(</span><br><span class="line">   (1,&#x27;tom&#x27;),(2,&#x27;jack&#x27;),(3,&#x27;hsp&#x27;) );</span><br><span class="line">select* from t29</span><br></pre></td></tr></table></figure><ul><li><p>三种引擎的抉择</p><p>当你<strong>不需要进行事务处理的时候</strong>就优先选择<strong>myisam</strong>.</p><p>否则就选择innoDB，如果<strong>代表用户的状态</strong>的时候，用户的状态频繁改动，我们就可以选择memory引擎（<strong>比如用户在线的状态</strong>）。</p></li><li><p>修改存储引擎</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将表的存储引擎修改为innoDB</span><br><span class="line">alter table `t29` engine = innoDB</span><br></pre></td></tr></table></figure><h2 id="视图原理"><a href="#视图原理" class="headerlink" title="视图原理"></a>视图原理</h2><ul><li><p><strong>视图和对应的真实表</strong>的关系</p></li><li><p>视图的总结</p><ul><li>视图是根据基本来创建的，视图是虚拟的表</li><li>视图也有列，数据来自基表的映射（相当于一个指针）。</li><li>通过视图可以修改<strong>基表的数据</strong></li><li>基表的改变，也会影响到视图的数据</li></ul><p>而且基表不能直接查看，只能通过这个视图来访问</p></li></ul><h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103170610014.png" alt="image-20230103170610014"></p><ul><li>查看视图的view语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create VIEW emp_view01</span><br><span class="line">  AS</span><br><span class="line">  SELECT empno, ename,job,deptno from emp;</span><br><span class="line"># 查看视图</span><br><span class="line">DESC emp_view01;</span><br></pre></td></tr></table></figure><ul><li><p>查看创建视图的指令</p></li><li><p>修改视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update emp_view01</span><br><span class="line">  set job = &quot;MANAGER&quot;</span><br><span class="line">  WHERE empno = 7369;</span><br><span class="line"># 发现基表也发生了变化，而且该表基表，视图也会发生改变</span><br></pre></td></tr></table></figure></li></ul><h3 id="视图最佳实践"><a href="#视图最佳实践" class="headerlink" title="视图最佳实践"></a>视图最佳实践</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803634.png" alt="image-20230103171706923"></p><ul><li>这样就可以创建一个视图，然后以后可以直接拿来反复用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create view `view_032`</span><br><span class="line">  as</span><br><span class="line">  select empno, ename, dname,grade </span><br><span class="line">  from emp, dept,salgrade</span><br><span class="line">  where emp.deptno = dept.deptno AND</span><br><span class="line">  (sal Between losal AND hisal)</span><br></pre></td></tr></table></figure><ul><li>映射到多张表的方法，就是映射到多个表格之间的笛卡尔积。</li></ul><h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103172856098.png" alt="image-20230103172856098"></p><ul><li>当我们做项目开发时，可以根据不同的开发人员，赋给他相应的mysql操作权限</li><li>所以，mysql数据库管理人员，根据需要创建不同的用户名，赋给相应的权限，供人员使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个hsp_edu的用户，他可以获得管理数据库的部分权限</span><br><span class="line">CREATE USER &#x27;hsp_edu&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br><span class="line"># 删除用户</span><br><span class="line">DROP user `名称`@`localhost`;</span><br></pre></td></tr></table></figure><ul><li>登陆</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103174126035.png" alt="image-20230103174126035"></p><p>点击那个绿色的充电器符号，然后就可以改变你的身份为wjh</p><ul><li>修改密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for `wjh`@`localhost` = password(&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure><h3 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权"></a>给用户授权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 库.对象名 to `用户名`@`登录位置`</span><br><span class="line"># 直接赋给一个用户全部权限</span><br><span class="line">grant all on *.* to `用户名`@`登录位置`</span><br></pre></td></tr></table></figure><ul><li>练习题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803679.png" alt="image-20230103175025671"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1</span><br><span class="line">create user `wjh`@`localhost` indentified by &#x27;123456&#x27;;</span><br><span class="line"># 2</span><br><span class="line"> # 使用root 用户创建testdb,表为news</span><br><span class="line">create database testdb</span><br><span class="line">create table news(</span><br><span class="line">  id int,</span><br><span class="line">  content varchar(32));</span><br><span class="line"># 添加一个测试数据</span><br><span class="line">insert into news values(100,&#x27;数据库&#x27;);</span><br><span class="line">grant select ,insert </span><br><span class="line"> on testdb.news</span><br><span class="line"> to `wjh`@`localhost`</span><br><span class="line"># 但是在wjh的用户，就不能更改这个用户的数据</span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 表示xxx用户在192.168.1.* 的ip可以登录mysql</span><br><span class="line">create user `smith`@`192.168.1.%`</span><br><span class="line"></span><br><span class="line"># 在删除用户的时候，如果host不是%，需要明确制定，用户@host值</span><br><span class="line">drop user jack-- 默认就是drop user `jack`@`%`</span><br><span class="line">drop user `smith`@`192.168.1.%`表示xxx用户在192.168.1.*d</span><br></pre></td></tr></table></figure><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><ul><li>查找第n高的数据·</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select DISTINCT</span><br><span class="line"> salary as xx</span><br><span class="line">from</span><br><span class="line"> employee</span><br><span class="line">order by salary desc</span><br><span class="line">limit 1 offset 1</span><br><span class="line">// offset代表跳过多少个元素</span><br><span class="line">// 但是会遇到会空的情况， 我们可以利用子表查询,当为空的时候，就会返回一个null</span><br><span class="line">SELECT</span><br><span class="line">    (SELECT DISTINCT</span><br><span class="line">            Salary</span><br><span class="line">        FROM</span><br><span class="line">            Employee</span><br><span class="line">        ORDER BY Salary DESC</span><br><span class="line">        LIMIT 1 OFFSET 1) AS SecondHighestSalary</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p> 我们还可以使用ifnull函数</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803774.png" alt="image-20230504121726459"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    IFNULL(</span><br><span class="line">      (SELECT DISTINCT Salary</span><br><span class="line">       FROM Employee</span><br><span class="line">       ORDER BY Salary DESC</span><br><span class="line">        LIMIT 1 OFFSET 1),</span><br><span class="line">    NULL) AS SecondHighestSalary</span><br></pre></td></tr></table></figure><ul><li>求第N高的薪水</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 先让N减去1</span><br><span class="line">set N := N - 1;</span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">  distinct salary</span><br><span class="line">from </span><br><span class="line">  Employee</span><br><span class="line">order by </span><br><span class="line">  salary desc</span><br><span class="line">limit 1 offset N</span><br><span class="line"></span><br><span class="line"># distinct 和 group by一个元素都可以起到去重的效果。</span><br><span class="line"></span><br><span class="line"># 子查询实现</span><br><span class="line">    select </span><br><span class="line">      distinct salary</span><br><span class="line">      from employee e </span><br><span class="line">      where </span><br><span class="line">      (select count(distinct salary) from employee where salary &gt; e.salary) = N</span><br></pre></td></tr></table></figure><h1 id="Java-基础知识补充"><a href="#Java-基础知识补充" class="headerlink" title="Java - 基础知识补充"></a>Java - 基础知识补充</h1><p><strong>Properties的作用</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230517133747245.png" alt="image-20230517133747245"></p><h1 id="java-jdbc"><a href="#java-jdbc" class="headerlink" title="java - jdbc"></a>java - jdbc</h1><p>导入 mysql - jdbc 的jar文件</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230528222459750.png" alt="image-20230528222459750"></p><h2 id="jdbc概述"><a href="#jdbc概述" class="headerlink" title="jdbc概述"></a>jdbc概述</h2><p>该图展现了java连接数据库的模式</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803385.png" alt="image-20230513130330541"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803717.png" alt="image-20230513130431706"></p><h3 id="jdbc-编写的步骤"><a href="#jdbc-编写的步骤" class="headerlink" title="jdbc 编写的步骤"></a>jdbc 编写的步骤</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513174544652.png" alt="image-20230513174544652"></p><ul><li>连接</li></ul><p><code>jdbc:mysql://localhost::3306/hsp_db02</code></p><p>”jdbc:mysql”是固定的，代表的是协议</p><ul><li><p>3306 代表监听的端口</p></li><li><p>hsp_db02 代表你要连接的数据库</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513183647741.png" alt="image-20230513183647741"></p><ul><li>第一个jdbc代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjh.jdbc;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 这是第一个jdbc程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbc01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2。得到链接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="comment">// 将用户名和密码放入到Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        <span class="comment">// 3；执行sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into actor values(null, &#x27;刘德华&#x27;, &#x27;男&#x27;, &#x27;1970-11-11&#x27;, &#x27;110&#x27;)&quot;</span>;</span><br><span class="line">        <span class="comment">// 用于执行静态sql语句并返回其生成对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connect.createStatement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> statement.executeUpdate(sql); <span class="comment">// dml语句 返回的就是影响的行数,只有在dml的时候才会返回影响的行数，如果是创建的话，就不会</span></span><br><span class="line"></span><br><span class="line">        System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.关闭连接资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connect.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>上面代码需要注意的点 ： 要在url里面结尾加上<code>?useUnicode=true&amp;characterEncoding=utf8</code></p></li><li><p>可以通过修改<code>sql</code>,换成<code>delete</code> ， <code>update</code> 等语句</p></li><li><p>通过反射类来加载， 可以减少依赖性</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver)aClass.newInstance();</span><br></pre></td></tr></table></figure><ul><li>利用DriverManager.registerDriver方法我们可以更好的打开数据库数据，而不像之前那样搞键值对</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver)aClass.newInstance();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passwd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, passwd);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>进一步的， 我们发现， 其实可以不需要注册驱动(这是因为底层有一个静态代码块，自动帮你写了) （这个方式获取链接是最重要）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passwd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, passwd);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection</span><br><span class="line">                          );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513203223293.png" alt="image-20230513203223293"></p><ul><li><p>然后因为jdbc的优化， &#x2F;META-INF &#x2F; service&#x2F;java.sql.Driver 里面有注册，所以反射的那一段都可以不要， 但是建议还是选择方法4.</p></li><li><p>进一步的优化方法4：我们可以自定义密码用户名(用户自己配置密码 用户名 driver)</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513205019188.png" alt="image-20230513205019188"></p><p>  现在src目录下创建一个<code>mysql.properties</code>文件， 然后输入这些内容进去</p><p>  <img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803806.png" alt="image-20230513205146810"></p><blockquote><p>注意这里不要添加空格和双引号</p></blockquote><p>​     然后函数写法如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect05</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    Class.forName(driver);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    System.out.println(<span class="string">&quot;方式5 &quot;</span> + connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Resultset"><a href="#Resultset" class="headerlink" title="Resultset"></a>Resultset</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515191339770.png" alt="image-20230515191339770"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803955.png" alt="image-20230515191514606"></p><ul><li>对于executeQuery（）来说， 结尾关闭的文件还有<code>resultSet.close()</code>;</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803949.png" alt="image-20230515192159401"></p><p>  <strong>遍历的方式1</strong></p><p>底层的源码如下</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803207.png" alt="image-20230515192737325"></p><h2 id="statement-mysql注入"><a href="#statement-mysql注入" class="headerlink" title="statement&#x2F; mysql注入"></a>statement&#x2F; mysql注入</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803789.png" alt="image-20230515193007310"></p><ul><li><p>statement存在一个sql注入问题。</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803850.png" alt="image-20230515193515020"></p></li><li><p>sql注入黑客的原理， 因为可以把最后一位变得永远是真，然后把所有数据都偷出来</p></li></ul><p><strong>输入数据</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515195415652.png" alt="image-20230515195415652"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515195351292.png" alt="image-20230515195351292"></p><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement_"></a>PreparedStatement_</h2><ul><li>层次结构图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803847.png" alt="image-20230515195556552"></p><ul><li>使用它的好处</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515195832526.png" alt="image-20230515195832526"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803209.png" alt="image-20230515200959087"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入用户的名字&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入用户的密码&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"><span class="comment">// 导入数据</span></span><br><span class="line">      <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">      properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">      <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="comment">// 反射机制， 注册数据</span></span><br><span class="line">      Class.forName(driver);</span><br><span class="line"><span class="comment">// 执行sql语句</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT name, pwd from admin where name =? and pwd =?&quot;</span>;</span><br><span class="line">      <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">      <span class="comment">// ? 代表占位符</span></span><br><span class="line">      <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">      preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line">      preparedStatement.setString(<span class="number">2</span>, admin_pwd);</span><br><span class="line"><span class="comment">// 这里现在不用填入sql了（statement的时候要）</span></span><br><span class="line">      <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">      <span class="keyword">if</span>(resultSet.next())&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>在使用了preparedStatement的时候就不要在execute的时候这一行使用的括号中写sql</p></li><li><p>dml语句</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update admin set pwd = ? where name = ?&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="comment">// ? 代表占位符</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, admin_name);</span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, admin_pwd);</span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span>: <span class="string">&quot;失败&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="jdbc-api的复习"><a href="#jdbc-api的复习" class="headerlink" title="jdbc api的复习"></a>jdbc api的复习</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803535.png" alt="image-20230516203905276"></p><ul><li><p>补充 setObject <strong>（占位符的索引，占位符的值）</strong></p></li><li><p>ResultSet（结果集）</p><ul><li><strong>next（）</strong>向下移动一行 （一开始返回的是第一行的前面一个元素）</li><li><strong>previous（）</strong>向上移动一行</li><li><strong>getInt（）</strong>还可以通过字符来进行索引resultset.getInt(“id”) 通过列名来获取值</li></ul></li></ul><h2 id="封装JDBCUtil"><a href="#封装JDBCUtil" class="headerlink" title="封装JDBCUtil"></a>封装JDBCUtil</h2><p><code>Alt + Insert</code>: 可以快速调用常用指令</p><p><code>alt + Enter</code>可以try-catch包括住</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803595.png" alt="image-20230516205106115"></p><ul><li>注意方法才可以抛出， 代码块里面必须使用try-catch</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516205616966.png" alt="image-20230516205616966"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.wjh.jdbc.utils;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class JDBCUtils &#123;</span><br><span class="line">    private static String user;</span><br><span class="line">    private static String password;</span><br><span class="line">    private static String url;</span><br><span class="line">    private static String driver;</span><br><span class="line">    // 在static 代码块去初始化</span><br><span class="line">    static &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Properties properties = new Properties();</span><br><span class="line">            properties.load(new FileInputStream(&quot;src\\mysql.properties&quot;));</span><br><span class="line">            user = properties.getProperty(&quot;user&quot;);</span><br><span class="line">            password = properties.getProperty(&quot;password&quot;);</span><br><span class="line">            url = properties.getProperty(&quot;url&quot;);</span><br><span class="line">            driver = properties.getProperty(&quot;driver&quot;);</span><br><span class="line">        &#125;catch(IOException e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (SQLException e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void close(ResultSet set, Statement statement,Connection connection)&#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          if(set != null)&#123;</span><br><span class="line">              set.close();</span><br><span class="line">          &#125;</span><br><span class="line">          if(statement != null)&#123;</span><br><span class="line">              statement.close();</span><br><span class="line">          &#125;</span><br><span class="line">          if(connection != null)&#123;</span><br><span class="line">              connection.close();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;catch(SQLException e)&#123;</span><br><span class="line">        throw new RuntimeException(e);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JDBCUtil_DML</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjh.jdbc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtil_DML</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testDML();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// connect</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//create sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update actor set name =? where id =?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,<span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>,preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JDBC的事务介绍"><a href="#JDBC的事务介绍" class="headerlink" title="JDBC的事务介绍"></a>JDBC的事务介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803157.png" alt="image-20230516214610316"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection.setAutoCommit(<span class="literal">false</span>); <span class="comment">// 开启了事务(开了之后就不会一执行sql， 就提交）)</span></span><br><span class="line">connection.rollback();</span><br></pre></td></tr></table></figure><ul><li>我们可以把回滚操作，放到有一半的业务出现异常catch语句中的时候， 当出事的时候，就回滚。</li></ul><h2 id="批处理操作"><a href="#批处理操作" class="headerlink" title="批处理操作"></a>批处理操作</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518195826456.png" alt="image-20230518195826456"></p><p><strong>可以提高效率</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">preparedStatement.addBatch(); <span class="comment">// 批量处理数据</span></span><br><span class="line"><span class="comment">// 如果要使用批量处理， url后面一定要加上?rewriteBatchedStatements=true</span></span><br><span class="line"><span class="comment">// 每当满1000条的时候就一起扔到服务器里面</span></span><br><span class="line"><span class="comment">// 速度大大的提高</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i  &lt; <span class="number">5000</span>;++i)&#123;</span><br><span class="line">    preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">    preparedStatement.addBatch(); <span class="comment">// 批量处理数据</span></span><br><span class="line">    <span class="keyword">if</span>((i + <span class="number">1</span>)% <span class="number">1000</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        preparedStatement.executeBatch();</span><br><span class="line">        preparedStatement.clearbatch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>事实上，他就是创建了一个arraylist数组， 把所有数据存到里面，然后一次性执行</p><p>executeBatch（）函数，这样相比于正常的方法只用调用5次executeBatch</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518202129108.png" alt="image-20230518202129108"></p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="传统连接"><a href="#传统连接" class="headerlink" title="传统连接"></a>传统连接</h3><ul><li>如果又多个人， 连接一个数据库， 会变得很慢</li></ul><p>这是因为每次，连接数据库，然后关闭，都要验证<strong>ip地址， 用户名和密码</strong></p><p>而且， 如果程序出现异常，不能正常关闭，将会导致数据库的内存泄露。最终导致重启数据库</p><h3 id="开始新的连接"><a href="#开始新的连接" class="headerlink" title="开始新的连接"></a>开始新的连接</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518203127314.png" alt="image-20230518203127314"></p><p>通过再缓存池里面放入一定数量的连接， 每次只需从缓冲池里面取出一个，使用完以后再放回去</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803838.png" alt="image-20230518203622485"></p><p>它的本质就是一个<strong>等待队列</strong>，再放回去的时候，不会释放对象。</p><p>数据库连接池的种类</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803844.png" alt="image-20230518203824373"></p><h3 id="连接池-C3P0"><a href="#连接池-C3P0" class="headerlink" title="连接池 - C3P0"></a>连接池 - C3P0</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数据源对象</span></span><br><span class="line">comboxxxx = <span class="keyword">new</span> <span class="title class_">comboxxxx</span>;</span><br><span class="line"><span class="comment">// 通过配置文件mysql.properties 获取相关的信息。</span></span><br><span class="line"><span class="comment">//略</span></span><br><span class="line">    </span><br><span class="line">com.setdriverxxxclass(driver);</span><br><span class="line">com.set(url);</span><br><span class="line">com.set(user);</span><br><span class="line">com.setpass(password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置初始化连接数</span></span><br><span class="line">comxxx.poolsize(<span class="number">10</span>);</span><br><span class="line">comxxx.setMaxsize(<span class="number">50</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comxxx.getconnection();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803944.png" alt="image-20230518205241292"></p><ul><li><p>以上是大体的流程</p></li><li><p>我们还可以利用其他的方式二（它的xml来连接）</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518205731069.png" alt="image-20230518205731069"></p><p>这样子，代码就可以变得特别短</p><p>xml代码</p><p>文件的命名为<code>c3p0.config.xml</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803394.png" alt="image-20230518210102272"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803412.png" alt="image-20230518210043131"></p><h3 id="连接池-Druid"><a href="#连接池-Druid" class="headerlink" title="连接池 - Druid"></a>连接池 - Druid</h3><h2 id="Mysql主从复制"><a href="#Mysql主从复制" class="headerlink" title="Mysql主从复制"></a>Mysql主从复制</h2><ul><li>如果idea中出现报错， 我们需要再url结尾加上 <code>useSSL=false</code></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722202809491.png" alt="image-20230722202809491"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803137.png" alt="image-20230722214613077"></p><p>这一步还有一个重启</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803021.png" alt="image-20230722214714204"></p><p>主从复制的作用</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722215505596.png" alt="image-20230722215505596"></p><h2 id="项目中的文件配置"><a href="#项目中的文件配置" class="headerlink" title="项目中的文件配置"></a>项目中的文件配置</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722220459783.png" alt="image-20230722220459783"></p><p>其中 load-balance-algorithm-type是负载均衡</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803350.png" alt="image-20230722220720406"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803511.png" alt="image-20230722221153558"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722221144802.png" alt="image-20230722221144802"></p><ul><li>再 idea中 显示为， 查询的时候 DataSources：slave ， 增添的时候为 master。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803422.png" alt="image-20230723160911437"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webcomponent</title>
      <link href="/2023/11/06/webcomponent/"/>
      <url>/2023/11/06/webcomponent/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的前端小组件库-thinking"><a href="#这是我的前端小组件库-thinking" class="headerlink" title="这是我的前端小组件库 :thinking:"></a>这是我的前端小组件库 :thinking:</h1><h2 id="cloud-font"><a href="#cloud-font" class="headerlink" title="cloud-font"></a>cloud-font</h2><p><a href="https://github.com/Alanyaeer/web-component/tree/master/cloud-font">cloud-font</a></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282006780.png" alt="image-20231028192333139"></p><h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><p><a href="https://github.com/Alanyaeer/web-component/tree/master/nav-tab">nav</a></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310291413234.png" alt="image-20231029141317092"></p><h2 id="process-bar"><a href="#process-bar" class="headerlink" title="process-bar"></a>process-bar</h2><p><a href="https://github.com/Alanyaeer/web-component/tree/master/process-bar">进度条</a></p><p>这里有一段代码不是很理解</p><p><code>background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);</code></p><blockquote><p>这段 CSS 代码是用来设置一个元素的背景图像，具体来说是一个线性渐变背景。我们可以逐步解析这段代码：</p><p><code>linear-gradient(45deg, ...)</code>: 这是 CSS 的 <code>linear-gradient</code> 函数，它创建一个线性渐变。这里的 <code>45deg</code> 表示渐变的方向是 45 度角。</p><p><code>rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent</code>: 这是渐变的颜色和位置。</p><ul><li><code>rgba(255, 255, 255, .15) 25%</code>: 表示颜色为白色（RGB 为 255,255,255）并且不透明度为 0.15 的色标位于渐变的 25% 位置。不透明度范围从 0（完全透明）到 1（完全不透明）。</li><li><code>transparent 25%</code>: 表示一个透明的色标，位于渐变的 25% 位置。透明色标将确保在渐变中有一个从下到上的过渡。</li><li><code>transparent 50%</code>: 表示一个透明的色标，位于渐变的 50% 位置。再次使用透明色标以在渐变中创建一个从下到上的过渡。</li><li><code>rgba(255, 255, 255, .15) 50%</code>: 表示颜色为白色（RGB 为 255,255,255）并且不透明度为 0.15 的色标位于渐变的 50% 位置。</li><li><code>rgba(255, 255, 255, .15) 75%</code>: 表示颜色为白色（RGB 为 255,255,255）并且不透明度为 0.15 的色标位于渐变的 75% 位置。</li><li><code>transparent 75%</code>: 表示一个透明的色标，位于渐变的 75% 位置。再次使用透明色标以在渐变中创建一个从上到下的过渡。</li><li><code>transparent</code>: 最后，透明色标确保在渐变的最后有一个从上到下的过渡。</li></ul><p>这里的 <code>transparent</code> 的主要作用是创建渐变的过渡效果，它使得颜色之间的过渡更加平滑，而不是直接跳转到下一个颜色。通过使用透明色标，我们可以创建出各种各样的线性渐变效果，例如“彩虹”效果等。</p></blockquote><p>暂时放着以后之后再来回头看， 大概的意思是 transparent 可以让过渡效果更加的好看</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311052044848.png" alt="image-20231105204409670"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 组件库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/2023/11/06/websocket%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/11/06/websocket%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题🤕"><a href="#问题🤕" class="headerlink" title="问题🤕"></a>问题🤕</h1><blockquote><p> 写课设的时候， 使用websocket 建立连接发送消息， 出现了 以下两种问题 </p></blockquote><h2 id="CloseStatus-1002"><a href="#CloseStatus-1002" class="headerlink" title="CloseStatus &#x3D; 1002"></a>CloseStatus &#x3D; 1002</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061317978.png" alt="image-20231106131744951"></p><ul><li>遇到这个问题多半是因为 你发送的消息的 时候前端没有对数据进行调整</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(sendmessage))</span><br></pre></td></tr></table></figure><blockquote><p>JSON.stringify 如果不加上这个就会报错， 我是在写心跳检测的时候， 没有对空的字符串进行 stringify所以导致一打开服务就报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 罪魁祸首</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendHeartbeat</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (socket.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;  </span><br><span class="line">      socket.<span class="title function_">send</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 发送空的心跳包给服务器  </span></span><br><span class="line">      <span class="comment">//这里修改为 socket.send(JSON.stringify(&#x27;&#x27;))</span></span><br><span class="line">      <span class="title function_">sendHeartbeat</span>(); <span class="comment">// 递归调用发送心跳包函数，以保持连接活跃  </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已关闭&#x27;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;, <span class="number">5000</span>); <span class="comment">// 每30秒发送一次心跳包给服务器  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CloseStatus-1006"><a href="#CloseStatus-1006" class="headerlink" title="CloseStatus &#x3D; 1006"></a>CloseStatus &#x3D; 1006</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061317040.png" alt="image-20231106131730108"></p><ul><li>后来发现是自己修改ip地址的时候吧后面的 端口号也给删除了</li></ul><p>正确 的websocket 格式 是 <code>ws:// ip地址 + :(端口号) + /xxx</code>， 这样一修改之后就木有这个问题了 。</p><h2 id="测试类遇到的问题"><a href="#测试类遇到的问题" class="headerlink" title="测试类遇到的问题"></a>测试类遇到的问题</h2><ul><li>在使用了websocket之后， 一启动测试类，就会报错</li><li>实际上我们需要在springTest里面 加上这个来排除掉websocket</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT)</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title></title>
      <link href="/2023/10/31/Netty/"/>
      <url>/2023/10/31/Netty/</url>
      
        <content type="html"><![CDATA[<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><blockquote><p>牢记四个点</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312044227.png" alt="image-20231031204440182"></p><h2 id="NIO基础"><a href="#NIO基础" class="headerlink" title="NIO基础"></a>NIO基础</h2><blockquote><p>非阻塞io - non-blocking io</p></blockquote><ul><li>为什么NIO 是非阻塞的.NIO使用了通道和通道的IO多路复用技术。</li></ul><h3 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h3><blockquote><p>Channel Buffer Selector</p></blockquote><ol><li><p>Channel &amp; Buffer</p><p>最常用的 Buffer： ByteBuffer</p><p>其他的不是很清楚</p></li><li><p>Selector</p><p>Selector相当于一个中转站， 来分发channel 发来的数据给thread<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312106328.png" alt="image-20231031210625241"></p></li></ol><ul><li><p>把通道注册到选择器中， 第二步则是通过选择器所提供的事件 查询方法。来查看 这些注册的通道是否又已经就绪的IO事件</p></li><li><p>选择器只需要一个线程进行监控。</p></li><li><p>因为 一个 选择器 连接着多个 Channel， 然后一个 channel 又相当于 一个流， 所以 它的 效率是远远高于 oio （ 这个就是多路复用）</p></li><li><p>前面两个组件 channel selector 只是负责与应用程序的交互， 但是为了实现非阻塞的读写， 我们需要 使用 Buffer </p></li><li><p>buffer 是非线程安全的</p></li></ul><p>Buffer类是一个抽象类，对应于Java的<strong>主要数据</strong>类型，在NIO中有8种缓冲区类，分别如下：ByteBuffer、CharBuffer、DoubleBuffer、FloatBuffer、IntBuffer、LongBuffer、ShortBuffer、MappedByteBuffer。</p><h4 id="buffer"><a href="#buffer" class="headerlink" title="buffer"></a>buffer</h4><ul><li>在 buffer 的子类 中， 有一个byte[]类型的数组 作为 数据的 读写缓存区。 但是 这个 数组没有定义在 buffer 中。</li></ul><blockquote><p>为了 记录 读写的状态 它提供了下面三种重要的属性</p></blockquote><h5 id="capacity"><a href="#capacity" class="headerlink" title="capacity"></a>capacity</h5><p>capacity 一经 对象创建 之后 就不能修改。 </p><p>（注意这个 容量 不是指 对象里面 byte数组的大小， 而是指 可以写入的字符多少）</p><h5 id="position"><a href="#position" class="headerlink" title="position"></a>position</h5><p>position 的值 和 缓冲区的读写模式有关。 在不同 的模式下。 position属性值的含义是不同的。</p><ul><li><p>在刚刚写入 模式的时候，代表当前 要写入的位置</p></li><li><p>当刚刚进入到 读模式的时候， pos 会被修改为 0 同上</p></li><li><p>调用 filp 方法实现 读写模式的转换 </p><ul><li>同时limit 被修改为 写入模式的pos</li><li><strong>pos 变为 0</strong></li></ul></li></ul><h5 id="limit"><a href="#limit" class="headerlink" title="limit"></a>limit</h5><p>略， 就是最大容量</p><h5 id="mark"><a href="#mark" class="headerlink" title="mark"></a>mark</h5><blockquote><p>在缓冲区操作过程中，可以将当前的 pos 的值临时存入到mark 属性中， 需要的时候， 可以在从mark中取出暂存的标记值。恢复到 pos 中，重新从pos 位置开始</p></blockquote><ul><li>调用 reset （） 可以恢复 pos</li></ul><h5 id="读写模式"><a href="#读写模式" class="headerlink" title="读写模式"></a>读写模式</h5><ul><li>读和写 针对的缓冲区</li><li>写入到缓冲区 就要使用 写模式</li><li>从缓冲区读出来就要使用读模式</li></ul><h5 id="channel-的-Write-和-read"><a href="#channel-的-Write-和-read" class="headerlink" title="channel 的 Write 和 read"></a>channel 的 Write 和 read</h5><p>write 方法 Writes a sequence of bytes to this channel from the given buffer. （将缓冲区写入到通道）</p><p>read 方法 Reads a sequence of bytes from this channel into the given buffers.（读取通道到缓冲区）</p><h2 id="详解-NIO-Buffer-类"><a href="#详解-NIO-Buffer-类" class="headerlink" title="详解 NIO Buffer 类"></a>详解 NIO Buffer 类</h2><h3 id="allocate-分配缓冲区"><a href="#allocate-分配缓冲区" class="headerlink" title="allocate 分配缓冲区"></a>allocate 分配缓冲区</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseBuffer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一个整型的Buffer静态变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">IntBuffer</span> <span class="variable">intBuffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">allocateTest</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//创建了一个Intbuffer实例对象</span></span><br><span class="line">intBuffer = IntBuffer.allocate(<span class="number">20</span>); </span><br><span class="line">Logger.debug(<span class="string">&quot;------------after allocate------------------&quot;</span>);</span><br><span class="line">Logger.debug(<span class="string">&quot;position=&quot;</span> + intBuffer.position());</span><br><span class="line">Logger.debug(<span class="string">&quot;limit=&quot;</span> + intBuffer.limit());</span><br><span class="line">Logger.debug(<span class="string">&quot;capacity=&quot;</span> + intBuffer.capacity());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//...省略其他代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="put写入缓存中"><a href="#put写入缓存中" class="headerlink" title="put写入缓存中"></a>put写入缓存中</h3><ul><li>你写入的对象类型要和 buffer 子类一个类型</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.crazymakercircle.bufferDemo;</span><br><span class="line">…省略<span class="keyword">import</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseBuffer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一个整型的Buffer静态变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">IntBuffer</span> <span class="variable">intBuffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//...省略了创建缓冲区的代码，具体查看前面小节的内容和随书源码</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">putTest</span><span class="params">()</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5</span>; i++)</span><br><span class="line">        &#123;</span><br><span class="line">    <span class="comment">//写入一个整数到缓冲区</span></span><br><span class="line">            intBuffer.put(i);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//输出缓冲区的主要属性值</span></span><br><span class="line">        Logger.debug(<span class="string">&quot;------------after putTest------------------&quot;</span>);</span><br><span class="line">        Logger.debug(<span class="string">&quot;position=&quot;</span> + intBuffer.position());</span><br><span class="line">        Logger.debug(<span class="string">&quot;limit=&quot;</span> + intBuffer.limit());</span><br><span class="line">        Logger.debug(<span class="string">&quot;capacity=&quot;</span> + intBuffer.capacity());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//...省略其他代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="flip-翻转"><a href="#flip-翻转" class="headerlink" title="flip 翻转"></a>flip 翻转</h3><ul><li><p>这里的读 和 写 是针对于<strong>缓冲区</strong></p></li><li><p><strong>写模式到读模式</strong></p></li></ul><p>（1）首先，设置可读上限limit的属性值。将写入模式下的缓冲区中内容的最后写入位置position值，作为读取模式下的limit上限值。</p><p>（2）其次，把读的起始位置position的值设为0，表示从头开始读。</p><p>（3）最后，<strong>清除之前的mark标记</strong>，因为mark保存的是写入模式下的临时位置，发生模式翻转后，如果继续使用旧的mark标记，会造成位置混乱。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.crazymakercircle.bufferDemo;</span><br><span class="line">…省略<span class="keyword">import</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">UseBuffer</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//一个整型的Buffer静态变量</span></span><br><span class="line"><span class="keyword">static</span> <span class="type">IntBuffer</span> <span class="variable">intBuffer</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">  <span class="comment">//...省略了缓冲区的创建、写入数据的代码，具体查看前面小节的内容和随书源码</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">flipTest</span><span class="params">()</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="comment">//翻转缓冲区，从写入模式翻转成读取模式</span></span><br><span class="line">intBuffer.flip();</span><br><span class="line"><span class="comment">//输出缓冲区的主要属性值</span></span><br><span class="line">Logger.info(<span class="string">&quot;------------after flip ------------------&quot;</span>);</span><br><span class="line">Logger.info(<span class="string">&quot;position=&quot;</span> + intBuffer.position());</span><br><span class="line">Logger.info(<span class="string">&quot;limit=&quot;</span> + intBuffer.limit());</span><br><span class="line">Logger.info(<span class="string">&quot;capacity=&quot;</span> + intBuffer.capacity());</span><br><span class="line">&#125;</span><br><span class="line">    <span class="comment">//...省略其他代码</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>想要转换回来 也就是 读模式变成写模式</li></ul><p>需要调用clear 方法 或者 compact方法</p><h3 id="get从缓冲区读取"><a href="#get从缓冲区读取" class="headerlink" title="get从缓冲区读取"></a>get从缓冲区读取</h3><p>同上面，但是有几个需要注意的点</p><ul><li>pos 和 limit 上面讲过了</li><li>读完不能直接写， 需要调用 clear方法， 和compact 方法</li><li>可以重复读吗？ 可以 调用 rewind , mark reset 方法</li></ul><h3 id="mark-和-reset-方法"><a href="#mark-和-reset-方法" class="headerlink" title="mark 和 reset 方法"></a>mark 和 reset 方法</h3><ul><li><strong>Buffer.mark()<strong>方法将当前position的值保存起来，放在</strong>mark</strong>属性中，让mark属性记住这个临时位置；之后，可以调用**Buffer.reset()**方法将mark的值恢复到position中。</li></ul><h3 id="clear-清空-缓冲区"><a href="#clear-清空-缓冲区" class="headerlink" title="clear 清空 缓冲区"></a>clear 清空 缓冲区</h3><ul><li><p>上面讲过了</p></li><li><p>在读取模式下，调用clear()方法将缓冲区切换为写入模式。此方法的作用：</p><p>（1）会将position清零；</p><p>（2）limit设置为capacity最大容量值，可以一直写入，直到缓冲区写满。</p></li></ul><h3 id="使用Buffer类的步骤"><a href="#使用Buffer类的步骤" class="headerlink" title="使用Buffer类的步骤"></a>使用Buffer类的步骤</h3><p>总体来说，使用Java NIO Buffer类的基本步骤如下:</p><p>（1）使用创建子类实例对象的allocate( )方法，创建一个Buffer类的实例对象。</p><p>（2）调用put( )方法，将数据写入到缓冲区中。</p><p>（3）写入完成后，在开始读取数据前，调用Buffer.flip(<br>)方法，将缓冲区转换为读模式。</p><p>（4）调用get( )方法，可以从缓冲区中读取数据。</p><p>（5）读取完成后，调用Buffer.clear()方法或Buffer.compact()方法，将缓冲区转换为写入模式，可以继续写入。</p><h2 id="详解-NIO-Channel-类"><a href="#详解-NIO-Channel-类" class="headerlink" title="详解 NIO Channel 类"></a>详解 NIO Channel 类</h2><ul><li>之前认为 一个通道可以对应一个底层的文件描述符。实际上还可以更加的抽象，对应不同的协议类型</li></ul><blockquote><p>NIO全部通道类型进行过多的描述，仅仅聚焦于介绍其中最为重要的四种Channel（通道）实现：FileChannelSocketChannel、ServerSocketChannel、DatagramChannel。</p></blockquote><p>对于以上四种通道，说明如下：</p><p>（1）FileChannel文件通道，用于<strong>文件的数据读写；</strong></p><p>（2）SocketChannel套接字通道，用于<strong>Socket套接字TCP连接</strong>的数据读写；</p><p>（3）ServerSocketChannel服务器套接字通道（或服务器监听通道），允许我们监听TCP连接请求，为每个监听到的请求，创建一个SocketChannel套接字通道；</p><p>（4）DatagramChannel数据报通道，用于UDP协议的数据读写。这个四种通道，涵盖了<strong>文件IO</strong>、TCP网络、UDP</p><h3 id="FileChannel"><a href="#FileChannel" class="headerlink" title="FileChannel"></a>FileChannel</h3><ul><li><p>注意这是 阻塞的，不能设置为非阻塞的模式</p></li><li><p>写入代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(srcFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件流的通道</span></span><br><span class="line"></span><br><span class="line"><span class="type">FileChannel</span> <span class="variable">inChannel</span> <span class="operator">=</span> fis.getChannel();</span><br><span class="line"></span><br><span class="line"><span class="comment">//创建一个文件输出流</span></span><br><span class="line"></span><br><span class="line"><span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(destFile);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件流的通道</span></span><br><span class="line"></span><br><span class="line"><span class="type">FileChannel</span> <span class="variable">outchannel</span> <span class="operator">=</span> fos.getChannel();</span><br><span class="line"></span><br><span class="line">也可以通过RandomAccessFile文件随机访问类，获取FileChannel文件通道实例，代码如下：</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建RandomAccessFile随机访问对象</span></span><br><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">rFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(“filename.txt”，“rw”);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取文件流的通道（可读可写）</span></span><br><span class="line"><span class="type">FileChannel</span> <span class="variable">channel</span> <span class="operator">=</span> rFile.getChannel();</span><br></pre></td></tr></table></figure><ul><li>读出模式<ul><li>在大部分应用场景，从通道读取数据都会调用通道的int<br>read（ByteBufferbuf）方法，它从通道读取到数据写入到ByteBuffer缓冲区，并且返回读取到的数据量。</li></ul></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">RandomAccessFile</span> <span class="variable">aFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(fileName, “rw”);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取通道（可读可写）</span></span><br><span class="line"></span><br><span class="line">FileChannel channel=aFile.getChannel();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取一个字节缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buf</span> <span class="operator">=</span> ByteBuffer.allocate(CAPACITY);</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">length</span> <span class="operator">=</span> -<span class="number">1</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用通道的read方法，读取数据并买入字节类型的缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((length = channel.read(buf)) != -<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">//……省略buf中的数据处理</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里 就是 它的 读出 文件然后打印出来</span></span><br><span class="line">allocate = ByteBuffer.allocate((<span class="type">int</span>)channel.size());</span><br><span class="line"><span class="keyword">while</span>(channel.read(allocate) != -<span class="number">1</span>)&#123;</span><br><span class="line">    allocate.flip();</span><br><span class="line">    System.out.println(StandardCharsets.UTF_8.decode(allocate).toString());</span><br><span class="line">    allocate.clear();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>写入 FileChannel 模式</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">buf.flip();</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="variable">outlength</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用write方法，将buf的数据写入通道</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((outlength = outchannel.write(buf)) != <span class="number">0</span>) &#123;</span><br><span class="line">System.out.println(“写入的字节数：” + outlength);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>通道使用完成后，需要像io操作那样将其关闭</p></li><li><p>在缓冲区写入通道之后，处于性能考量可能不会吧数据写入到此磁盘之中， 为了 保证 可以实现写入磁盘， 我们可以调用force 方法 来强制写入</p><p> 需要注意的是 ， 这个 force 需要填入 一个 参数， 如果是 true 的话， 就会把 元数据填入， 比如说文件的创建时间， 修改时间大小  写入， 如果是false 的话， 就只是 把 文件内容进来</p></li></ul><h3 id="FileChannel-来实现文件复制"><a href="#FileChannel-来实现文件复制" class="headerlink" title="FileChannel 来实现文件复制"></a>FileChannel 来实现文件复制</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">changeATOB</span> <span class="params">(String src, String desc)</span>&#123;</span><br><span class="line">    createFile(src);</span><br><span class="line">    createFile(desc);</span><br><span class="line"></span><br><span class="line">    <span class="type">ByteBuffer</span> <span class="variable">allocate</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(src);</span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(desc);</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">inputChannel</span> <span class="operator">=</span> fis.getChannel();</span><br><span class="line">        <span class="type">FileChannel</span> <span class="variable">outputChannel</span> <span class="operator">=</span> fos.getChannel();</span><br><span class="line">        <span class="keyword">while</span>(inputChannel.read(allocate) != -<span class="number">1</span>)&#123;</span><br><span class="line">            allocate.flip();</span><br><span class="line">            <span class="type">int</span> <span class="variable">write</span> <span class="operator">=</span> outputChannel.write(allocate);</span><br><span class="line">            System.out.println(<span class="string">&quot;写入的字节数&quot;</span> + write);</span><br><span class="line">            outputChannel.force(<span class="literal">true</span>);</span><br><span class="line">            allocate.clear();</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        fis.close();</span><br><span class="line">        fos.close();</span><br><span class="line">    &#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">createFile</span><span class="params">(String fileName)</span>&#123;</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(fileName);</span><br><span class="line">    <span class="keyword">if</span>(file.getParentFile().exists() == <span class="literal">false</span>)&#123;</span><br><span class="line">        file.getParentFile().mkdirs();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(file.getParentFile().exists() == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            file.createNewFile();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="SocketChannel-套接字通道"><a href="#SocketChannel-套接字通道" class="headerlink" title="SocketChannel 套接字通道"></a>SocketChannel 套接字通道</h3><ul><li><p>有两个负责网络连接的通道</p><ul><li>一个是<strong>SocketChannel</strong>负责连接的数据传输</li><li>另一个是<strong>ServerSocketChannel</strong>负责连接的监听</li></ul></li><li><p>ServerSocketChannel仅仅应用于服务器端，而SocketChannel则同时处于服务器端和客户端，所以，对应于一个连接，两端都有一个负责传输的SocketChannel传输通道。</p></li><li><p>无论是 上面两个通道的哪一个， 它们都支持两种阻塞模式</p><ul><li>socketChannel.configureBlocking（false）设置为非阻塞模式。</li><li>socketChannel.configureBlocking（true）设置为阻塞模式。</li></ul></li></ul><h4 id="发起连接"><a href="#发起连接" class="headerlink" title="发起连接"></a>发起连接</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获得一个套接字传输通道</span></span><br><span class="line"><span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> SocketChannel.open();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置为非阻塞模式</span></span><br><span class="line">socketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//对服务器的IP和端口发起连接</span></span><br><span class="line">socketChannel.connect(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(“<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>”，<span class="number">80</span>));</span><br></pre></td></tr></table></figure><ul><li>由于可能连接还没有完全连上， 所以我们需要自旋判断</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(!socketChannel.finishConnect())&#123;</span><br><span class="line"><span class="comment">//不断地自旋、等待，或者做一些其他的事情……</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>服务端 连接</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//新连接事件到来，首先通过事件，获取服务器监听通道</span></span><br><span class="line"><span class="type">ServerSocketChannel</span> <span class="variable">server</span> <span class="operator">=</span> (ServerSocketChannel) key.channel();</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取新连接的套接字通道</span></span><br><span class="line"><span class="type">SocketChannel</span> <span class="variable">socketChannel</span> <span class="operator">=</span> server.accept();</span><br><span class="line"></span><br><span class="line"><span class="comment">//设置为非阻塞模式</span></span><br><span class="line">socketChannel.configureBlocking(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><h4 id="读取通道"><a href="#读取通道" class="headerlink" title="读取通道"></a>读取通道</h4><ul><li><p>实际上类似于 前面的 文件的读取方式</p></li><li><p>但是有一个问题， 我们想要使用异步io，但是如何知道通道有数据了呢，这个时候就需要使用到Selector</p></li></ul><h4 id="写入通道"><a href="#写入通道" class="headerlink" title="写入通道"></a>写入通道</h4><p>和前面的把数据写入到FileChannel文件通道一样，大部分应用场景都会调用通道的int<br>write（ByteBufferbuf）方法。</p><p>&#x2F;&#x2F;写入前需要读取缓冲区，要求ByteBuffer是读取模式</p><p>buffer.flip();</p><p>socketChannel.write(buffer);</p><h4 id="关闭通道"><a href="#关闭通道" class="headerlink" title="关闭通道"></a>关闭通道</h4><ul><li>在关闭SocketChannel传输通道前，如果传输通道用来写入数据，则建议调用一次shutdownOutput()终止输出方法，向对方发送一个输出的结束标志（-1）。然后调用socketChannel.close()方法，关闭套接字连接。</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//调用终止输出方法，向对方发送一个输出的结束标志</span></span><br><span class="line">socketChannel.shutdownOutput();</span><br><span class="line"><span class="comment">//关闭套接字连接</span></span><br><span class="line">IOUtil.closeQuietly(socketChannel);</span><br></pre></td></tr></table></figure><h3 id="DatagramChannel-数据报通道"><a href="#DatagramChannel-数据报通道" class="headerlink" title="DatagramChannel 数据报通道"></a>DatagramChannel 数据报通道</h3><ul><li>调用open的静态方法， 获取到channel 通道</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//获取DatagramChannel数据报通道</span></span><br><span class="line"><span class="type">DatagramChannel</span> <span class="variable">channel</span> <span class="operator">=</span> DatagramChannel.open();</span><br><span class="line"><span class="comment">//设置为非阻塞模式</span></span><br><span class="line">channel.configureBlocking(<span class="literal">false</span>);</span><br></pre></td></tr></table></figure><ul><li>详细的内容 可以看书上 p53</li></ul><p>发送的话看下面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启 数据包通道</span></span><br><span class="line"><span class="type">DatagramChannel</span> <span class="variable">dChannel</span> <span class="operator">=</span>  DatagramChannel.open()</span><br><span class="line"><span class="comment">// 设置 非阻塞</span></span><br><span class="line">dChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">//弄缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 存入数据到缓冲区</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// send</span></span><br><span class="line">dChannel.send(buffer, <span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(ipaddress, ports));</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>接收的话 使用下面这个</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//开启 数据包通道</span></span><br><span class="line"><span class="type">DatagramChannel</span> <span class="variable">dChannel</span> <span class="operator">=</span>  DatagramChannel.open()</span><br><span class="line"><span class="comment">// 设置 非阻塞</span></span><br><span class="line">dChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line">dChannel.bind(绑定信息)</span><br><span class="line">    </span><br><span class="line"><span class="comment">// 选择器监听</span></span><br><span class="line"></span><br><span class="line"><span class="type">Selector</span> <span class="variable">selector</span> <span class="operator">=</span> Selector.open();</span><br><span class="line">dChannel.register(selector, SelectionKey.OP_READ);</span><br><span class="line"><span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">Iterator&lt;SelectionKey&gt; iterator = selector.selectedKeys().iterator();</span><br><span class="line"></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span></span><br><span class="line"></span><br><span class="line">ByteBuffer.allocate(NioDemoConfig.SEND_BUFFER_SIZE);</span><br><span class="line"></span><br><span class="line">    <span class="comment">//迭代IO事件</span></span><br><span class="line">    <span class="keyword">while</span> (iterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">SelectionKey</span> <span class="variable">selectionKey</span> <span class="operator">=</span> iterator.next();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可读事件，有数据到来</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (selectionKey.isReadable()) &#123;</span><br><span class="line">            <span class="comment">//读取DatagramChannel数据报通道的数据</span></span><br><span class="line">            <span class="type">SocketAddress</span> <span class="variable">client</span> <span class="operator">=</span> datagramChannel.receive(buffer);</span><br><span class="line">            buffer.flip();</span><br><span class="line">            <span class="comment">// 一些数据的操作</span></span><br><span class="line">            buffer.clear();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//结尾记得关闭选择器和 通道</span></span><br></pre></td></tr></table></figure><h2 id="详解-NIO-Selector-类"><a href="#详解-NIO-Selector-类" class="headerlink" title="详解 NIO Selector 类"></a>详解 NIO Selector 类</h2><ul><li><p>Selector 的作用</p><ul><li>选择器的使命是完成IO的多路复用，<strong>其主要工作是通道的注册、监听、事件查询</strong>。一个通道代表一条连接通路，通过选择器可以同时监控多个通道的IO（输入输出）状况。选择器和通道的关系，是监控和被监控的关系</li></ul></li><li><p>介绍</p><ul><li>一般来说 是一个 线程对应一个 选择器，一个选择器关联多个通道。<strong>一个单线程可以处理数百、数千、数万、甚至更多的通道</strong>。在极端情况下（数万个连接），只用一个线程就可以处理所有的通道，这样会大量地减少线程之间上下文切换的开销</li></ul></li></ul><h3 id="选择器以及注册"><a href="#选择器以及注册" class="headerlink" title="选择器以及注册"></a>选择器以及注册</h3><p><code>Channel。register(Selector sel, int ops)</code></p><p>第一个参数是通道 ， 第二个参数是通道IO 类型</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">（<span class="number">1</span>）可读：SelectionKey.OP_READ</span><br><span class="line"></span><br><span class="line">（<span class="number">2</span>）可写：SelectionKey.OP_WRITE</span><br><span class="line"></span><br><span class="line">（<span class="number">3</span>）连接：SelectionKey.OP_CONNECT</span><br><span class="line"></span><br><span class="line">（<span class="number">4</span>）接收：SelectionKey.OP_ACCEPT</span><br></pre></td></tr></table></figure><p>同时我们可以<strong>通过或运算的方式选择监听多个IO</strong>类型</p><p><code>int key = SelectionKey.OP_READ | SelectionKey.OP_WRITE</code></p><ul><li>注意我们后面遇到的IO事件， 它是指通道处于的一种状态</li></ul><blockquote><p>比方说某个SocketChannel传输通道，如果完成了和对端的三次握手过程，则会发生“连接就绪”（OP_CONNECT）的事件。再比方说某个ServerSocketChannel服务器连接监听通道，在监听到一个新连接的到来时，则会发生“接收就绪”（OP_ACCEPT）的事件。还比方说，一个SocketChannel通道有数据可读，则会发生“读就绪”（OP_READ）事件；一个等待写入数据的SocketChannel通道，会发生写就绪（OP_WRITE）事件。</p></blockquote><h3 id="SelectableChannel可选择通道"><a href="#SelectableChannel可选择通道" class="headerlink" title="SelectableChannel可选择通道"></a>SelectableChannel可选择通道</h3><ul><li>实际上不是所有的 通道都可以使用选择器，</li><li>一个通道是否可以使用取决于它是否继承了抽象类SelectableChannel</li><li>它提供了实现通道的可选择性所需要的公共方法。Java<br>NIO中所有网络链接Socket套接字通道，都继承了SelectableChannel类，都是可选择的。</li></ul><h3 id="SelectionKey选择键"><a href="#SelectionKey选择键" class="headerlink" title="SelectionKey选择键"></a>SelectionKey选择键</h3><ul><li><p>定义：一旦在通道中发生了<strong>某些IO事件（就绪状态达成）</strong>，并且是在选择器中注册过的IO事件，就会被选择器选中，<strong>并放入SelectionKey选择键的集合</strong>中。</p></li><li><p>使用这个不仅可以获取到通道发送的IO事件， 还可以获得IO事件所在的通道， 也可以选择出选择键的选择器实例</p></li></ul><h3 id="选择器的使用流程"><a href="#选择器的使用流程" class="headerlink" title="选择器的使用流程"></a>选择器的使用流程</h3><p>（1）获取选择器实例；(Selector selector &#x3D; Selector.open();)</p><p>（2）将通道注册到选择器中；</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 2.获取通道</span></span><br><span class="line">ServerSocketChannelserverSocketChannel = ServerSocketChannel.open();</span><br><span class="line"><span class="comment">// 3.设置为非阻塞</span></span><br><span class="line">serverSocketChannel.configureBlocking(<span class="literal">false</span>);</span><br><span class="line"><span class="comment">// 4.绑定连接</span></span><br><span class="line">serverSocketChannel.bind(<span class="keyword">new</span> <span class="title class_">InetSocketAddress</span>(<span class="number">18899</span>));</span><br><span class="line"><span class="comment">// 5.将通道注册到选择器上,并制定监听事件为：“接收连接”事件</span></span><br><span class="line">serverSocketChannel.register(selector，SelectionKey.OP_ACCEPT);</span><br></pre></td></tr></table></figure><ul><li>注册的通道必须是非阻塞的（所以FileChannel 是不能用到着些方法上面的）</li><li>一个通道不一定要支持所有的IO事件， 判断通道是否支持某一个事件是使用validOps 方法来实现</li></ul><p>（3）轮询感兴趣的IO就绪事件（选择键集合）。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span> (selector.select() &gt; <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="type">Set</span> <span class="variable">selectedKeys</span> <span class="operator">=</span> selector.selectedKeys();</span><br><span class="line">    <span class="type">Iterator</span> <span class="variable">keyIterator</span> <span class="operator">=</span> selectedKeys.iterator();</span><br><span class="line">    <span class="keyword">while</span>(keyIterator.hasNext()) &#123;</span><br><span class="line">        <span class="type">SelectionKey</span> <span class="variable">key</span> <span class="operator">=</span> keyIterator.next();</span><br><span class="line">        <span class="comment">//根据具体的IO事件类型，执行对应的业务操作</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(key.isAcceptable()) &#123;</span><br><span class="line">        <span class="comment">// IO事件：ServerSocketChannel服务器监听通道有新连接</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isConnectable()) &#123;</span><br><span class="line">        <span class="comment">// IO事件：传输通道连接成功</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isReadable()) &#123;</span><br><span class="line">        <span class="comment">// IO事件：传输通道可读</span></span><br><span class="line"></span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (key.isWritable()) &#123;</span><br><span class="line">        <span class="comment">// IO事件：传输通道可写</span></span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//处理完成后，移除选择键 ,这个非常重要</span></span><br><span class="line">        keyIterator.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>注意在遍历选择键的时候， 当你处理完这个IO事件了 ，需要将它从迭代器中移除（不移除下次迭代还是这个信息）</p></li><li><p>select 方法</p><ul><li><p>（1）select()：<strong>阻塞调用</strong>，一直到至少有一个通道发生了注册的IO事件。</p><p>（2）select(long timeout)：和select()一样，但最长阻塞时间为timeout指定的毫秒数。</p><p>（3）selectNow()：非阻塞，不管有没有IO事件，都会立刻返回。</p><p>select()方法的返回值的是整数类型（int），表示发生了IO事件的数量。更准确地说，<strong>是从上一次select到这一次select之间，有多少通道发生了IO事件</strong>，更加准确地说，是指发生了选择器感兴趣（注册过）的IO事件数。</p></li></ul></li></ul><h2 id="NIO的案例"><a href="#NIO的案例" class="headerlink" title="NIO的案例"></a>NIO的案例</h2><h3 id="NIO实现DisCard服务器的实践案例"><a href="#NIO实现DisCard服务器的实践案例" class="headerlink" title="NIO实现DisCard服务器的实践案例"></a>NIO实现DisCard服务器的实践案例</h3><ul><li><p>在一开始监听管道注册之后</p></li><li><p>我们进入到遍历 选择键的过程</p><p>实际上， 如果 当选择键的<strong>isAcceptable</strong> 方法判断之后， 就说明存在新的连接通道， 我们就把socketChannel注册到选择器之中</p></li><li><p>如果是 isReadable状态， 我们就调用选择器的 channel 方法， 获取到 通道， 然后设置为 阻塞， 转换为读模式， 从里面 读取数据出来</p></li><li><p>然后每个循环结束后， 移除掉这个选择键</p></li></ul><h3 id="SocketChannel-在服务端接受文件"><a href="#SocketChannel-在服务端接受文件" class="headerlink" title="SocketChannel 在服务端接受文件"></a>SocketChannel 在服务端接受文件</h3><ul><li>详细见 书上的写法</li><li>但是最后的程序没有进行粘 包和半包的处理</li></ul><h2 id="Reactor-模式"><a href="#Reactor-模式" class="headerlink" title="Reactor 模式"></a>Reactor 模式</h2><h3 id="基础入门"><a href="#基础入门" class="headerlink" title="基础入门"></a>基础入门</h3><h4 id="构成"><a href="#构成" class="headerlink" title="构成"></a>构成</h4><ul><li><p>Reactor 线程的职责： 负责响应IO事件， 并且分发到Handlers处理器中。</p></li><li><p>Handlers处理器的职责， 非阻塞的执行业务处理逻辑</p></li><li><p>Reactor 线程负责多路IO事件的查询</p></li></ul><h3 id="多线程OIO的缺陷"><a href="#多线程OIO的缺陷" class="headerlink" title="多线程OIO的缺陷"></a>多线程OIO的缺陷</h3><ul><li><p>直接 while 等待 数据， 会造成后面的数据阻塞</p></li><li><p>使用Handler 来接送数据， 会产生大量的线程， 消耗系统资源， 同时 即便你让一个线程去接受多个数据， 因为OIO的阻塞，性质，导致前面的数据没有完成之后， 后面的数据无法进行， 这就会导致无法并行</p></li><li><p>缺点： Connection per Thread 的模式就是 会消耗大量的系统资源。这在高并发的场景是致命的</p></li></ul><h3 id="单线程Reactor-模式"><a href="#单线程Reactor-模式" class="headerlink" title="单线程Reactor 模式"></a>单线程Reactor 模式</h3><ul><li><p>首先必须要介绍两个重要的方法</p><ul><li>attach 将对象附加到选择键</li><li>attachment 从选择器获取附加对象</li></ul><p>这两个 一个是 将<strong>Java POJO对象</strong>作为附件添加到 选择键实例中。</p></li><li><p>注意阅读代码的时候，直接调用 run 方法不会开启一个新的线程来执行， 而是直接执行， （需要使用start())</p></li><li><p>一个 Reactor ， 对应了两个 Handler </p><ul><li>第一个是进行IO事件的处理</li><li>另一个是处理业务逻辑</li></ul></li><li><p>重要的 方法</p><ul><li>SelectionKey （选择键）<ul><li><code>void attach(Object o)</code>  将对象附加到选择键</li><li><code>Object attachment() </code> 从选择键获取附加对象</li></ul></li></ul></li></ul><h3 id="多线程Reactor-模式"><a href="#多线程Reactor-模式" class="headerlink" title="多线程Reactor 模式"></a>多线程Reactor 模式</h3><ul><li>将<strong>IOHandler</strong> 的处理器执行放入到独立的线程池中， 这样， 业务处理线程和负责新连接的监听的反应器线程就可以实现相互隔离，避免服务器的连接监听收到阻塞。</li><li>将反应器线程拆分为多个子反应器， 然后引入多个选择器。，一个线程负责一个一个选择器</li></ul><blockquote><p>实现的机制</p></blockquote><ul><li><p>引入 一个 多个选择器</p></li><li><p>设计一个子反应器类， 子反应器负责查询一个选择器</p></li><li><p>开启多个处理线程， 一个处理线程负责一个子反应器</p></li><li><p>将IO事件进分类隔离，</p></li><li><p>对反应器 做了 分类 一个 是 bossReactor 一个是 workReactor</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202403172015874.webp" alt="image-20240317201533319"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202403172132856.webp" alt="image-20240317213205556"></p><ul><li>我们让主反应器 建立连接请求， 然后再连接请求的时候， 它就从， 从反应器里面轮询挑选一个 选择器， 然后唤醒它， 这样 哪个被选中的 从反应器 就 会 醒来， 往下面 执行 Handler 的 部分， 然后再 读取完数据之后， 把剩下 的 事务提交给子线程来做就好了</li></ul><h2 id="正式进入Netty"><a href="#正式进入Netty" class="headerlink" title="正式进入Netty"></a>正式进入Netty</h2><ul><li>首先上来就是一堆乱起八糟的代码， 这个时候， 实际上就牵涉到我们刚刚学习 Reactor 模式。</li></ul><h3 id="方法和类"><a href="#方法和类" class="headerlink" title="方法和类"></a>方法和类</h3><ul><li><p>NioEventLoopGroup</p><p>这个就是Netty中的反应器</p></li><li><p><strong>serverBootstrap</strong> 服务引导类，它的职责是将不同的Netty组件组装再一起。</p></li><li><p><strong>ChannelInboundHandlerAdapter</strong> （入站适配器）</p><ul><li>如果要实现自己的入站处理器Handler， 可以简单的继承ChannelInboundHandlerAdapter 入站处理器适配器，再写入自己的入站处理的业务逻辑（重写）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">NettyDiscardHandler <span class="keyword">extends</span> <span class="title class_">ChannelInboundHandlerAdapter</span>&#123;</span><br><span class="line">    <span class="meta">@override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">channelRead</span><span class="params">(ChannelHandlerContext ctx, Object msg)</span>&#123;</span><br><span class="line">        <span class="type">ByteBuf</span> <span class="variable">in</span> <span class="operator">=</span> (ByteBuf) msg;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            <span class="keyword">while</span>(in.inReadable())&#123;</span><br><span class="line">                sout((<span class="type">char</span>)in.readByte());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">finally</span>&#123;</span><br><span class="line">            ReferenceCountUtils.release(msg);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></li></ul><h3 id="解密Netty的Reactor-模式"><a href="#解密Netty的Reactor-模式" class="headerlink" title="解密Netty的Reactor 模式"></a>解密Netty的Reactor 模式</h3><ol><li><p>通道注册</p><p>再netty中， 就是channel 注册到 EventLoop上面， 对应到底层就是NIO的Channel 注册到NIO的Selector 上。</p></li><li><p>查询事件</p><p>查询选择器Selector中的IO事件并记录再选择键上面</p></li><li><p>事件内容分发、数据读取 发射</p><p>反应器EventLoop 将事件分发和数据读取两个操作一起负责了。</p><p>他会从Unsafe成员中， 获取到信息到IO事件被触发的时候， EventLoop读取到数据后， 会把数据发射到Channel 内部的Pipeline通道。</p></li><li><p>流水线传播 和 业务处理</p><p>数据再通道的Pipeline上传播， 通道由Handler构成， 由Handler业务处理器负责。 处理完成之后， 又把任务交给下一个Handler 。这样就构成了一个责任链模式。</p></li></ol><ul><li>一般我们使用最多的就是NioSocketChannel 这个协议</li></ul>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> Netty </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_Juc</title>
      <link href="/2023/10/31/Java-Juc/"/>
      <url>/2023/10/31/Java-Juc/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖改变"><a href="#依赖改变" class="headerlink" title="依赖改变"></a>依赖改变</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><blockquote><p>进程就是： 一个软件实例就是一个进程</p><p>线程就是： 进程的子集 </p></blockquote><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><blockquote><p>并发(concurrent)就是， 一个核心迅速在多个任务之间切换</p><p>并行(parallel)就是， 多个核心同时在多个任务运行。</p></blockquote><h2 id="异步和同步"><a href="#异步和同步" class="headerlink" title="异步和同步"></a>异步和同步</h2><blockquote><p>同步： 不需要等待结果的返回</p><p>异步： 需要等待结果的返回’</p></blockquote><ul><li><p>运行效率提升</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311111906943.png" alt="image-20231111190652846"></p></li></ul><h1 id="创建和运行线程"><a href="#创建和运行线程" class="headerlink" title="创建和运行线程"></a>创建和运行线程</h1><h2 id="直接使用Thread"><a href="#直接使用Thread" class="headerlink" title="直接使用Thread"></a>直接使用Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 需要执行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">t.start() <span class="comment">//线程开始执行</span></span><br></pre></td></tr></table></figure><h2 id="Runnable-配合Thread"><a href="#Runnable-配合Thread" class="headerlink" title="Runnable 配合Thread"></a>Runnable 配合Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 需要执行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><blockquote><p>可以试着使用lambda表达式把上诉代码精简</p></blockquote><h2 id="Thread-和-Runnable之间的关系"><a href="#Thread-和-Runnable之间的关系" class="headerlink" title="Thread 和 Runnable之间的关系"></a>Thread 和 Runnable之间的关系</h2><p>上诉的两个方法中</p><ul><li>方法一： 是把线程和任务合并在一起了</li><li>方法二： 是把线程和任务分开了</li></ul><p>并且使用 Runnable 可以更加的和线程池等高级api 配合。 </p><h2 id="FutureTask-配合Thread"><a href="#FutureTask-配合Thread" class="headerlink" title="FutureTask 配合Thread"></a>FutureTask 配合Thread</h2><blockquote><p> 可以获取任务的执行结果， 他和Runnable 有关系</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line">FutureTask&lt;Integer&gt;task3 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(()-&gt;&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第一个参数任务对象， 第二个参数线程名字</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task3, <span class="string">&quot;t3&quot;</span>)</span><br><span class="line"><span class="comment">// 这里的get会阻塞， 直到结果的返回</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> task3.get();</span><br><span class="line">log.debug(<span class="string">&quot;结果是：&#123;&#125;&quot;</span>, result);</span><br></pre></td></tr></table></figure><h1 id="线程运行"><a href="#线程运行" class="headerlink" title="线程运行"></a>线程运行</h1><h2 id="查看进程线程的方法"><a href="#查看进程线程的方法" class="headerlink" title="查看进程线程的方法"></a>查看进程线程的方法</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311111936309.png" alt="image-20231111193656252"></p><h2 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h2><ol><li>打开cmd</li><li>输入JConsole </li><li>然后就可以连接你想要连接的Java服务</li></ol><p>对于你想要监听的 类， 你需要做如下操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote -</span><br><span class="line">Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -</span><br><span class="line">Dcom.sun.management.jmxremote.authenticate=是否认证 java类</span><br></pre></td></tr></table></figure><h2 id="栈与栈帧"><a href="#栈与栈帧" class="headerlink" title="栈与栈帧"></a>栈与栈帧</h2><p>略（很简单）</p><h2 id="多线程的栈与栈帧"><a href="#多线程的栈与栈帧" class="headerlink" title="多线程的栈与栈帧"></a>多线程的栈与栈帧</h2><blockquote><p>每个线程都有自己独立的栈内存， 线程之间的栈互相不干扰</p></blockquote><h2 id="线程的上下文切换（Thread-context-Switch）"><a href="#线程的上下文切换（Thread-context-Switch）" class="headerlink" title="线程的上下文切换（Thread context Switch）"></a>线程的上下文切换（Thread context Switch）</h2><blockquote><p>从使用cpu到不使用cpu的原因</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122251260.png" alt="image-20231112225156160"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122255852.png" alt="image-20231112225516807"></p><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><p>看pdf</p><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p><strong>getState 获取线程的状态</strong></p><blockquote><p>在未start之前， 调用线程的getState方法会得到一个NEW， 在调用start 之后， 调用线程的getState 方法会得到一个 RUNNABLE</p></blockquote><ul><li>连续调用两次start 方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122307487.png" alt="image-20231112230727451"></p><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><blockquote><p>使得线程的状态由Running 变成 Timed Waiting 状态</p></blockquote><h4 id="线程打断"><a href="#线程打断" class="headerlink" title="线程打断"></a>线程打断</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;enter sleep...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;wake up...&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">log.debug(<span class="string">&quot;interrupt...&quot;</span>);</span><br><span class="line">t1.interrupt();</span><br></pre></td></tr></table></figure><p>报错信息如下</p><blockquote><p>java.lang.InterruptedException: sleep interrupted<br>    at java.lang.Thread.sleep(Native Method)<br>    at cn.itcast.test.Test7$1.run(Test7.java:14)</p></blockquote><ul><li>同时我们还需要注意一个睡眠结束的线程未必会立即执行</li></ul><h4 id="sleep方法更新"><a href="#sleep方法更新" class="headerlink" title="sleep方法更新"></a>sleep方法更新</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 替换成这个更好</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><blockquote><p>使得线程从 running 变成 runnable 状态， 然后调用其他的线程， 如果没有其他的线程要执行会把机会继续让该线程进行</p></blockquote><h3 id="线程优先级（setPriority）"><a href="#线程优先级（setPriority）" class="headerlink" title="线程优先级（setPriority）"></a>线程优先级（setPriority）</h3><blockquote><p>提示任务调度器去优先调度这个线程， 但是这只是个提示，不一定会执行</p><p>当cpu 繁忙的时候，优先级高的就会被分配尽可能多的服务</p></blockquote><p>在Runnable 构造器中， 使用Thread.yield()可以实现让的效果</p><p>而setPriority 需要对线程对象 进行操作。 </p><h4 id="sleep的小应用"><a href="#sleep的小应用" class="headerlink" title="sleep的小应用"></a>sleep的小应用</h4><p>略</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote><p>等待线程的结束， 拥塞主线程</p></blockquote><ul><li>如果下面这段代码不加上 join 方法， 那么就会出现r &#x3D; 0 . 但是又了join之后就会等到这个线程结束之后再去调用后面的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    r = <span class="number">10</span>;</span><br><span class="line">&#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t1.join();</span><br><span class="line">log.debug(<span class="string">&quot;结果为:&#123;&#125;&quot;</span>, r);</span><br><span class="line">log.debug(<span class="string">&quot;结束&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>带参数的join</li></ul><blockquote><p>设置等待的最大时间, 如果超过这个时间就不等待</p></blockquote><h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h3><blockquote><p>介绍不同阻塞状态被打断的会发生的事件</p></blockquote><h4 id="打断sleep-join-wait"><a href="#打断sleep-join-wait" class="headerlink" title="打断sleep join wait"></a>打断sleep join wait</h4><ol><li>sleep 会抛出异常， 同时打断的那一刻会有一个打断标记， 但是会立刻清空，把它变成false</li></ol><ul><li>isInterrupted方法， 获取线程的打断标签（如果被正常的打断是为true）</li></ul><p>如果在一个线程里面， 我们想要获得这个线程的实例</p><p>那么我们可以使用这个方法</p><p><code>Thread.currentThread()</code></p><p>获取打断标签 <code>Thread.currentThread().isInterrupted()</code></p><h4 id="两个阶段终止模式"><a href="#两个阶段终止模式" class="headerlink" title="两个阶段终止模式"></a>两个阶段终止模式</h4><blockquote><p>线程T1 终止 线程 T2， 这里的终止， 不会立刻终止， 而是会等T2处理好一切之后再终止</p></blockquote><ul><li><p>错误思路</p><p>强制终止， stop 方法真正杀死线程。</p><p>使用System.exit(int) 方法停止线程。</p></li><li><p>正确思路</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311132348718.png" alt="image-20231113234824606"></p></li></ul><p>重新设置打断标记， 可以使得原本为false的标记变成true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TwoPhaseTermination</span> <span class="variable">tpt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TwoPhaseTermination</span>();</span><br><span class="line">        tpt.start();</span><br><span class="line"></span><br><span class="line">       Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;停止监控&quot;</span>);</span><br><span class="line">        tpt.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoPhaseTermination</span> &#123;</span><br><span class="line">    <span class="comment">// 监控线程</span></span><br><span class="line">    <span class="keyword">private</span> Thread monitorThread;</span><br><span class="line">    <span class="comment">// 停止标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 判断是否执行过 start 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">starting</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动监控线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (starting) &#123; <span class="comment">// false</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            starting = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        monitorThread = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="comment">// 是否被打断</span></span><br><span class="line">                <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;执行监控记录&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;monitor&quot;</span>);</span><br><span class="line">        monitorThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止监控线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        stop = <span class="literal">true</span>;</span><br><span class="line">        monitorThread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打断park"><a href="#打断park" class="headerlink" title="打断park"></a>打断park</h4><blockquote><p>park 可以让进程暂时停止</p></blockquote><ul><li><p>LockSupport.park()</p></li><li><p>通过对线程使用interrupt方法， 可以让他停止暂停</p></li><li><p>但是如果你打断了它一次， 再打断它就没用了（但是可以通过调用Thread.interrupted使得打断标记重置为假的）<br><code>调用LockSupport.park(),开始打断 </code></p></li></ul><blockquote><p>不推荐使用的方法 stop(使用两阶段终止模式来停止）、 suspend resume 。</p></blockquote><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><ul><li>用例： 垃圾回收器就是一个守护线程</li><li>Tomcat中的Acceptor 和 Poller 都是守护请求， 当它接受到shutdown命令之后，就会关闭掉这两个线程</li></ul><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><h4 id="五种状态"><a href="#五种状态" class="headerlink" title="五种状态"></a>五种状态</h4><ul><li><p>初始状态</p></li><li><p>可运行状态</p></li><li><p>运行状态</p></li><li><p>终止状态</p></li><li><p>阻塞状态</p><p>这是腿上面这几种状态的描述</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311142344333.png" alt="image-20231114234427244"></p><h4 id="六种状态"><a href="#六种状态" class="headerlink" title="六种状态"></a>六种状态</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311142349870.png" alt="image-20231114234947770"></p><ul><li>synchroniz 是一个锁操作，</li></ul><h3 id="统筹规划习题"><a href="#统筹规划习题" class="headerlink" title="统筹规划习题"></a>统筹规划习题</h3><ul><li><font color="green">泡茶问题 </font></li></ul><p>方法一 ： 使用join 方法</p><h2 id="共享模型-之-管程"><a href="#共享模型-之-管程" class="headerlink" title="共享模型 之 管程"></a><font color="red">共享模型 之 管程</font></h2><ul><li>问题引入</li></ul><p>两个 线程同时加加减减， 然后停止， 但是结果和应该的结果不符合</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311152347661.png" alt="image-20231115234729515"></p><p>上面这个是 java的 自增和自减 运算符的 操作过程</p><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>多个线程访问共享资源</p><p>多个线程读写共享资源时发送了指令交错， 就会出现错误</p><p>在一段代码块如果存在对一个共享资源的多线程读写操作， 这个代码块就是一个临界区</p><p>可以理解为 一个代码块里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> increment &#123;</span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h3><blockquote><p>多个线程在临界区内执行， 由于代码块的执行顺序不同而导致结果没有办法预测，称作竞态条件</p></blockquote><h3 id="synchronized-对象锁"><a href="#synchronized-对象锁" class="headerlink" title="synchronized(对象锁)"></a>synchronized(对象锁)</h3><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象) &#123;</span><br><span class="line">    <span class="comment">//临界区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test17</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                    counter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">                    counter--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Test.class)&#123; <span class="comment">// 一般这里直接写Test.class = this就可以了</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程八锁"><a href="#线程八锁" class="headerlink" title="线程八锁"></a>线程八锁</h3><ul><li>类对象和 实例对象的区别</li></ul><h2 id="线程安全的判断"><a href="#线程安全的判断" class="headerlink" title="线程安全的判断"></a>线程安全的判断</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311180042998.png" alt="image-20231118004210879"></p><ul><li>出现错误的情况</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182337128.png" alt="image-20231118233734764"></p><ul><li>如果将list切换为局部变量的时候就不会有事情</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182340074.png" alt="image-20231118234049973"></p><ul><li>但是如果局部变量暴露到外部就会有问题</li></ul><blockquote><p>当创建了子类之后， 并且方法为public ，子类通过添加线程，就有可能出现问题</p></blockquote><p>如果你不想子类重写方法， 请在方法前面加上final修饰符</p><blockquote><p>这就是这些修饰符的作用所在哦 ,这就是开闭原则中的闭原则</p></blockquote><h2 id="常见的线程安全类"><a href="#常见的线程安全类" class="headerlink" title="常见的线程安全类"></a>常见的线程安全类</h2><h3 id="可变的线程安全类"><a href="#可变的线程安全类" class="headerlink" title="可变的线程安全类"></a>可变的线程安全类</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182349951.png" alt="image-20231118234902899"></p><blockquote><p>虽然这些线程类中的每一个方法都实现了线程安全, 但是方法之间的组合不一定满足线程安全</p></blockquote><p>参考如下示意图, 当然我们可以通过在<strong>外层在添加锁来解决这个问题</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182355802.png" alt="image-20231118235532720"></p><h3 id="不可变的线程安全类"><a href="#不可变的线程安全类" class="headerlink" title="不可变的线程安全类"></a>不可变的线程安全类</h3><blockquote><p>获取你有疑问, 为什么replace ,substring也对字符串会有修改效果, 但是还是可以保证线程安全呢?</p></blockquote><p>因为它并没有改变字符串里面的属性,他只是创建了一个新的字符串</p><h3 id="线程安全的例题"><a href="#线程安全的例题" class="headerlink" title="线程安全的例题"></a>线程安全的例题</h3><ul><li><p>例题1</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311190006417.png" alt="image-20231119000606353"></p><p>spring没有特别注释, 都是单例模式,这时候会出现线程安全.,</p><p>我们可以使用环绕通知, 将操作的线程变量变成局部变量</p></li><li><p>例题2</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311190009307.png" alt="image-20231119000915153"></p><p>没有成员变量,且都是正常的局部变量, 所以是安全的</p></li><li><p>例题3(我们要避免外星方法)</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311190013938.png" alt="image-20231119001359863"></p></li><li><p>总结</p><p><strong>加了final不一定可以保证线程安全</strong></p><p><strong>需要使用上面两种类型才会安全</strong></p></li></ul><h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><h3 id="买票问题"><a href="#买票问题" class="headerlink" title="买票问题"></a>买票问题</h3><ul><li>这里暂时找不到源代码</li></ul><h3 id="转账问题"><a href="#转账问题" class="headerlink" title="转账问题"></a>转账问题</h3><p>这里非常坑爹 ,这里的this 只会锁住自己的money, 不会锁住别人的钱</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311190031736.png" alt="image-20231119003104800"></p><p>实际上它的解决方法是将锁指定为 相同的class, 但是它的性能是不高的.(Account类对所有的对象都是共享的.我就拿出这些共享的东西来作为锁)</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311190032027.png" alt="image-20231119003235982"></p><h2 id="Monitor"><a href="#Monitor" class="headerlink" title="Monitor"></a>Monitor</h2><blockquote><p> java通过Klass Word 找到它的类对象</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311212324113.png" alt="image-20231121232402061"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311212321218.png" alt="image-20231121232138066"></p><p>之前我们说<strong>的锁就是Monitor</strong>， 也就是监视器或者管程</p><ul><li>上锁的原理</li><li>这是上锁的流程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311212332738.png" alt="image-20231121233203681"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311212331950.png" alt="image-20231121233145867"></p><ul><li><p>下面是从**&#x3D;&#x3D;字节码角度&#x3D;&#x3D;**理解锁的竞争</p><p>过于难理解 ，不贴了</p></li></ul><h3 id="synchronize优化原理"><a href="#synchronize优化原理" class="headerlink" title="synchronize优化原理"></a>synchronize优化原理</h3><p><a href="https://blog.csdn.net/qq_40722827/article/details/105598682">深入理解Java锁升级：无锁 → 偏向锁 → 轻量级锁 → 重量级锁_偏向锁升级为重量级锁-CSDN博客</a></p><h5 id="轻量级锁"><a href="#轻量级锁" class="headerlink" title="轻量级锁"></a>轻量级锁</h5><blockquote><p>如果一个对象虽然有多个线程访问，但多线程访问的时间是错开的， 那么就可以升级为轻量锁</p><p>语法仍然是synchronized， 和重量级锁相似</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311212353663.png" alt="image-20231121235349598"></p><p>cas表示交换操作， 是原子性</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311212354098.png" alt="image-20231121235402033"></p><p>cas 操作失败会分为两种</p><p>第二种是 自己的线程 给自己加锁， 就会产生锁重入， 如下面这种程序</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">final</span> <span class="variable">obj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method1</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">synchronized</span> (obj)&#123;</span><br><span class="line"><span class="comment">// 同步代码块1</span></span><br><span class="line">        method2();</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">method2</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="keyword">synchronized</span>(obj )&#123;</span><br><span class="line"><span class="comment">//同步代码块2</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311212357117.png" alt="image-20231121235708042"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311212359774.png" alt="image-20231121235901700"></p><h5 id="锁膨胀"><a href="#锁膨胀" class="headerlink" title="锁膨胀"></a>锁膨胀</h5><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252312519.webp" alt="image-20231125231209322"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252312018.webp" alt="image-20231125231244784"></p><h5 id="自旋优化"><a href="#自旋优化" class="headerlink" title="自旋优化"></a>自旋优化</h5><ul><li>适合多核CPU下面才有意义</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252315968.webp" alt="image-20231125231548714"></p><p>java 7 之后就不能控制是否开启自旋</p><h5 id="偏向锁"><a href="#偏向锁" class="headerlink" title="偏向锁"></a>偏向锁</h5><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252347725.webp" alt="image-20231125234729547"></p><ul><li>没有使用偏向锁</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252331576.webp" alt="image-20231125233140429"></p><ul><li>使用了偏向锁</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252331755.webp" alt="image-20231125233111619"></p><ol><li><p>偏向状态</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252338438.webp" alt="image-20231125233801290"></p><p>偏向锁会延迟生效， 所以需要过一会才会从正常状态变成偏向锁状态</p><p>我们可以通过在jvm 加上配置参数-XX:BiasedLockingStartupDelay&#x3D;0来禁止延迟</p></li><li><p>当一个可以偏向的锁，使用hashcode之后， 就会变成无锁状态</p></li><li><p>如果存在一个其他线程也需要使用偏向锁对象的时候， 偏向锁也会变成轻量锁</p></li><li><p>当调用wait&#x2F;notify 的时候就会撤销偏向锁和轻量锁给撤销， 变成重量级锁</p></li></ol><h5 id="批量重偏向"><a href="#批量重偏向" class="headerlink" title="批量重偏向"></a>批量重偏向</h5><ul><li>当撤销出现20次</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311252358572.webp" alt="image-20231125235827458"></p><p>如果有一个锁， 一开始由线程a掌控， 后面转变为 线程b掌控， 那么在线程b咋锁重入多次之后， 就会变成 偏向锁</p><h5 id="批量撤销"><a href="#批量撤销" class="headerlink" title="批量撤销"></a>批量撤销</h5><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311260004258.webp" alt="image-20231126000436138"></p><ul><li>当撤销出现40次</li></ul><h4 id="锁消除"><a href="#锁消除" class="headerlink" title="锁消除"></a>锁消除</h4><p>利用 JIT(即使编译器， 会对java的字节码进行进一步的优化) 会优化锁（反正是一些 jvm的骚操作就对了）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311260017467.webp" alt="image-20231126001743330"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311260020656.webp" alt="image-20231126002030539"></p><h2 id="wait"><a href="#wait" class="headerlink" title="wait"></a>wait</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312012345186.webp" alt="image-20231201234554894"></p><h3 id="API-介绍"><a href="#API-介绍" class="headerlink" title="API 介绍"></a>API 介绍</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312012347646.webp" alt="image-20231201234715382"></p><ul><li>我们可以往 wait （ ）里面添加一个时间， 这样他会在过了这个时间之后就唤醒</li></ul><h3 id="wait-和-sleep-的区别"><a href="#wait-和-sleep-的区别" class="headerlink" title="wait 和 sleep 的区别"></a>wait 和 sleep 的区别</h3><p>sleep 睡眠的时候， 不会释放锁， 但是wait 会释放锁</p><p>sleep 不需要和 synchronize 配合使用， 但是wait 需要</p><p>sleep 是Thread 方法， wait 是Object 的方法 </p><p>他们的共同点是 ： 它们的状态都是TIMED_WAITING</p><h3 id="实验总结"><a href="#实验总结" class="headerlink" title="实验总结"></a>实验总结</h3><p>我们可以设置一个 唤醒的条件为 xxx， 如果确实是对应线程的唤醒就把xxx 改成true， 然后跳出while 循环。 </p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312020015764.webp" alt="image-20231202001559648"></p><ul><li>唤醒条件。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042111458.webp" alt="image-20231204211131174"></p><ul><li>唤醒线程</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042112531.webp" alt="image-20231204211203415"></p><h1 id="模式"><a href="#模式" class="headerlink" title="模式"></a>模式</h1><h2 id="同步模式"><a href="#同步模式" class="headerlink" title="同步模式"></a>同步模式</h2><h3 id="保护模式"><a href="#保护模式" class="headerlink" title="保护模式"></a>保护模式</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042113336.webp" alt="image-20231204211329108"></p><ul><li>保护模式大体上是这样实现的</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042121366.webp" alt="image-20231204212124193"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042128182.webp" alt="image-20231204212817002"></p><p>使用join 就需要一直等待， 但是使用这个模式可以， 继续干别的</p><ul><li><p>我们还可以给这个模式添加一些功能</p><ul><li><p>增添超时时间</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042130126.webp" alt="image-20231204213040958"></p><p>但是这里会有点问题， 如果出现虚假唤醒的时候， 你每次又得 重新等2秒， 所以修改为下面这种方式</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042133874.webp" alt="image-20231204213336680"></p></li></ul></li></ul><h3 id="join-原理"><a href="#join-原理" class="headerlink" title="join 原理"></a>join 原理</h3><p>略（类似于上面超时的保护模式）</p><h3 id="保护模式-拓展2"><a href="#保护模式-拓展2" class="headerlink" title="保护模式-拓展2"></a>保护模式-拓展2</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042145091.webp" alt="image-20231204214459811"></p><p>有点懵逼（到时候可以在看看）</p><h2 id="异步模式-生产者消费者"><a href="#异步模式-生产者消费者" class="headerlink" title="异步模式 - 生产者消费者"></a>异步模式 - 生产者消费者</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042218232.webp" alt="image-20231204221816973"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042226179.webp" alt="image-20231204222624029"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042226520.webp" alt="image-20231204222632387"></p><ul><li>测试代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042231358.webp" alt="image-20231204223105216"></p><ul><li>产生的结果为</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312042231500.webp" alt="image-20231204223118306"></p><h2 id="park-Unpark"><a href="#park-Unpark" class="headerlink" title="park &amp; Unpark"></a>park &amp; Unpark</h2><ul><li>park 就是 等待， 当调用unpark的时候就唤醒park的地方</li><li>如果先调用unpark的时候， park 就不会等待</li></ul><h3 id="差异"><a href="#差异" class="headerlink" title="差异"></a>差异</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082208682.webp" alt="image-20231208220812459"></p><h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><ul><li>但是多次unpark只会补充一次备用干粮</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082211456.webp" alt="image-20231208221103307"></p><h2 id="重新理解线程状态"><a href="#重新理解线程状态" class="headerlink" title="重新理解线程状态"></a>重新理解线程状态</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082219545.webp" alt="image-20231208221917441"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082219710.webp" alt="image-20231208221929578"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082225933.webp" alt="image-20231208222553708"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082229138.webp" alt="image-20231208222930962"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082230886.webp" alt="image-20231208223043747"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082231393.webp" alt="image-20231208223103215"></p><h2 id="多把锁"><a href="#多把锁" class="headerlink" title="多把锁"></a>多把锁</h2><h3 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h3><p>就是把原本一个锁换成多个锁， 缩小锁粒度</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082233028.webp" alt="image-20231208223350900"></p><h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>略</p><p>a锁想要b锁</p><p>b锁想要a锁</p><h4 id="定位死锁"><a href="#定位死锁" class="headerlink" title="定位死锁"></a>定位死锁</h4><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20231208223613168.png" alt=""></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 在terminal中输入，查看线程信息</span></span><br><span class="line">jps</span><br><span class="line"><span class="comment">// xxx 代表线程号</span></span><br><span class="line">jstack xxx </span><br><span class="line"><span class="comment">// jmeter连接对应的进程</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="哲学家就餐"><a href="#哲学家就餐" class="headerlink" title="哲学家就餐"></a>哲学家就餐</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202312082240348.webp" alt="image-20231208224001123"></p><p>每个人拿一个筷子， 但是在等别人的筷子</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程mysql连接不上</title>
      <link href="/2023/10/30/%E8%BF%9C%E7%A8%8Bmysql%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A/"/>
      <url>/2023/10/30/%E8%BF%9C%E7%A8%8Bmysql%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="用户权限已经是-，但是远程数据库依旧连接不上"><a href="#用户权限已经是-，但是远程数据库依旧连接不上" class="headerlink" title="用户权限已经是%，但是远程数据库依旧连接不上"></a>用户权限已经是%，但是远程数据库依旧连接不上</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近趁着双11购买了腾讯云服务器，想着配置好环境，早点用上。</p><p>然后启动我的数据库 开始 狠狠的连接（误）， 结果都是timeout ？ ， 什么我明明已经设置了用户权限是%啊！</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301954484.png" alt="image-20231030195447448"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>后来思来想去， 突然想要去看看端口是不是3306， 然后想到中午打开腾讯云的时候，看到了端口？ 我才猛地意识到我的3306端口没有开启</p><blockquote><p>不过这个已经是开启后的了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301951278.png" alt="image-20231030195131182"></p><h3 id="开启端口方式"><a href="#开启端口方式" class="headerlink" title="开启端口方式"></a>开启端口方式</h3><ul><li>点击 添加规则</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301952077.png" alt="image-20231030195223035"></p><p>跳出来这个页面， 然后将应用类型的下拉框选择mysql ，就好了</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301952193.png" alt="image-20231030195259158"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域请求解决-nginx服务器</title>
      <link href="/2023/10/28/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%A7%A3%E5%86%B3-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/10/28/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%A7%A3%E5%86%B3-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="跨域请求问题-nginx解决"><a href="#跨域请求问题-nginx解决" class="headerlink" title="跨域请求问题 - nginx解决"></a>跨域请求问题 - nginx解决</h1><ul><li>想象一个场景， 我在用vue3 vite 写前端（或者已经打包后的文件）， 同时后端用springboot ， 我写完一个功能想要调试， 但是遇到了下面这个问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282236940.png" alt="image-20231028223647903"></p><p>这就是跨域请求的会出现的问题。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>我在网上看到了很多， 在前端配置一些文件， 在后端加上注解或添加一些配置类文件， 但是恰巧我的程序使用了上面种种方法都无法成功， 在舍友的提醒下， 我开始使用nginx</p></li><li><p>打开nginx 文件夹 打开conf</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282239386.png" alt="image-20231028223957355"></p><ul><li>使用 vscode 打开 这个nginx.conf(最好不要使用文本编辑器)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282240185.png" alt="image-20231028224030156"></p><ul><li>加上 这段代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282241195.png" alt="image-20231028224109169"></p><p>我解释一下它的作用， 首先 nginx 有一个监听的端口， 这里就是180，（<strong>所以我们后续调试打开的地址就是180）</strong></p><p>然后 location &#x2F;api 就是你的路径以 api 开头的网址， 被转发到</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282242519.png" alt="image-20231028224242497"></p><p>同理 &#x2F;friend 就被转发到</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282243562.png" alt="image-20231028224303540"></p><p>其余的都被转发到 5173 端口。</p><blockquote><p>在这里 8080 端口是你后端程序的端口， 而5173可以换成你前端程序的端口</p></blockquote><p>而 &#x2F;api 和 &#x2F; friend 就是 我的前端的请求接口 一个是以api 开头一个是 friend开头 。</p><p>哦 对了， 我们还需要将前端的请求地址换成180端口</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282246671.png" alt="image-20231028224611652"></p><p> 这里根据你的nginx 监听的端口而定</p><p>然后打开localhost:180， 发现启动成功</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282247683.png" alt="image-20231028224751393"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传和文件下载</title>
      <link href="/2023/10/28/java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2023/10/28/java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">uploadFileAndPicture</span><span class="params">(MultipartFile e)</span>  &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originFileName</span> <span class="operator">=</span> e.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originFileName.substring(originFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + originFileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            e.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basepath + originFileName));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, originFileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="文件下载-点击文件之后可下载"><a href="#文件下载-点击文件之后可下载" class="headerlink" title="文件下载 - 点击文件之后可下载"></a>文件下载 - 点击文件之后可下载</h1><h2 id="后端-java"><a href="#后端-java" class="headerlink" title="后端 - java"></a>后端 - java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/downloadfile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, HttpServletRequest request, String fileName, String extend)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + fileName);</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, extend);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        result.put(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;下载的文件不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    response.reset();</span><br><span class="line">    response.setContentType(extend);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentLength((<span class="type">int</span>) file.length());</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(file.getName(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="type">byte</span>[] readeBytes = FileUtil.readBytes(file);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    os.write(readeBytes);</span><br><span class="line">    result.put(<span class="string">&quot;success&quot;</span>, <span class="string">&quot;下载成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端-vue"><a href="#前端-vue" class="headerlink" title="前端 - vue"></a>前端 - vue</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api/download 就是 上面后端download的地址</span></span><br><span class="line">axios.<span class="title function_">get</span>(baseUrl + <span class="string">&quot;/api/downloadfile&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">fileName</span>: item.<span class="property">fileName</span>,</span><br><span class="line">        <span class="attr">extend</span>: item.<span class="property">extend</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 注意这里一定要写arraybuffer， 不然可能会出错</span></span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 先转换为 Blob类型</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;<span class="attr">type</span>: item.<span class="property">extend</span>&#125;))</span><br><span class="line"><span class="comment">// 在转换为 File类型</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">blob</span>=&gt;</span> <span class="keyword">new</span> <span class="title class_">File</span>([blob], item.<span class="property">fileName</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">file</span>=&gt;</span>&#123;</span><br><span class="line">        item.<span class="property">msg</span> = file</span><br><span class="line">        <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">        <span class="keyword">let</span> fileNameTemp = item.<span class="property">fileName</span></span><br><span class="line">        reader.<span class="property">onloadend</span> = <span class="function">(<span class="params">es</span>)=&gt;</span>&#123;</span><br><span class="line">            item.<span class="property">msg</span> = es.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">            item.<span class="property">fileName</span> = fileNameTemp</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">msg</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(item.<span class="property">chatType</span> === <span class="number">1</span>)&#123;</span><br><span class="line">                srcImgList.<span class="property">value</span>.<span class="title function_">push</span>(item.<span class="property">msg</span>)</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h1><h2 id="断点上传"><a href="#断点上传" class="headerlink" title="断点上传"></a>断点上传</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li>上传分片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadslice&quot;)</span></span><br><span class="line"><span class="comment">//    File file, Long chunkcnt,String md5</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">uploadchunks</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span>MultipartFile file , <span class="meta">@RequestPart(&quot;hash&quot;)</span> String hash, <span class="meta">@RequestPart(&quot;chunkcnt&quot;)</span> String chunkcnt ,<span class="meta">@RequestPart(&quot;filename&quot;)</span> String filename, <span class="meta">@RequestPart(&quot;totalCnt&quot;)</span> String totalCnt)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, filename);</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> filename.substring(<span class="number">0</span>, filename.lastIndexOf(<span class="string">&quot;.&quot;</span>) - <span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, suffix);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, prefix);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath  + hash+ <span class="string">&quot;\\&quot;</span> + prefix+  <span class="string">&quot;_&quot;</span> + chunkcnt);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        file.transferTo(dir);</span><br><span class="line">        <span class="comment">//        uploadcache.put(hash, Integer.parseInt(chunkcnt));</span></span><br><span class="line">        <span class="keyword">if</span>(uploadcache.containsKey(hash)) uploadcache.put(hash, uploadcache.get(hash) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> uploadcache.put(hash, <span class="number">0</span>);</span><br><span class="line">        log.info(<span class="string">&quot;当前写了: &#123;&#125;&quot;</span>, chunkcnt);</span><br><span class="line">        <span class="keyword">if</span>(chunkcnt.equals(totalCnt))&#123;</span><br><span class="line">            <span class="comment">//执行合并</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">ismerge</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(!ismerge)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(totalCnt);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">                    <span class="type">File</span> <span class="variable">fileitem</span>    <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + hash + <span class="string">&quot;\\&quot;</span> + prefix + <span class="string">&quot;_&quot;</span> + i);</span><br><span class="line">                    <span class="keyword">if</span>(!fileitem.exists())&#123;</span><br><span class="line">                        log.info(<span class="string">&quot;还有文件没有输入结束&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i == n) ismerge = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;当前的文件为&#123;&#125;/&#123;&#125;&quot;</span>,chunkcnt ,totalCnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>合并文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/merge&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">fileMerge</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hash</span> <span class="operator">=</span> map.get(<span class="string">&quot;hash&quot;</span>).toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> map.get(<span class="string">&quot;filename&quot;</span>).toString();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">totalCnt</span> <span class="operator">=</span> Integer.valueOf(map.get(<span class="string">&quot;totalCnt&quot;</span>).toString());</span><br><span class="line">    log.info(<span class="string">&quot;开始合并&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> filename.substring(<span class="number">0</span>, filename.lastIndexOf(<span class="string">&quot;.&quot;</span>) - <span class="number">1</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">mergeFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + filename);</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(mergeFile));</span><br><span class="line">    <span class="comment">// 获取到所有的files</span></span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, basepath +  hash);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= totalCnt; ++i)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + hash + <span class="string">&quot;\\&quot;</span> + prefix + <span class="string">&quot;_&quot;</span> +Integer.toString(i));</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>, file.length(), file.getName());</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 记录每次读取的字节数</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">// 循环读取分片文件，直到读完</span></span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 将读取的数据写入合并后的文件</span></span><br><span class="line">            bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    bos.flush();</span><br><span class="line">    bos.close();</span><br><span class="line">    log.info(<span class="string">&quot;合并成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断这次上传的文件要从第几个分片开始上传</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/reupload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">reUpload</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hash</span> <span class="operator">=</span> map.get(<span class="string">&quot;result&quot;</span>).toString();</span><br><span class="line">    <span class="keyword">if</span>(!uploadcache.containsKey(hash)) <span class="keyword">return</span> R.success(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 上传下一位就好了</span></span><br><span class="line">    <span class="keyword">return</span> R.success(uploadcache.get(hash) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><blockquote><p>你需要先下载 md5 的包才能继续往下看， 指令为<code>npm install spark-md5</code></p></blockquote><ul><li>将文件的内容进行分片（我这里默认是 1024 KB）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里传递的参数 files 为 File格式的对象， chunkSize 表示 分片的大小（我的chunkSize 为 1024 * 1024）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createChunks</span>(<span class="params">files, chunkSize</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> results = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.<span class="property">size</span>; i += chunkSize)&#123;</span><br><span class="line">        results.<span class="title function_">push</span>(files.<span class="title function_">slice</span>(i, i + chunkSize))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的<strong>createChunks</strong>函数返回了 数组 ， 我们用一个变量接受它，</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> chunks = <span class="title function_">createChunks</span>(file, <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line"><span class="title function_">hash</span>(chunks) <span class="comment">// 这个函数再下面</span></span><br></pre></td></tr></table></figure><ul><li>再将文件的内容读取转换为 md5</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里传递的参数为 file格式的对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hash</span>(<span class="params">chunks</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> spark = <span class="keyword">new</span> <span class="title class_">SparkMD5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resovle</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">_read</span>(<span class="params">i</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= chunks.<span class="property">length</span>)&#123;</span><br><span class="line">                <span class="comment">//输出一个哈希</span></span><br><span class="line">                <span class="title function_">resovle</span>(spark.<span class="title function_">end</span>());</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> blob = chunks[i]</span><br><span class="line">            <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span></span><br><span class="line">            reader.<span class="property">onload</span> = <span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">const</span> bytes = e.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">                spark.<span class="title function_">append</span>(bytes)</span><br><span class="line">                <span class="title function_">_read</span>(i + <span class="number">1</span>)</span><br><span class="line">            &#125; </span><br><span class="line">            reader.<span class="title function_">readAsArrayBuffer</span>(blob)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">_read</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取上次上传文件的进度</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reuploadcnt = <span class="keyword">await</span> <span class="title function_">reUpload</span>(reuploadobj)</span><br></pre></td></tr></table></figure><ul><li>这里就是对每一个分片进行下载（这里是单线程下载）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = reuploadcnt; i &lt; chunks.<span class="property">length</span>; ++i)&#123;</span><br><span class="line">    <span class="comment">// const loop = async(index, i, result, filesizes)=&gt;&#123;</span></span><br><span class="line">    <span class="keyword">if</span>(stopupload.<span class="property">value</span>[index] === <span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// let file = chunks[i]</span></span><br><span class="line">    <span class="keyword">let</span> chunkcnt = i</span><br><span class="line">    <span class="keyword">let</span> md5 = result</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">    <span class="keyword">const</span> blob = chunks[i]</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, blob)</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;hash&#x27;</span>, result)</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;chunkcnt&#x27;</span>, i)</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;filename&#x27;</span>, files.<span class="property">name</span>)</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;totalCnt&#x27;</span>, chunks.<span class="property">length</span> - <span class="number">1</span>)  </span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/uploadslice&#x27;</span>, (formData),&#123;</span><br><span class="line">        <span class="attr">onUploadProgress</span>: <span class="keyword">function</span>(<span class="params">progressEvent</span>)&#123;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">sendHeartbeat</span>(<span class="params"></span>) &#123;  </span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">                    <span class="keyword">if</span> (socket.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;  </span><br><span class="line">                        socket.<span class="title function_">send</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 发送空的心跳包给服务器  </span></span><br><span class="line">                        <span class="title function_">sendHeartbeat</span>(); <span class="comment">// 递归调用发送心跳包函数，以保持连接活跃  </span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已关闭&#x27;</span>);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;, <span class="number">5000</span>); <span class="comment">// 每30秒发送一次心跳包给服务器  </span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( valueUploadList.<span class="property">value</span>[index] + ( (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / filesizes) &lt;= ((i + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>) / filesizes)</span><br><span class="line">                valueUploadList.<span class="property">value</span>[index] += ( (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / filesizes)</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                valueUploadList.<span class="property">value</span>[index] = ((i + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>) / filesizes</span><br><span class="line">            <span class="keyword">if</span>(stopupload.<span class="property">value</span>[index] === <span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(stopupload.<span class="property">value</span>[index] === <span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在所有文件上传完成之后开始合并操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> merge = &#123;</span><br><span class="line">    <span class="attr">hash</span>:  result,</span><br><span class="line">    <span class="attr">filename</span>: files.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">totalCnt</span>: chunks.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> finish = <span class="keyword">await</span> <span class="title function_">fileMerge</span>(merge)</span><br></pre></td></tr></table></figure><h2 id="断点下载"><a href="#断点下载" class="headerlink" title="断点下载"></a>断点下载</h2><blockquote><p>类似于断点上传， 只不过是把过程放过来</p></blockquote><h3 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h3><ul><li>判断请求的文件的大小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getsize&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Long&gt; <span class="title function_">getFileSize</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> map.get(<span class="string">&quot;fileName&quot;</span>).toString();</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + fileName);</span><br><span class="line">    <span class="keyword">return</span> R.success(file.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断上一次 下载到哪个分片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/redownload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">redownload</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> map.get(<span class="string">&quot;fileName&quot;</span>).toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> map.get(<span class="string">&quot;userid&quot;</span>).toString();</span><br><span class="line">    String encrypted= DigestUtils.md5DigestAsHex((basepath + fileName + userid).getBytes());</span><br><span class="line">    <span class="keyword">if</span>(downloadcache.containsKey(encrypted) == <span class="literal">false</span>) <span class="keyword">return</span> R.success(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(downloadcache.get(encrypted) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下载分片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/downloadslicefile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloadSliceFile</span><span class="params">(HttpServletResponse response, HttpServletRequest request , String fileName, String extend, Long start, Long end, <span class="type">int</span> curcnt, String userid, <span class="type">int</span> totalcnt)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">contentLength</span> <span class="operator">=</span> request.getContentLength();</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125; : &#123;&#125;&quot;</span> , start, end);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + fileName);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        result.put(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;下载的文件不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    response.reset();</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentLength((<span class="type">int</span>) file.length());</span><br><span class="line">    <span class="comment">// 请求头一定要写不让发不出来</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(file.getName(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    response.setHeader(<span class="string">&quot;Accept-Range&quot;</span>, <span class="string">&quot;bytes&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentRange</span> <span class="operator">=</span> String.valueOf(<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;bytes &quot;</span>).append(start).append(<span class="string">&quot;-&quot;</span>).append(end));</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Range&quot;</span>, contentRange);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Length&quot;</span>, String.valueOf(end - start + <span class="number">1</span>));</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">rf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(basepath + fileName, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    rf.seek(start);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) (end - start + <span class="number">1</span>)];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> rf.read(bytes);</span><br><span class="line">    <span class="keyword">if</span>(len != -<span class="number">1</span>) os.write(bytes ,<span class="number">0</span>, (<span class="type">int</span>) (end - start + <span class="number">1</span>));</span><br><span class="line">    rf.close();</span><br><span class="line">    os.close();</span><br><span class="line">    result.put(<span class="string">&quot;success&quot;</span>, <span class="string">&quot;文件下载成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String encrypted= DigestUtils.md5DigestAsHex((basepath + fileName + userid).getBytes());</span><br><span class="line">    downloadcache.put(encrypted, curcnt);</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, curcnt, totalcnt);</span><br><span class="line">    <span class="keyword">if</span>(curcnt == totalcnt)&#123;</span><br><span class="line">        downloadcache.remove(encrypted);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h3><ul><li>请求文件的大小</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sizehigh = <span class="keyword">await</span> <span class="title function_">getSize</span>(getsizeobj)</span><br></pre></td></tr></table></figure><ul><li>获取下载的分片个数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> downloadcnt = <span class="keyword">await</span> <span class="title function_">redownload</span>(redownloadobj)</span><br></pre></td></tr></table></figure><ul><li>对每一个分片进行下载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = startsize;i &lt; sizehigh; i += len)&#123;</span><br><span class="line">    len = <span class="title class_">Math</span>.<span class="title function_">min</span>(sizehigh - i, <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/downloadslicefile&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">fileName</span>: item.<span class="property">fileName</span>,</span><br><span class="line">            <span class="attr">extend</span>: item.<span class="property">extend</span>,</span><br><span class="line">            <span class="attr">start</span>: i,</span><br><span class="line">            <span class="attr">end</span>: i + len - <span class="number">1</span>,</span><br><span class="line">            <span class="attr">curcnt</span>: curcnt,</span><br><span class="line">            <span class="attr">userid</span>: userstore.<span class="property">userid</span>,</span><br><span class="line">            <span class="attr">totalcnt</span>: totalcnt</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="attr">range</span>: <span class="string">`bytes=<span class="subst">$&#123;i&#125;</span>-<span class="subst">$&#123;i + len - <span class="number">1</span>&#125;</span>`</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span>,</span><br><span class="line">        <span class="title function_">onDownloadProgress</span>(<span class="params">progressEvent</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(valueList.<span class="property">value</span>[index] + (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / sizehigh &gt; ((curcnt + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span>) / sizehigh * <span class="number">100</span>)</span><br><span class="line">                valueList.<span class="property">value</span>[index] = ((curcnt + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span>) / sizehigh * <span class="number">100</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                valueList.<span class="property">value</span>[index] += (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / sizehigh;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前进度条位： &#x27;</span>, valueList.<span class="property">value</span>[index] + <span class="string">&#x27;  正在传送 &#x27;</span> + curcnt + <span class="string">&#x27;   &#x27;</span> + ((curcnt + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span>) / sizehigh * <span class="number">100</span>);</span><br><span class="line">            <span class="keyword">if</span>(stopdownload.<span class="title function_">get</span>(index) === <span class="literal">true</span>)&#123;</span><br><span class="line">                arraymap.<span class="title function_">set</span>(index, arrayBufferArray)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(curcnt);</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">clip</span>=&gt;</span>&#123;</span><br><span class="line">        arrayBufferArray.<span class="title function_">push</span>(clip)</span><br><span class="line">        <span class="comment">// console.log(clip);</span></span><br><span class="line">        curcnt += <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下载完成之后 合并文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">concatArrayBuffer</span>(<span class="params">arrayBufferArray</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> totalLength = <span class="number">0</span>;</span><br><span class="line">    arrayBufferArray.<span class="title function_">forEach</span>(<span class="function"><span class="params">arrayBuffer</span> =&gt;</span> &#123;</span><br><span class="line">        totalLength += arrayBuffer.<span class="property">byteLength</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(totalLength);</span><br><span class="line">    <span class="keyword">let</span> offset = <span class="number">0</span>;</span><br><span class="line">    arrayBufferArray.<span class="title function_">forEach</span>(<span class="function"><span class="params">arrayBuffer</span> =&gt;</span> &#123;</span><br><span class="line">        result.<span class="title function_">set</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer), offset);</span><br><span class="line">        offset += arrayBuffer.<span class="property">byteLength</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i + len === sizehigh)&#123;</span><br><span class="line">     <span class="keyword">let</span> res = <span class="title function_">concatArrayBuffer</span>(arrayBufferArray)</span><br><span class="line">     <span class="keyword">const</span> blob = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;<span class="attr">type</span>: item.<span class="property">extend</span>&#125;)</span><br><span class="line">     <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">     <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">     a.<span class="property">download</span> = item.<span class="property">fileName</span></span><br><span class="line">     a.<span class="property">href</span> = url </span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">     a.<span class="title function_">click</span>()</span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a)    </span><br><span class="line">     <span class="title class_">ElNotification</span>(&#123;</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&#x27;获得了一个文件🎉&#x27;</span>,</span><br><span class="line">         <span class="attr">message</span>: <span class="string">&#x27;下载成功🥳&#x27;</span></span><br><span class="line">     &#125;)  </span><br><span class="line">     arraymap.<span class="title function_">delete</span>(index)</span><br><span class="line">     <span class="title function_">resetValue</span>(index)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>如果中途停止下载， 利用一个map对象存储对应index 的 已下载的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(stopdownload.<span class="title function_">get</span>(index) === <span class="literal">true</span>)&#123;</span><br><span class="line">    arraymap.<span class="title function_">set</span>(index, arrayBufferArray)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picgo和GitHub搭建的问题</title>
      <link href="/2023/10/28/Picgo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/10/28/Picgo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="报错403"><a href="#报错403" class="headerlink" title="报错403"></a>报错403</h1><p>将github 作为 图床的时候出现了问题，打开日志文档一看， 报错403， 在网上搜寻无果。</p><p>然后回想起在github 生成token的时候没有点击任何选项</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282025158.png" alt="image-20231028202525111"></p><p>将这个repo 勾选之后， 发送图片成功</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> github 图床 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
