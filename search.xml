<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>elasticsearch学习</title>
      <link href="/2023/11/18/elasticsearch%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/11/18/elasticsearch%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="基础认识"><a href="#基础认识" class="headerlink" title="基础认识"></a>基础认识</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182106095.png" alt="image-20231118210644022"></p><ul><li>什么叫做倒排索引</li></ul><blockquote><p>先分成根据关键词分成多个词条， 然后根据词条来搜索。</p></blockquote><h2 id="初始elasticsearch"><a href="#初始elasticsearch" class="headerlink" title="初始elasticsearch"></a>初始elasticsearch</h2><ol><li><p>文档</p><p>一个数据就是文档</p><blockquote><p>所有的文档数据都会被序列化转换为json格式，然后存储到elasticsearch中</p></blockquote></li><li><p>索引</p><p>相同类型文档的集合</p><p>比如会被分成 商品索引， 用户索引， 订单索引</p><ol><li>mapping： 索引中文档的字段约束信息， 类似于表的结构约束</li></ol></li></ol><h2 id="mysql-和-es的区别"><a href="#mysql-和-es的区别" class="headerlink" title="mysql 和 es的区别"></a>mysql 和 es的区别</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182116517.png" alt="image-20231118211632420"></p><h3 id="架构"><a href="#架构" class="headerlink" title="架构"></a>架构</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182121662.png" alt="image-20231118212138605"></p><h2 id="安装es"><a href="#安装es" class="headerlink" title="安装es"></a>安装es</h2><h3 id="单点部署"><a href="#单点部署" class="headerlink" title="单点部署"></a>单点部署</h3><h4 id="创建网络"><a href="#创建网络" class="headerlink" title="创建网络"></a>创建网络</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker network create es-net</span><br></pre></td></tr></table></figure><h4 id="拉取镜像"><a href="#拉取镜像" class="headerlink" title="拉取镜像"></a>拉取镜像</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull elastinsearch:7.12.1</span><br></pre></td></tr></table></figure><h4 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">docker run -d \</span><br><span class="line">  --name es \</span><br><span class="line">  -e <span class="string">&quot;ES_JAVA_OPTS=-Xms512m -Xmx512m&quot;</span> \</span><br><span class="line">  -e <span class="string">&quot;discovery.type=single-node&quot;</span> \</span><br><span class="line">  -v es-data:/usr/share/elasticsearch/data \</span><br><span class="line">  <span class="comment"># 如果未来需要拓展东西， 需要把拓展放入到这里</span></span><br><span class="line">  -v es-plugins:/usr/share/elasticsearch/plugins \</span><br><span class="line">  --privileged \</span><br><span class="line">  --network es-net \</span><br><span class="line">  <span class="comment"># 供给给用户访问</span></span><br><span class="line">  -p 9200:9200 \</span><br><span class="line">  <span class="comment"># 容器访问</span></span><br><span class="line">  -p 9300:9300 \</span><br><span class="line">elasticsearch:7.12.1</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h4><p>然后在浏览器里面打开ip地址加上9200 端口号 </p><p>就会获得类似于这样的json格式数据</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;36a24428b8c9&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docker-cluster&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;cluster_uuid&quot;</span><span class="punctuation">:</span> <span class="string">&quot;z2BSZzopTJ6l9An61d0TMw&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;version&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">        <span class="attr">&quot;number&quot;</span><span class="punctuation">:</span> <span class="string">&quot;7.12.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_flavor&quot;</span><span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_type&quot;</span><span class="punctuation">:</span> <span class="string">&quot;docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_hash&quot;</span><span class="punctuation">:</span> <span class="string">&quot;3186837139b9c6b6d23c3200870651f10d3343b7&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_date&quot;</span><span class="punctuation">:</span> <span class="string">&quot;2021-04-20T20:56:39.040728659Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;build_snapshot&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;lucene_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;8.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">        <span class="attr">&quot;minimum_index_compatibility_version&quot;</span><span class="punctuation">:</span> <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;tagline&quot;</span><span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><h2 id="安装kibana"><a href="#安装kibana" class="headerlink" title="安装kibana"></a>安装kibana</h2><ul><li>需要注意的是， 要和你的es 在同一个网络环境， 在同一个网络， 可以通过容器名称来互联</li></ul><blockquote><p>通过这个可以可视化es ，便于学习</p></blockquote><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 和上面es的统一版本</span></span><br><span class="line">docker pull kibana:7.12.1 </span><br></pre></td></tr></table></figure><h3 id="运行-1"><a href="#运行-1" class="headerlink" title="运行"></a>运行</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">docker run -d  \</span><br><span class="line">--name kibana \</span><br><span class="line">-e ELASTICSEARCH_HOSTS=http://es:9200 \</span><br><span class="line">--network=es-net \</span><br><span class="line">-p 5601:5601 \</span><br><span class="line">kibana:7.12.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 执行判断是否启动成功</span></span><br><span class="line">docker logs -f kibana</span><br></pre></td></tr></table></figure><h3 id="测试-1"><a href="#测试-1" class="headerlink" title="测试"></a>测试</h3><ul><li><p>输入   <strong>ip地址 + 端口号</strong></p></li><li><p>这样就算成功了</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182147172.png" alt="image-20231118214727119"></p><ul><li><strong>点击 右边那个</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182158869.png" alt="image-20231118215825785"></p><ul><li>点击 dev tool</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182200661.png" alt="image-20231118220022610"></p><ul><li><strong>点击搜索按钮之后</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182201350.png" alt="image-20231118220133311"></p><ul><li>输入</li></ul><p>​<code>GET / </code></p><ul><li>获得</li></ul><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;36a24428b8c9&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_name&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;docker-cluster&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;cluster_uuid&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;z2BSZzopTJ6l9An61d0TMw&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;version&quot;</span> <span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;number&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;7.12.1&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_flavor&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;default&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_type&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;docker&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_hash&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;3186837139b9c6b6d23c3200870651f10d3343b7&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_date&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;2021-04-20T20:56:39.040728659Z&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;build_snapshot&quot;</span> <span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;lucene_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;8.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_wire_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.8.0&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;minimum_index_compatibility_version&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;6.0.0-beta1&quot;</span></span><br><span class="line">  <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;tagline&quot;</span> <span class="punctuation">:</span> <span class="string">&quot;You Know, for Search&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="分词器"><a href="#分词器" class="headerlink" title="分词器"></a>分词器</h2><ul><li>问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182203049.png" alt="image-20231118220343015"></p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;standard&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><blockquote><p>如果你选择english&#x2F;standard 的时候，他会按照一个字符一个字符来分</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182206162.png" alt="image-20231118220615134"></p><ul><li>解决方法</li></ul><p>使用专门的中文分词器 - <strong>IK</strong></p><h3 id="在线安装"><a href="#在线安装" class="headerlink" title="在线安装"></a>在线安装</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 进入容器内部</span></span><br><span class="line">docker <span class="built_in">exec</span> -it es /bin/bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在线安装</span></span><br><span class="line"><span class="comment"># 没有魔法有点慢 ~~~</span></span><br><span class="line">./bin/elasticsearch-plugin install https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 镜像网站 不过好像有点问题</span></span><br><span class="line">./bin/elasticsearch-plugin install https://github.com.cnpmjs.org/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 退出</span></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 重启容器</span></span><br><span class="line">docker restart elasticsearch</span><br></pre></td></tr></table></figure><h3 id="离线安装"><a href="#离线安装" class="headerlink" title="离线安装"></a>离线安装</h3><ul><li><p>先<code>https://github.com/medcl/elasticsearch-analysis-ik/releases/download/v7.12.1/elasticsearch-analysis-ik-7.12.1.zip</code> 下载好安装包</p></li><li><p>查看数据卷的位置</p></li></ul><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker volume inspect es-plugins</span><br></pre></td></tr></table></figure><ul><li>解压好之后上传</li><li>打开ftp将文件 丢到对应的位置</li></ul><h4 id="测试-2"><a href="#测试-2" class="headerlink" title="测试"></a>测试</h4><p>打开刚刚的浏览器</p><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_smart&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 分词粒度会更细</span></span><br><span class="line">POST /_analyze</span><br><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">    <span class="attr">&quot;analyzer&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ik_max_word&quot;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="attr">&quot;text&quot;</span><span class="punctuation">:</span> <span class="string">&quot;黑马程序员学习java太棒了！&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure><p>这个时候分词的结果就是正常的</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311182226816.png" alt="image-20231118222629788"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> springcloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>redis实战篇</title>
      <link href="/2023/11/18/redis%E5%AE%9E%E6%88%98%E7%AF%87/"/>
      <url>/2023/11/18/redis%E5%AE%9E%E6%88%98%E7%AF%87/</url>
      
        <content type="html"><![CDATA[<h1 id=""><a href="#" class="headerlink" title=""></a></h1><h1 id="用户发送短信"><a href="#用户发送短信" class="headerlink" title="用户发送短信"></a>用户发送短信</h1><p><strong>。。。略</strong></p><h1 id="商户查询缓存"><a href="#商户查询缓存" class="headerlink" title="商户查询缓存"></a>商户查询缓存</h1><h2 id="缓存更新策略（自定义更新方案）"><a href="#缓存更新策略（自定义更新方案）" class="headerlink" title="缓存更新策略（自定义更新方案）"></a>缓存更新策略（自定义更新方案）</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311181830029.png" alt="image-20231118183020965"></p><p>一般来说， 我们选择 方案1就好了</p><ul><li><p>选择删除缓存 （懒标记）</p></li><li><p>如何保存缓存与数据库的操作</p><ul><li>单体</li><li>分布式， 使用TCC等分布式事务方案</li></ul></li><li><p>先删除缓存 ，在操作数据库 或者放过来 </p><p>两个任务在并发操作的时候， 都会有可能</p><p>但是后面那种方法，出现出现线程安全的概率较低</p></li></ul><h1 id="杂谈"><a href="#杂谈" class="headerlink" title="杂谈"></a>杂谈</h1><h2 id="设置过期时间"><a href="#设置过期时间" class="headerlink" title="设置过期时间"></a>设置过期时间</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">stringRedisTemplate.opsForValue().set(<span class="string">&quot;login:code&quot;</span>  + phone, code , <span class="number">2</span>, TimeUnit.MINUTES);</span><br></pre></td></tr></table></figure><h2 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h2><h3 id="copyproperties"><a href="#copyproperties" class="headerlink" title="copyproperties"></a>copyproperties</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//实体类的复制可以使用</span></span><br><span class="line">BeanUtils.copyproperties(source,target);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用这个class操作，可以更加的优雅</span></span><br><span class="line"><span class="type">UserDto</span> <span class="variable">userDto</span> <span class="operator">=</span> BeanUtils.copyProperties(user, UserDto.class);</span><br><span class="line"><span class="comment">// </span></span><br></pre></td></tr></table></figure><h3 id="builder-注释"><a href="#builder-注释" class="headerlink" title="builder 注释"></a>builder 注释</h3><p>在实体类上加上@Builder</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311181759987.jpg" alt="fdd50067852e5263bd070903adae05f"></p><h2 id="前端的一些小知识"><a href="#前端的一些小知识" class="headerlink" title="前端的一些小知识"></a>前端的一些小知识</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20231118171733312.png" alt="image-20231118171733312"></p><p>前端这里需要注意 在发送请求的时候，将所有的axios带入token请求</p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>操作系统</title>
      <link href="/2023/11/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/"/>
      <url>/2023/11/16/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/</url>
      
        <content type="html"><![CDATA[<h1 id="操作系统的基本概念"><a href="#操作系统的基本概念" class="headerlink" title="操作系统的基本概念"></a>操作系统的基本概念</h1><h2 id="操作系统的特征"><a href="#操作系统的特征" class="headerlink" title="操作系统的特征"></a>操作系统的特征</h2><ul><li><p>并发</p></li><li><p>共享</p><ul><li><p>并发和共享的关系</p><p>两个进程同时执行 ， （并发性）</p><p>需要共享的访问硬盘资源（共享性）</p></li></ul></li><li><p>虚拟</p></li></ul><p>​虚拟存储器 和空分复用技术</p><p>​空分复用技术</p><p>​时分复用技术</p><ul><li><p>异步</p><blockquote><p>在多道程序环境下， 允许多个程序并发执行， 但是由于资源的有限， 进程的执行不是一贯到底的， 而是走走停停</p></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 操作系统 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>微服务项目-黑马</title>
      <link href="/2023/11/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE-%E9%BB%91%E9%A9%AC/"/>
      <url>/2023/11/15/%E5%BE%AE%E6%9C%8D%E5%8A%A1%E9%A1%B9%E7%9B%AE-%E9%BB%91%E9%A9%AC/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
        <tags>
            
            <tag> elasticsearch </tag>
            
            <tag> springcloud </tag>
            
            <tag> redis </tag>
            
            <tag> minio </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springsecurity的学习</title>
      <link href="/2023/11/12/springsecurity%E7%9A%84%E5%AD%A6%E4%B9%A0/"/>
      <url>/2023/11/12/springsecurity%E7%9A%84%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="入门"><a href="#入门" class="headerlink" title="入门"></a>入门</h1><h2 id="版本需求"><a href="#版本需求" class="headerlink" title="版本需求"></a>版本需求</h2><blockquote><p><strong>jdk 1.8</strong>   <strong>springboot</strong> <strong>2.5.0 ~ 2.7.x</strong>（不能超过2.7.x）</p><p>当然这里下面的一些配置是会受到上面版本的影响， 具体的改动需要后续查找</p></blockquote><h2 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h2><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-security<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h2><ul><li>首先随便写一个controller</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.learn.springsecurity.controller;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RequestMapping;</span><br><span class="line"><span class="keyword">import</span> org.springframework.web.bind.annotation.RestController;</span><br><span class="line"></span><br><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">HelloController</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@RequestMapping(&quot;/hello&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>然后启动服务， 发现你要访问这个地方会被拦截</li></ul><h1 id="认证"><a href="#认证" class="headerlink" title="认证"></a>认证</h1><blockquote><p>认证的基本流程</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122045074.png" alt="在这里插入图片描述"></p><h2 id="三个重要的过滤器"><a href="#三个重要的过滤器" class="headerlink" title="三个重要的过滤器"></a>三个重要的过滤器</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122046621.png" alt="在这里插入图片描述"></p><ul><li><p>UsernamePasswordAuthenticationFilter:负责处理我们在登陆页面填写了用户名密码后的登陆请求。入门案例的认证工作主要有它负责。</p></li><li><p>ExceptionTranslationFilter： 处理过滤器链中抛出的任何AccessDeniedException和AuthenticationException 。</p></li><li><p>FilterSecurityInterceptor： 负责权限校验的过滤器。</p></li><li><p>其他的过滤链条执行的顺序为如下（这里只是引入了springsecurity的依赖包之后的过滤链）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311142300110.png" alt="在这里插入图片描述"></p></li></ul><h2 id="认证流程"><a href="#认证流程" class="headerlink" title="认证流程"></a>认证流程</h2><ul><li><p>认证图</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311142301878.png" alt="在这里插入图片描述"></p></li><li><p>概念</p><blockquote><p>Authentication接口: 它的实现类，表示当前访问系统的用户，封装了用户相关信息。</p><p>AuthenticationManager接口：定义了认证Authentication的方法</p><p>UserDetailsService接口：加载用户特定数据的核心接口。里面定义了一个根据用户名查询用户信息的方法。</p><p>UserDetails接口：提供核心用户信息。通过UserDetailsService根据用户名获取处理的用户信息要封装成UserDetails对象返回。然后将这些信息封装到Authentication对象中。</p></blockquote></li><li><p>再对 securityConfig 的时候， 我门可以这么操作， 使得 <strong>jwtAuthenticationTokenFilter</strong> <strong>UsernamePasswordAuthenticationFilter</strong>的前面 </p><p><code> http.addFilterBefore(jwtAuthenticationTokenFilter , UsernamePasswordAuthenticationFilter.class);</code></p></li><li><pre><code>// 实现对密码的加密@Beanpublic PasswordEncoder passwordEncoder()&#123;    return new BCryptPasswordEncoder();&#125;// 对BCryptPasswordEncoder加密的小测试@Autowiredprivate UserMapper userMapper;@Testpublic void TestBCryptPasswordEncoder() &#123;BCryptPasswordEncoder bCryptPasswordEncoder = new BCryptPasswordEncoder();boolean matches = bCryptPasswordEncoder.matches(&quot;1234&quot;, &quot;$2a$10$z8ZrqoQ38.N.flqHDjT7vuULL1XrKCiNX2pr0wkVa9.TpaJ3x..Py&quot;);System.out.println(matches);&#125;<figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">​</span><br><span class="line"></span><br><span class="line">* 后面的发送的请求， 需要携带 token参数来访问信息。 当你携带又token的时候就会进入到这里的认证流程。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">* 认证失败的处理</span><br><span class="line"></span><br><span class="line">![image-20231115150254803](https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311151502932.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">注解 hasAnyAuthority 可以传入多个字符串 （hasAuthority 只能传入一个字符串）。 还有hasRole 等等可以点击权限里面就会看到了</span><br><span class="line"></span><br><span class="line">![image-20231115154701058](https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311151547118.png)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 自定义权限校验方法</span><br><span class="line"></span><br><span class="line">```java</span><br><span class="line">package com.example.learn.expression;</span><br><span class="line"></span><br><span class="line">import com.example.learn.entity.LoginUser;</span><br><span class="line">import org.springframework.security.core.Authentication;</span><br><span class="line">import org.springframework.security.core.context.SecurityContextHolder;</span><br><span class="line">import org.springframework.stereotype.Component;</span><br><span class="line"></span><br><span class="line">import java.util.List;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author 吴嘉豪</span><br><span class="line"> * @date 2023/11/15 16:01</span><br><span class="line"> */</span><br><span class="line">@Component(&quot;ex&quot;)</span><br><span class="line"></span><br><span class="line">public class SGExpressionRoot &#123;</span><br><span class="line">    public boolean hasAuthority(String authority)&#123;</span><br><span class="line">        // 获取当前用户的权限</span><br><span class="line">        Authentication authentication = SecurityContextHolder.getContext().getAuthentication();</span><br><span class="line">        LoginUser  loginUser = (LoginUser) authentication.getPrincipal();</span><br><span class="line">        List&lt;String&gt; permissions = loginUser.getPermissions();</span><br><span class="line"></span><br><span class="line">        // 判断用户权限集合中是否存在authority</span><br><span class="line">        return permissions.contains(authority);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></code></pre></li><li><p>修改注解代码</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">@PreAuthorize(&quot;@ex.hasAuthority(&#x27;system:dept:list&#x27;)&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">hello</span><span class="params">()</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="基于配置的校验方式"><a href="#基于配置的校验方式" class="headerlink" title="基于配置的校验方式"></a>基于配置的校验方式</h3><ul><li>我们可以再之前的配置类中 定义这个</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">.antMatchers(<span class="string">&quot;/testCors&quot;</span>).hasAuthority(<span class="string">&quot;system:dept:list&quot;</span>)</span><br></pre></td></tr></table></figure><h2 id="CSRF"><a href="#CSRF" class="headerlink" title="CSRF"></a>CSRF</h2><ul><li>什么叫做csrf 攻击</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311151615280.png" alt="image-20231115161555105"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311151615479.png" alt="image-20231115161544412"></p><h2 id="不建议的方案"><a href="#不建议的方案" class="headerlink" title="不建议的方案"></a>不建议的方案</h2><h3 id="登录成功处理器"><a href="#登录成功处理器" class="headerlink" title="登录成功处理器"></a>登录成功处理器</h3><h3 id="登出成功处理器"><a href="#登出成功处理器" class="headerlink" title="登出成功处理器"></a>登出成功处理器</h3><h2 id="补充"><a href="#补充" class="headerlink" title="补充"></a>补充</h2><h3 id="密码加密"><a href="#密码加密" class="headerlink" title="密码加密"></a>密码加密</h3><p>参看下面博客</p><p>[<a href="https://zhuanlan.zhihu.com/p/188753842">SpringSecurity]PasswordEncoder密码解析器详解 - 知乎 (zhihu.com)</a></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> java </tag>
            
            <tag> springsecurity </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>knife4j的配置</title>
      <link href="/2023/11/12/knife4j%E7%9A%84%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/11/12/knife4j%E7%9A%84%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="knife4j-配置"><a href="#knife4j-配置" class="headerlink" title="knife4j 配置"></a>knife4j 配置</h1><h2 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h2><ul><li>springboot2</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi2-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.1.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>springboot3</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.github.xiaoymin<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>knife4j-openapi3-jakarta-spring-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>4.3.0<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li>springboot2</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">openapi:</span></span><br><span class="line">    <span class="attr">title:</span> <span class="string">黑马商城接口文档</span></span><br><span class="line">    <span class="attr">description:</span> <span class="string">&quot;黑马商城接口文档&quot;</span></span><br><span class="line">    <span class="attr">email:</span> <span class="string">zhanghuyi@itcast.cn</span></span><br><span class="line">    <span class="attr">concat:</span> <span class="string">虎哥</span></span><br><span class="line">    <span class="attr">url:</span> <span class="string">https://www.itcast.cn</span></span><br><span class="line">    <span class="attr">version:</span> <span class="string">v1.0.0</span></span><br><span class="line">    <span class="attr">group:</span></span><br><span class="line">      <span class="attr">default:</span></span><br><span class="line">        <span class="attr">group-name:</span> <span class="string">default</span></span><br><span class="line">        <span class="attr">api-rule:</span> <span class="string">package</span></span><br><span class="line">        <span class="attr">api-rule-resources:</span></span><br><span class="line">          <span class="bullet">-</span> <span class="string">com.genshin.ojuser.controller</span></span><br></pre></td></tr></table></figure><ul><li>springboot3</li></ul><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/swagger-ui.html</span></span><br><span class="line">    <span class="attr">tags-sorter:</span> <span class="string">alpha</span></span><br><span class="line">    <span class="attr">operations-sorter:</span> <span class="string">alpha</span></span><br><span class="line">  <span class="attr">api-docs:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/v3/api-docs</span></span><br><span class="line">  <span class="attr">group-configs:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="attr">group:</span> <span class="string">&#x27;default&#x27;</span></span><br><span class="line">      <span class="attr">paths-to-match:</span> <span class="string">&#x27;/**&#x27;</span></span><br><span class="line">      <span class="attr">packages-to-scan:</span> <span class="string">com.homework.genshinchat</span></span><br><span class="line"><span class="comment"># knife4j的增强配置，不需要增强可以不配</span></span><br><span class="line"><span class="attr">knife4j:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">setting:</span></span><br><span class="line">    <span class="attr">language:</span> <span class="string">zh_cn</span></span><br></pre></td></tr></table></figure><h2 id="语法规则"><a href="#语法规则" class="headerlink" title="语法规则"></a>语法规则</h2><blockquote><p>这个可以到网上找。</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
            <tag> knife4j </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>父子工程的maven打包注意事项</title>
      <link href="/2023/11/12/%E7%88%B6%E5%AD%90%E5%B7%A5%E7%A8%8B%E7%9A%84maven%E6%89%93%E5%8C%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/"/>
      <url>/2023/11/12/%E7%88%B6%E5%AD%90%E5%B7%A5%E7%A8%8B%E7%9A%84maven%E6%89%93%E5%8C%85%E6%B3%A8%E6%84%8F%E4%BA%8B%E9%A1%B9/</url>
      
        <content type="html"><![CDATA[<blockquote><p>这是我边学边写的maven笔记， 所以可能会存在问题</p></blockquote><h1 id="父工程的pom定义"><a href="#父工程的pom定义" class="headerlink" title="父工程的pom定义"></a>父工程的pom定义</h1><h2 id="properties-标签"><a href="#properties-标签" class="headerlink" title="properties 标签"></a>properties 标签</h2><blockquote><p> 这个标签是用来统一管理 jar包的版本， 使用这种方式相当于给版本号声明了一个变量</p></blockquote><p>具体为</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 这里的xxx代表你给版本取得名字 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">xxxx</span>&gt;</span> 8.0.23 <span class="tag">&lt;/<span class="name">xxxx</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实战 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">properties</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">java.version</span>&gt;</span>11<span class="tag">&lt;/<span class="name">java.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.build.sourceEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.build.sourceEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">project.reporting.outputEncoding</span>&gt;</span>UTF-8<span class="tag">&lt;/<span class="name">project.reporting.outputEncoding</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">org.projectlombok.version</span>&gt;</span>1.18.20<span class="tag">&lt;/<span class="name">org.projectlombok.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud.version</span>&gt;</span>2021.0.3<span class="tag">&lt;/<span class="name">spring-cloud.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">spring-cloud-alibaba.version</span>&gt;</span>2021.0.4.0<span class="tag">&lt;/<span class="name">spring-cloud-alibaba.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mybatis-plus.version</span>&gt;</span>3.4.3<span class="tag">&lt;/<span class="name">mybatis-plus.version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">hutool.version</span>&gt;</span>5.8.11<span class="tag">&lt;/<span class="name">hutool.version</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--使用8.0.x 依旧可以用5.7的数据库访问--&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">mysql.version</span>&gt;</span>8.0.23<span class="tag">&lt;/<span class="name">mysql.version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">properties</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>然后再下面的依赖包， 就可以通过</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span><span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span><span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!-- 这里的xxxx代表的就是上面的版本 --&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;xxxx&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span> </span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 实战 --&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>$&#123;spring-cloud.version&#125;<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="modules-标签"><a href="#modules-标签" class="headerlink" title="modules 标签"></a>modules 标签</h2><blockquote><p>代表需要被放入的子标签</p></blockquote><p>这里 <strong>oj-user</strong> 代表的是ArtifactId</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">modules</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">module</span>&gt;</span>oj-user<span class="tag">&lt;/<span class="name">module</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">modules</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="packing-标签"><a href="#packing-标签" class="headerlink" title="packing 标签"></a>packing 标签</h2><blockquote><p>在父级项目中的pom.xml文件使用的packaging配置一定为pom</p><p>如果没有特别指定这个标签的话， 那么默认就是jar 包， 所以这个标签一定要写上去</p><p>当然还有war 之类， 但是我这里就讨论上面两种就好了</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">packaging</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">packaging</span>&gt;</span></span><br></pre></td></tr></table></figure><h2 id="dependencyManagement-标签"><a href="#dependencyManagement-标签" class="headerlink" title="dependencyManagement 标签"></a>dependencyManagement 标签</h2><blockquote><p>使用dependencyManagement可以统一管理项目的版本号，确保应用的各个项目的依赖和版本一致, 这样子模块和父模块就可以用到相同的版本了</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 具体样式如下 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="子工程的pom定义"><a href="#子工程的pom定义" class="headerlink" title="子工程的pom定义"></a>子工程的pom定义</h1><h2 id="parent-标签"><a href="#parent-标签" class="headerlink" title="parent 标签"></a>parent 标签</h2><blockquote><p>再项目创建之前， 默认的parent标签是springboot的， 但是我们是父子工程需要交换</p></blockquote><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--这是原本的--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.7.17<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="comment">&lt;!--直接把上面的删掉，需要将parent修改为父模块--&gt;</span></span><br><span class="line"><span class="comment">&lt;!-- 这里的groupId和artifactId，version 换成父模块的就好了 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>xxx<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> jar包 </tag>
            
            <tag> maven </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Swagger学习记录</title>
      <link href="/2023/11/11/Swagger%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/"/>
      <url>/2023/11/11/Swagger%E5%AD%A6%E4%B9%A0%E8%AE%B0%E5%BD%95/</url>
      
        <content type="html"><![CDATA[<blockquote><p>本文部分内容是从这里获得</p><p><a href="https://blog.csdn.net/qq_43521797/article/details/115835771">Swagger3.0介绍及springboot整合Swagger3.0_swagger 3.0-CSDN博客</a></p></blockquote><h1 id="前提"><a href="#前提" class="headerlink" title="前提"></a>前提</h1><h2 id="Springboot3-变化"><a href="#Springboot3-变化" class="headerlink" title="Springboot3 变化"></a>Springboot3 变化</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311111635850.png" alt="img"></p><h1 id="查看api的地址"><a href="#查看api的地址" class="headerlink" title="查看api的地址"></a>查看api的地址</h1><ul><li>springboot3</li></ul><p><code>http://localhost:8080/swagger-ui/index.html</code></p><ul><li>springboot2</li></ul><p><code>http://localhost:8080/swagger-ui.html</code></p><h1 id="依赖导入"><a href="#依赖导入" class="headerlink" title="依赖导入"></a>依赖导入</h1><blockquote><p>这个需要根据根据你的springboot 版本来决定版本的 </p></blockquote><ul><li>如果你是 springboot3</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">     <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springdoc<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springdoc-openapi-starter-webmvc-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.0.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">exclusions</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">exclusion</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>slf4j-api<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">            <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.slf4j<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;/<span class="name">exclusion</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">exclusions</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><ul><li>如果你是springboot2</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">&lt;!--swagger--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger2<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--swagger ui--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>io.springfox<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>springfox-swagger-ui<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>2.9.2<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="application-yaml"><a href="#application-yaml" class="headerlink" title="application.yaml"></a>application.yaml</h1><p>只有springboot3 需要这一步</p><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="attr">springdoc:</span></span><br><span class="line">  <span class="attr">swagger-ui:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">/swagger-ui.html</span></span><br><span class="line"><span class="attr">logging:</span></span><br><span class="line">  <span class="attr">level:</span></span><br><span class="line">    <span class="attr">com.hexadecimal:</span> <span class="string">debug</span></span><br></pre></td></tr></table></figure><h1 id="Config"><a href="#Config" class="headerlink" title="Config"></a>Config</h1><ul><li>springboot2</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="meta">@EnableSwagger2</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> <span class="keyword">implements</span> <span class="title class_">WebMvcConfigurer</span>&#123;</span><br><span class="line"></span><br><span class="line">        <span class="meta">@Bean</span></span><br><span class="line">        <span class="keyword">public</span> Docket <span class="title function_">docket</span><span class="params">(Environment environment)</span> &#123;</span><br><span class="line">            <span class="type">Profiles</span> <span class="variable">profiles</span> <span class="operator">=</span> Profiles.of(<span class="string">&quot;pro&quot;</span>);</span><br><span class="line">            <span class="type">boolean</span> <span class="variable">flag</span> <span class="operator">=</span> environment.acceptsProfiles(profiles);</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Docket</span>(DocumentationType.SWAGGER_2)</span><br><span class="line">                    .apiInfo(apiInfo())</span><br><span class="line">                    .enable(!flag)</span><br><span class="line">                    .select()</span><br><span class="line">                <span class="comment">//这里需要修改名称 </span></span><br><span class="line">                    .apis(RequestHandlerSelectors.basePackage(<span class="string">&quot;com.history.controller&quot;</span>))</span><br><span class="line">                    .paths(PathSelectors.any())</span><br><span class="line">                    .build();</span><br><span class="line"></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="keyword">private</span> ApiInfo <span class="title function_">apiInfo</span><span class="params">()</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">ApiInfoBuilder</span>()</span><br><span class="line">              <span class="comment">//这里时你的标题</span></span><br><span class="line">                    .title(<span class="string">&quot;阁中汗青小程序&quot;</span>)</span><br><span class="line">                    .description(<span class="string">&quot;接口说明&quot;</span>)</span><br><span class="line">                    .version(<span class="string">&quot;1.0.0&quot;</span>)</span><br><span class="line">                    <span class="comment">// 作者信息</span></span><br><span class="line">                    .contact(<span class="keyword">new</span> <span class="title class_">Contact</span>(<span class="string">&quot;宇神&quot;</span>, <span class="string">&quot;&quot;</span>, <span class="string">&quot;&quot;</span>))</span><br><span class="line">                    .build();</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>springboot3</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.ExternalDocumentation;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.OpenAPI;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.Info;</span><br><span class="line"><span class="keyword">import</span> io.swagger.v3.oas.models.info.License;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Bean;</span><br><span class="line"><span class="keyword">import</span> org.springframework.context.annotation.Configuration;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Configuration</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">SwaggerConfig</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Bean</span></span><br><span class="line">    <span class="keyword">public</span> OpenAPI <span class="title function_">springShopOpenAPI</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">OpenAPI</span>()</span><br><span class="line">                .info(<span class="keyword">new</span> <span class="title class_">Info</span>().title(<span class="string">&quot;标题&quot;</span>)</span><br><span class="line">                        .description(<span class="string">&quot;我的API文档&quot;</span>)</span><br><span class="line">                        .version(<span class="string">&quot;v1&quot;</span>)</span><br><span class="line">                        .license(<span class="keyword">new</span> <span class="title class_">License</span>().name(<span class="string">&quot;Apache 2.0&quot;</span>).url(<span class="string">&quot;http://springdoc.org&quot;</span>)))</span><br><span class="line">                .externalDocs(<span class="keyword">new</span> <span class="title class_">ExternalDocumentation</span>()</span><br><span class="line">                        .description(<span class="string">&quot;外部文档&quot;</span>)</span><br><span class="line">                        .url(<span class="string">&quot;https://springshop.wiki.github.org/docs&quot;</span>));</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>剩下这些可以自行去网上搜索， 不同版本的语法不同</p></blockquote><h1 id="Controller"><a href="#Controller" class="headerlink" title="Controller"></a>Controller</h1><blockquote><p>这里的控制类 @Api ，tags 为类型</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@Api(tags = &quot;文章模块&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ArticleController</span>&#123;&#125;</span><br></pre></td></tr></table></figure><h1 id="Entity"><a href="#Entity" class="headerlink" title="Entity"></a>Entity</h1><blockquote><p>这类似乎不用写</p></blockquote><h1 id="Dto"><a href="#Dto" class="headerlink" title="Dto"></a>Dto</h1><blockquote><p>模块类</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@ApiModel(description = &quot;前端传过来的创作实体类&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LiteraryDto</span> &#123;&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> swagger </tag>
            
            <tag> 学习记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>idea打jar包失败</title>
      <link href="/2023/11/11/idea%E6%89%93jar%E5%8C%85%E5%A4%B1%E8%B4%A5/"/>
      <url>/2023/11/11/idea%E6%89%93jar%E5%8C%85%E5%A4%B1%E8%B4%A5/</url>
      
        <content type="html"><![CDATA[<h1 id="问题汇总"><a href="#问题汇总" class="headerlink" title="问题汇总"></a>问题汇总</h1><h2 id="META—INF-以及-找不到主类"><a href="#META—INF-以及-找不到主类" class="headerlink" title="META—INF 以及 找不到主类"></a>META—INF 以及 找不到主类</h2><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><blockquote><p>如果你打开META-INF 发现你主类就是对的，或者你发现的你的 jar包打出异常的小</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311110012758.png" alt="image-20231111001245714"></p><p>说实话我一个springboot 项目各种依赖加起来绝对不止那么小</p><p>你可以新建立一个springboot 项目（没错新建立一个） ，然后打jar ，如果出现了上面的问题 。 可以继续往下看了</p><p>那么推测 是你的<strong>springboot 版本太低</strong>了 。 如何修改你的springboot 版本。</p><h3 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h3><p>新建立一个项目 ， 然后把 点击打红圈 哪里的一个设置按钮</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311110014789.png" alt="image-20231111001427737"></p><p><strong>修改为</strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https://start.spring.io</span><br></pre></td></tr></table></figure><ul><li><p>然后重新建立一个项目， 把你原本项目迁移过去就好了</p></li><li><p>如果你在升级springboot3 时遇到了 一些依赖问题 参考我<a href="https://www.alanyaeer.fun/2023/11/10/jakarta-websocket-DeploymentException%E6%8A%A5%E9%94%99/">项目升级遇到的各种bug</a></p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> jar包 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>springboot2项目迁移到springboot3出现的各种问题</title>
      <link href="/2023/11/10/jakarta-websocket-DeploymentException%E6%8A%A5%E9%94%99/"/>
      <url>/2023/11/10/jakarta-websocket-DeploymentException%E6%8A%A5%E9%94%99/</url>
      
        <content type="html"><![CDATA[<h1 id="项目升级记录"><a href="#项目升级记录" class="headerlink" title="项目升级记录"></a>项目升级记录</h1><h2 id="Websocket"><a href="#Websocket" class="headerlink" title="Websocket"></a>Websocket</h2><h3 id="错误原因"><a href="#错误原因" class="headerlink" title="错误原因"></a>错误原因</h3><blockquote><p>在我升级项目为 springboot3 之后， 就出现了 : <code>org.springframework.web.socket.server.standard.ServerEndpointExporter: Factory method \&#39;serverEndpointExporter\&#39; threw exception with message: jakarta/websocket/DeploymentException</code></p></blockquote><ul><li>奇怪的是我之前在springboot2 是没有这个问题的🤕</li></ul><p>所以我就猜测是不是跟websocket 有关的 依赖是不是版本太低了 </p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><blockquote><p> 将所有 WebsocketServer（反正就是websocket 业务的地方） 中 导入包为 javax.xxx 都修改为 jakarta.xxx。这是因为 springboot3 的升级, 对了， 其实 所有的javax.servlet 也要换成jakarta.servlet（可以注意看看你controller层有没有遇到这个问题）</p></blockquote><h4 id="引入依赖"><a href="#引入依赖" class="headerlink" title="引入依赖"></a>引入依赖</h4><ul><li>首先引入正确的依赖 jar 包</li></ul><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.apache.tomcat.embed<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>tomcat-embed-websocket<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>10.1.15<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="修改导入的包名称"><a href="#修改导入的包名称" class="headerlink" title="修改导入的包名称"></a>修改导入的包名称</h4><p>将 javax注释了</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311102352024.png" alt="image-20231110235233478"></p><p>换成下面三位兄弟</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311102353763.png" alt="image-20231110235315740"></p><p>然后就可以正常运行了</p><h2 id="Mybatisplus"><a href="#Mybatisplus" class="headerlink" title="Mybatisplus"></a>Mybatisplus</h2><h3 id="错误原因-1"><a href="#错误原因-1" class="headerlink" title="错误原因"></a>错误原因</h3><blockquote><p> java.lang.IllegalArgumentException: Property ‘sqlSessionFactory’ or ‘sqlSessionTemplate’ are required  </p><p> Error creating bean with name ‘commonController’: Unsatisfied dependency expressed through field ‘messageService’: Error creating bean with name ‘messageServiceImpl’: Unsatisfied dependency expressed through field ‘baseMapper’: Error creating bean with name ‘messageMapper’ defined in file </p></blockquote><p>大概就是这些问题 但是之前是没有的 。 尝试了 网上 给 启动类加上 MapperScanner也无济于事， 实际上就是版本问题</p><h3 id="解决方案-1"><a href="#解决方案-1" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="引入依赖-1"><a href="#引入依赖-1" class="headerlink" title="引入依赖"></a>引入依赖</h4><p>这是我原本的依赖</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.4.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>把这个 version 版本换成 <strong>3.5.3.1</strong></p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>com.baomidou<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>mybatis-plus-boot-starter<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>3.5.3.1<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><p>运行发现 解决问题</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker的配置</title>
      <link href="/2023/11/08/docker%E7%9A%84%E5%90%84%E7%A7%8D%E9%85%8D%E7%BD%AE/"/>
      <url>/2023/11/08/docker%E7%9A%84%E5%90%84%E7%A7%8D%E9%85%8D%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<h1 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">docker pull nginx</span><br><span class="line"></span><br><span class="line">docker run --name nginx -p 80:80 -d nginx</span><br><span class="line"></span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/nginx/conf.d</span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/nginx/html</span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/nginx/logs</span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/nginx/conf</span><br><span class="line"></span><br><span class="line">// 这里文件可以直接原名， 但是 文件夹必须是上一级目录 </span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/nginx.conf /docker/nginx/conf/nginx.conf</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/etc/nginx/conf.d /docker/nginx</span><br><span class="line">docker <span class="built_in">cp</span> nginx:/usr/share/nginx/html /docker/nginx</span><br><span class="line"></span><br><span class="line">docker stop nginx</span><br><span class="line">docker <span class="built_in">rm</span> nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">// 需要注意这里的docker 和 宿主机 是相互对应的 </span><br><span class="line"></span><br><span class="line">docker run  -p 80:80 --name nginx --restart=always -v /docker/nginx/conf/nginx.conf:/etc/nginx/nginx.conf  -v /docker/nginx/conf.d:/etc/nginx/conf.d  -v /docker/nginx/html:/usr/share/nginx/html  -v /docker/nginx/logs:/var/log/nginx  -d  nginx</span><br><span class="line"></span><br><span class="line">要修改配置文件 /docker/conf.d/conf.d/default.conf</span><br><span class="line">如果vue 使用了 <span class="built_in">history</span>模式， 那么需要在location/ 写入下面这句话</span><br><span class="line">try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /index.html;</span><br></pre></td></tr></table></figure><blockquote><p>最后将你自己的index.html放入到 &#x2F;docker&#x2F;nginx下面，然后输入你的ip地址就可以看到了</p></blockquote><h1 id="tomcat"><a href="#tomcat" class="headerlink" title="tomcat"></a>tomcat</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 8080:8080 --name tomcat -d tomcat:9.0</span><br><span class="line"></span><br><span class="line"><span class="comment"># 进入到tomcat里面</span></span><br><span class="line">docker <span class="built_in">exec</span> -it tomcat bash</span><br><span class="line"></span><br><span class="line"><span class="comment"># 不知道为什么docker 里面的 html文件是再webapps.dist下面的。</span></span><br><span class="line"><span class="built_in">rm</span> -rf webapps</span><br><span class="line"></span><br><span class="line"><span class="built_in">mv</span> webapps.dist webapps</span><br><span class="line"></span><br><span class="line"><span class="built_in">exit</span></span><br><span class="line"><span class="comment"># 这是我的个人建立的习惯， 你也可以另外建立其他文件夹</span></span><br><span class="line"><span class="built_in">mkdir</span> -p /docker/tomcat/webapps/ROOT</span><br><span class="line"></span><br><span class="line">docker <span class="built_in">cp</span> tomcat:/usr/local/tomcat/webapps/ROOT /docker/tomcat/webapps</span><br><span class="line"></span><br><span class="line"><span class="comment">#成功之后</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">cd</span> /docker/tomcat/webapps</span><br><span class="line">tree </span><br><span class="line"><span class="comment"># 看一下是否复制过来</span></span><br><span class="line"></span><br><span class="line">docker stop tomcat</span><br><span class="line">docker <span class="built_in">rm</span> tomcat</span><br><span class="line"></span><br><span class="line">docker run -p 5173:5173 --name tomcat  -v /docker/tomcat/webapps:/usr/local/tomcat/webapps/ROOT -d tomcat</span><br></pre></td></tr></table></figure><h1 id="redis"><a href="#redis" class="headerlink" title="redis"></a>redis</h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">sudo <span class="built_in">mkdir</span> /docker/redis</span><br><span class="line">sudo <span class="built_in">mkdir</span> /docker/redis/data</span><br><span class="line"></span><br><span class="line"><span class="comment">#修改配置文件</span></span><br><span class="line"><span class="built_in">bind</span> 127.0.0.1 <span class="comment">#注释掉这部分，使redis可以外部访问</span></span><br><span class="line">daemonize no<span class="comment">#这里为什么不用yes， 因为守护进程的话，等一下 docker ps 看不到 redis是否运行</span></span><br><span class="line">requirepass 你的密码<span class="comment">#给redis设置密码</span></span><br><span class="line">appendonly <span class="built_in">yes</span><span class="comment">#redis持久化　　默认是no</span></span><br><span class="line">tcp-keepalive 300 <span class="comment">#防止出现远程主机强迫关闭了一个现有的连接的错误 默认是300</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#还有执行这个命令</span></span><br><span class="line"><span class="comment">#在这里</span></span><br><span class="line">/etc/sysctl.conf</span><br><span class="line">vm.overcommit_memory = 1</span><br><span class="line"></span><br><span class="line">docker run --restart=always \</span><br><span class="line">-p 6379:6379 \</span><br><span class="line">--name redis \</span><br><span class="line">-v /docker/redis/redis.conf:/etc/redis/redis.conf \</span><br><span class="line">-v /docker/redis/data:/data \</span><br><span class="line">-d redis:7.0.12 redis-server /etc/redis/redis.conf</span><br><span class="line"> <span class="comment">#遇到这个问题 Fatal error loading the DB: Invalid argument. Exiting</span></span><br><span class="line"> find / -name dump.rdb</span><br><span class="line">  <span class="comment">#到对应的位置</span></span><br><span class="line"> <span class="built_in">cd</span> </span><br><span class="line"></span><br><span class="line"> <span class="built_in">rm</span> -rf dump.rdb</span><br><span class="line"><span class="comment">#然后</span></span><br><span class="line">docker restart redis、</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> docker </tag>
            
            <tag> nginx </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux-ftp设置</title>
      <link href="/2023/11/07/linux-ftp%E8%AE%BE%E7%BD%AE/"/>
      <url>/2023/11/07/linux-ftp%E8%AE%BE%E7%BD%AE/</url>
      
        <content type="html"><![CDATA[<blockquote><p>在阅读文本之前，请确保已经配置过 <a href="https://cloud.tencent.com/document/product/213/10912">云服务器 Linux 云服务器搭建 FTP 服务-最佳实践-文档中心-腾讯云 (tencent.com)</a> 这些</p></blockquote><h1 id="root-用户登录ftp"><a href="#root-用户登录ftp" class="headerlink" title="root 用户登录ftp"></a>root 用户登录ftp</h1><blockquote><p>在操作完腾讯云给出的ftp服务教程之后，我想着可不可以直接用root 用户登录， 结果发现出现了这个问题</p></blockquote><blockquote><p>530 Please login with USER and PASS. Error EElFTPSUnacceptedReplyError: Unaccepted server reply code 530 to command PWD</p></blockquote><ul><li>大概是因为root用户不被允许使用ftp</li></ul><h2 id="修改教程"><a href="#修改教程" class="headerlink" title="修改教程"></a>修改教程</h2><h3 id="修改vsftpd的配置文件"><a href="#修改vsftpd的配置文件" class="headerlink" title="修改vsftpd的配置文件"></a>修改vsftpd的配置文件</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">1. 输入下面的指令打开配置文件</span><br><span class="line">vim /etc/vsftpd/vsftpd.conf</span><br><span class="line">2. 找到 local_root 将他修改为</span><br><span class="line">local_root=/</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311072213299.png" alt="image-20231107221353196"></p><h3 id="修改vsftpd的默认禁止文件"><a href="#修改vsftpd的默认禁止文件" class="headerlink" title="修改vsftpd的默认禁止文件"></a>修改vsftpd的默认禁止文件</h3><p>试一下，下面两个指令</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/selinux/config</span><br><span class="line">vim /etc/syscofnig/selinux</span><br></pre></td></tr></table></figure><p>笔者这里是第一个指令</p><p>然后打开这个页面</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311072216296.png" alt="image-20231107221616260"></p><p>将这里的SELINUX改成 disabled</p><p>保存退出</p><h3 id="修改设置文件脚本"><a href="#修改设置文件脚本" class="headerlink" title="修改设置文件脚本"></a>修改设置文件脚本</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/vsftpd/user_list</span><br><span class="line">vim /etc/vsftpd/user_list</span><br></pre></td></tr></table></figure><p>把这个两个文件的的root 都<strong>注释一下</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311072218565.png" alt="image-20231107221853537"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311072223219.png"></p><p>然后输入 <code>sudo systemctl restart vsftpd</code> 就好了</p><p>如果不行直接<code>reboot</code> 重启</p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> linux </tag>
            
            <tag> 疑难解惑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux</title>
      <link href="/2023/11/06/linux/"/>
      <url>/2023/11/06/linux/</url>
      
        <content type="html"><![CDATA[<h1 id="如何用共享文件"><a href="#如何用共享文件" class="headerlink" title="如何用共享文件"></a>如何用共享文件</h1><h2 id="x"><a href="#x" class="headerlink" title="x"></a>x<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816706.png" alt="image-20230516172648393"></h2><p>点击虚拟机， 然后选择点击设置， 选项共享文件夹找到<code>D:\myshare</code>,然后就可以了</p><ul><li>在虚拟机中<code>cd /mnt/hgfs/share</code></li><li>注意如果你没有开启共享文件功能，那么你在虚拟机中找不到这个hgfs文件</li></ul><h2 id="shell-突然连接上不上虚拟机的问题和解决方法"><a href="#shell-突然连接上不上虚拟机的问题和解决方法" class="headerlink" title="shell 突然连接上不上虚拟机的问题和解决方法"></a>shell 突然连接上不上虚拟机的问题和解决方法</h2><ol><li>重启ssh服务</li></ol><p><code>systemctl restart sshd</code></p><ol start="2"><li>查看你当前虚拟机的ip地址</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034963.png" alt="image-20230513110728202"></p><p>昨天inet这里的ip地址是 <code>192.168.202.134</code>  现在变成了<code>192.168.202.135</code>,所以需要更换xshell中的服务连接</p><ol start="3"><li>断开<strong>NAT模式</strong>连接(还未尝试,但是说不定有用)</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034154.png" alt="image-20230513110944014"></p><p>右下第三个图标,右击</p><h1 id="vim-的学习"><a href="#vim-的学习" class="headerlink" title="vim 的学习"></a>vim 的学习</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816725.png" alt="image-20230329131040899"></p><p>a 代表append</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034278.png" alt="image-20230329131442903"></p><p>记住esc 就可以退回到 normal状态</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034770.png" alt="image-20230329131638704"></p><p>普通模式变到 visual 模式摁下 v， 退回到 normal 模式摁下 esc 即可</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816808.png" alt="image-20230329131813629"></p><h2 id="光标移动"><a href="#光标移动" class="headerlink" title="光标移动"></a>光标移动</h2><p><strong>一下均在 normal 模式下进行</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071034330.png" alt="image-20230329131928890"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035753.png" alt="image-20230329132139214"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816844.png" alt="image-20230329132620000"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816034.png" alt="image-20230329132752671"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035726.png" alt="image-20230329133610027"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816881.png" alt="image-20230329133902616"></p><ul><li><p>操作符</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816927.png" alt="image-20230329133932137"></p><p>u 撤销， p粘贴 ，c修改，y是复制的意思</p><figure class="highlight cpp"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">yyp向下复制一行</span><br><span class="line">y + <span class="number">2</span>  + yp 代表向下复制两行</span><br><span class="line">cc 删除一行 （）</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">d + i + &lt;    删除&lt;&gt;括号里面的元素</span><br><span class="line">c + i + &lt;    删除&lt;&gt;括号里面的元素 并进入写入模式</span><br><span class="line">c + a + &lt;    删除包括&lt;&gt;在内的所有元素</span><br><span class="line">u 代表撤回</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">dd 删除一行</span><br><span class="line"><span class="number">2</span>dd 删除两行</span><br><span class="line">（使用cc可以删除后进入写入模式）</span><br><span class="line">  </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">y + f + s 复制到第一个s的内容，然后 摁下p就是复制</span><br><span class="line">d + f + s 找到第一个s的内容 ，然后删除从当前文本到s的所有内容</span><br><span class="line">c + f + s 同上，但是删除之后，进入写入模式</span><br><span class="line">    </span><br><span class="line">d + i + t 代表删除标签内的所有元素</span><br><span class="line">&lt;html&gt;</span><br><span class="line">    &lt;div&gt;</span><br><span class="line">    fadfa</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">    &lt;p&gt;</span><br><span class="line">    dfa</span><br><span class="line">    &lt;/p&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">在normal模式下输入d + i + t就可以实现把html中所有的元素删除</span><br><span class="line">    </span><br><span class="line">我们还可以配合尖角号来进行删除 </span><br><span class="line">d + ^ 删除开头的所有元素</span><br><span class="line">d + $ 删除从光标开始往后的所有元素 </span><br><span class="line">    </span><br><span class="line">v + i + w 快速选中当前光标所在的单词</span><br></pre></td></tr></table></figure></li></ul><h2 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816249.png" alt="image-20230401192720576"></p><p>可以结合上上面的操作， 如 v + i + w 选中一个单词然后把所有的元素都换成大写或者小写字母</p><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><p>gd 可以跳转到定义 (ctrl + i 可以调回来)</p><p>切换标签页 g + t （往前） g + T（往后）</p><p>4 g t 跳转第二个标签页</p><h2 id="easymotion"><a href="#easymotion" class="headerlink" title="easymotion"></a>easymotion</h2><p><code>&lt;leader&gt;&lt;leader&gt; s</code> leader 代表键盘</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035188.png" alt="image-20230401194215189"></p><h2 id="vim-surround"><a href="#vim-surround" class="headerlink" title="vim_surround"></a>vim_surround</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816782.png" alt="image-20230401194513127"></p><p>当你使用 cs “ [ 则去掉”,然后 [ 之间没有空格,] 之间有空格</p><p>替换标签可以使用 cs”t p&gt; 就可以得到 一个标签</p><ul><li>退回到命令行模式，然后输入<code>:wq</code>可以强制退出</li></ul><h1 id="linux"><a href="#linux" class="headerlink" title="linux"></a>linux</h1><p>centos和vm虚拟机软件的安装看<a href="%5B007_%E9%9F%A9%E9%A1%BA%E5%B9%B3Linux_%E7%BD%91%E7%BB%9C%E8%BF%9E%E6%8E%A5%E4%B8%89%E7%A7%8D%E6%96%B9%E5%BC%8F_%E5%93%94%E5%93%A9%E5%93%94%E5%93%A9_bilibili%5D(https://www.bilibili.com/video/BV1Sv411r7vd?p=7&vd_source=a96a6a5c5954878773b7ac38c6a5f71b)">韩顺平</a></p><h2 id="1-网络连接的三种方式"><a href="#1-网络连接的三种方式" class="headerlink" title="1.网络连接的三种方式"></a>1.网络连接的三种方式</h2><p>如果两个网络都在一个 192.168为开头的，那么他们都在同一个<strong>网段</strong> 在一个网段下的用户，可以相互链接</p><ul><li>桥接模式，虚拟系统可以和外界系统通讯，但是容易造成ip冲突</li><li>NAT模式：网络地址转换模式，虚拟系统可以和外部系统通讯，不造成ip冲突（<strong>首先这个</strong>）</li><li>主机模式：独立模式</li></ul><h2 id="2-虚拟机的基本知识"><a href="#2-虚拟机的基本知识" class="headerlink" title="2.虚拟机的基本知识"></a>2.虚拟机的基本知识</h2><h3 id="2-1虚拟机的克隆"><a href="#2-1虚拟机的克隆" class="headerlink" title="2.1虚拟机的克隆"></a>2.1虚拟机的克隆</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035816.png" alt="image-20221124160826896"></p><ul><li>注意克隆的时候，需要<strong>关闭linux系统</strong></li></ul><p><strong>克隆的方式</strong></p><ol><li>引用拷贝</li><li>深度拷贝（完全复制一个过去）</li></ol><h3 id="2-2虚拟机的快照（我的理解是就像备份）"><a href="#2-2虚拟机的快照（我的理解是就像备份）" class="headerlink" title="2.2虚拟机的快照（我的理解是就像备份）"></a>2.2虚拟机的快照（我的理解是就像备份）</h3><blockquote><p>想要回到原先的某一个状态，就可以使用快照的机制</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816119.png" alt="image-20221124161923011"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035784.png" alt="image-20221124162020657"></p><blockquote><p>如果你现在在C，记录了A和B的快照，那么我们就可以通过快照机制回到A，<strong>在回到A之后，我们也可以回到B</strong></p></blockquote><h3 id="2-3删除（直接手动删除就好了）"><a href="#2-3删除（直接手动删除就好了）" class="headerlink" title="2. 3删除（直接手动删除就好了）"></a>2. 3删除（直接手动删除就好了）</h3><h3 id="2-4安装vmtools"><a href="#2-4安装vmtools" class="headerlink" title="2.4安装vmtools"></a>2.4安装vmtools</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816628.png" alt="image-20221124163106274"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816071.png" alt="image-20221124205734386"></p><h2 id="3-目录结构-grin"><a href="#3-目录结构-grin" class="headerlink" title="3.目录结构:grin:"></a>3.目录结构:grin:</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816088.png" alt="image-20221124205900134"></p><blockquote><p>在linux的世界中，一切皆文件</p></blockquote><ul><li>&#x2F;bin 存放着最常用的指令</li><li>&#x2F;sbin 存放普通用户的主目录，在linux中每一个用户</li><li>&#x2F;lib 系统开机所需要最基本的动态连接的</li><li>&#x2F;etc 所有系统管理所需要的配置文件和子目录</li><li>&#x2F;usr 这是一个非常重要的，用户的所有应用程序和文件都放在这个目录</li><li>&#x2F;proc(不要动)</li><li>&#x2F;srv（不要动)</li><li>&#x2F;sys（不要动）</li><li>&#x2F;dev类似于windows的设备管理器</li><li>&#x2F;media</li><li>&#x2F;mnt  共享</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071035136.png" alt="image-20221124211147986"></p><p>&#x2F;opt 主机额外安装软件所存放的目录&#x2F;&#x2F;如安装oracle数据库</p><h2 id="4-远程登录linux"><a href="#4-远程登录linux" class="headerlink" title="4.远程登录linux"></a>4.远程登录linux</h2><ul><li>xftp : 传输文件</li><li>xshell ：传输命令</li></ul><h2 id="5-vim基本介绍"><a href="#5-vim基本介绍" class="headerlink" title="5.vim基本介绍"></a>5.vim基本介绍</h2><ul><li>三种模式</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816706.png" alt="image-20221124212648626"></p><p>wq: <strong>写入并退出</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816845.png" alt="image-20221125200740850"></p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816097.png" alt="image-20221125201537680" style="zoom:80%;" /><p>快捷键</p><ol><li>yy: 拷贝当前行 <code>4yy</code>复制4行</li><li>dd: 删除当前行 <code>4dd</code>删除当前行</li><li>&#x2F;关键字 ，回车查找，输入n就是查找下一个，输入N就是查找下一个</li><li><code>:set nu</code> ：显示行号,<code>:set  nonu</code>：不显示行号</li><li><code>gg</code>：快捷键到文档的最开始一行 <code>G</code>：快捷键到文档的最后一行</li><li><code>u</code>撤销，如windows的<code>ctrl+z</code></li><li><code>数字+shift+g</code>定位到数字对应的行</li></ol><h2 id="6-关机重启"><a href="#6-关机重启" class="headerlink" title="6.关机重启"></a>6.关机重启</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036336.png" alt="image-20221125201705119"></p><blockquote><p>-h 的h就是halt -r的r就是reboot</p></blockquote><ul><li><p>shutdown -h 代表1分钟后关机</p></li><li><p>shutdown -h 2 代表2分钟之后关机</p></li><li><p>shutdown -h now 代表现在关机</p></li><li><p>shutdown -r now 现在重启电脑</p></li><li><p>sync 把数据内存同步到磁盘之中。（<strong>建议在关机的时候， 执行一次， 免得出现问题</strong>）</p></li></ul><h2 id="7-用户登录和注销"><a href="#7-用户登录和注销" class="headerlink" title="7.用户登录和注销"></a>7.用户登录和注销</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816795.png" alt="image-20221125202148529"></p><p><code>su - root</code></p><blockquote><p>root的时候使用logout的时候就会变成tom，在使用一次就会退出系统</p></blockquote><ul><li><p>上面的这些操作得在shell中使用。</p></li><li><p>su -  用户名可以切换，你的用户级别</p></li></ul><h2 id="8-用户管理"><a href="#8-用户管理" class="headerlink" title="8.用户管理"></a>8.用户管理</h2><p>tip:<code>pwd</code>显示当前用户所在的目录</p><h3 id="8-1-添加用户"><a href="#8-1-添加用户" class="headerlink" title="8.1 添加用户"></a>8.1 添加用户</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 创建用户</span><br><span class="line">useradd 用户名</span><br><span class="line">useradd -d 地址 用户名 指定家目录的地址创建一个用户（默认的用户是被放置到\home之中</span><br><span class="line"># 设置用户密码</span><br><span class="line">passwd milan xxxx</span><br></pre></td></tr></table></figure><h3 id="8-2删除用户"><a href="#8-2删除用户" class="headerlink" title="8.2删除用户"></a>8.2删除用户</h3> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 删除用户milan，但是保留家目录，但是用户会消失（必须时root权限才能删除）</span><br><span class="line">userdel milan</span><br><span class="line"></span><br><span class="line"># 删除用户milan，不保留家目录（要慎重）</span><br><span class="line">userdel -r milan</span><br><span class="line"></span><br><span class="line"># 如果你先用第一种方式删除了milan，那么你就不可以通过-r将milan从home中删除掉</span><br></pre></td></tr></table></figure><ul><li>如果你忘记加上-r操作，想要进一步的删除考虑一下做法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816982.png" alt="image-20230514161922494"></p><h2 id="8-x其他的一些操作"><a href="#8-x其他的一些操作" class="headerlink" title="8.x其他的一些操作"></a>8.x其他的一些操作</h2><ul><li><p><strong>高层级的退出到底层级的用户，不需要输入密码</strong></p></li><li><p>当你想从高级的到低级别的时候， 我们就可以使用logout</p></li><li><p>who am i：<strong>查看当前用户的信息</strong>（用户取决于你<strong>第一次登录</strong>的信息）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036321.png" alt="image-20221126091528924"></p></li><li><p>查询用户名</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id king </span><br><span class="line">id 用户名 返回一个用户的信息</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816906.png" alt="image-20230507163705500"></p><h3 id="8-3用户组"><a href="#8-3用户组" class="headerlink" title="8.3用户组"></a>8.3用户组</h3><p>tips：<strong>clear 清屏</strong></p><h4 id="8-3-1增加用户组"><a href="#8-3-1增加用户组" class="headerlink" title="8.3.1增加用户组"></a>8.3.1增加用户组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">groupadd 组名</span><br><span class="line"></span><br><span class="line"># 将用户直接直接放到用户组中</span><br><span class="line">useradd -g wudang zwj</span><br></pre></td></tr></table></figure><h4 id="8-3-2删除用户组"><a href="#8-3-2删除用户组" class="headerlink" title="8.3.2删除用户组"></a>8.3.2删除用户组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">groupdel 组名</span><br></pre></td></tr></table></figure><ul><li>如果没有创建用户没有指定组，会<strong>自动生成一个对应用户名称的组</strong></li></ul><h4 id="8-3-3修改用户组"><a href="#8-3-3修改用户组" class="headerlink" title="8.3.3修改用户组"></a>8.3.3修改用户组</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">usermod -g mojiao zwj 把zwj移动到mojiao组</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036733.png" alt="image-20230507164612748"></p><ul><li>从魔教变成了武当教</li></ul><h4 id="8-3-4用户和组相关文件"><a href="#8-3-4用户和组相关文件" class="headerlink" title="8.3.4用户和组相关文件"></a>8.3.4用户和组相关文件</h4><p>解释器：国内一般用bashshell</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036582.png" alt="image-20221126093152036"></p><ul><li>第一个指令为 <code>vim etc/passwd</code></li><li>后面的指令也是 <code>vim + 后面的一坨东西</code></li></ul><h2 id="9-linux使用指令"><a href="#9-linux使用指令" class="headerlink" title="9.linux使用指令"></a>9.linux使用指令</h2><ul><li>运行级别的介绍</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816138.png" alt="image-20221127084923967"></p><ul><li>输入<code>init n</code>跳入对应的状态</li><li><code>systemctl set-default graphical.target</code>,回到默认的状态</li><li><code>systemctl set-default TARGET.target</code>设置回到的状态</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036173.png" alt="image-20230509090244160"></p><p><strong>修改初始init的方法</strong>。</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">systemctl get-default </span><br><span class="line">查看当前系统的默认级别</span><br><span class="line"></span><br><span class="line">systemctl set-default multi-user.target</span><br><span class="line">切换成多用户网络级别</span><br><span class="line"></span><br><span class="line">systemctl set-default graphical.target</span><br><span class="line">切换成图形界面级别级别</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="如何找回root密码"><a href="#如何找回root密码" class="headerlink" title="如何找回root密码"></a>如何找回root密码</h3><ol><li><p>首先，启动系统，进入开机界面，在界面中摁’e’进入编辑界面</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816771.png" alt="image-20221127090532246"></p></li><li><p>进入编辑界面，使用键盘的上下键把光标往下移动，找到以LINUX16开头内容所在行数，在行的最后面输入: init&#x3D;&#x2F;bin&#x2F;sh。</p></li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816818.png" alt="image-20221127090821988"></p><ol start="3"><li>接着，输入完成后，直接按快捷键:<code>Ctrl+x</code>进入单用户模式</li><li>接着，在光标闪烁的位置输入 ：<code>mount -o remount,rw /</code></li><li>输入passwd回车后，输入密码</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036533.png" alt="image-20221127091100984"></p><ol start="6"><li><p>在鼠标闪烁位置中（最后一行）输入<code>touch /.autorelabel</code>（注意touch和&#x2F;之间有以一个空格）</p></li><li><p>继续在光标闪烁位置，输入<code>exec /sbin/init</code>然后摁下回车键，等待系统自动修改密码</p></li></ol><h3 id="帮助指令"><a href="#帮助指令" class="headerlink" title="帮助指令"></a>帮助指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816718.png" alt="image-20230509133624219"></p><ul><li><p>man<strong>获得帮助信息</strong></p><ul><li>如 <code>man ls</code></li><li>选项可以组合使用 ls -al, ls -al&#x2F;root</li><li>从man的提示中退出只要输入<code>q</code>就好了</li></ul></li><li><p>help 获得shell内置命令的帮助信息</p></li><li><p>在linux里面，隐藏文件是以<code>.</code>开头的。</p></li></ul><h2 id="文件指令"><a href="#文件指令" class="headerlink" title="文件指令"></a>文件指令</h2><ul><li>pwd : 显示当前的绝对路径</li></ul><h3 id="ls"><a href="#ls" class="headerlink" title="ls"></a>ls</h3><ul><li><code>ls - l</code>单列输出所有的文件</li><li><code>ls - a</code>输出所有的文件</li><li>选项还可以组合使用 <code>ls - al</code>, <code>ls -al /home</code>代表输出root目录下的<code>所有文件</code></li></ul><h3 id="cd"><a href="#cd" class="headerlink" title="cd"></a>cd</h3><p><code>cd ~</code>回到自己的家目录</p><p><code>cd ..</code> 回到当前目录的上一级</p><h3 id="mkdir"><a href="#mkdir" class="headerlink" title="mkdir"></a>mkdir</h3><ul><li>指令用于创建目录</li></ul><p><strong>创建dog目录</strong></p><p><code>mkdir /home/dog</code></p><p>创建多级目录</p><p><code>mkdir -p /home/dog/animal</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816839.png" alt="image-20230509140515432"></p><p>在当前<code>/home</code>之中创建一个<code>dog</code>,在<code>dog</code>之中创建一个<code>animal</code></p><h3 id="rmdir"><a href="#rmdir" class="headerlink" title="rmdir"></a>rmdir</h3><p>rmdir 删除一个空目录</p><ul><li>只有空目录才可以使用</li></ul><p>所以你不能删除掉有animal的cat的dir文件</p><ul><li>想要删除需要用<code>rm -rf dir</code></li></ul><p>比如我想要删除掉cat和animal,那么我们就可以使用这个递归删除.(r代表recursion)</p><p><code>rm -rf ./cat</code></p><p>通过上诉指令,将cat的所有文件,包括cat全部删除</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816197.png" alt="image-20230509141219006"></p><h3 id="touch"><a href="#touch" class="headerlink" title="touch"></a>touch</h3><ul><li>创建一个空文件</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036554.png" alt="image-20230509141248356"></p><h3 id="cp"><a href="#cp" class="headerlink" title="cp"></a>cp</h3><ul><li>指定的文件拷贝到指定的地址之中</li></ul><p><code>-r选项</code>递归复制整个文件夹</p><p>将bbb内的所有文件拷贝到opt文件夹之中</p><p><code>cp -r /home/bbb/ /opt/</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071036886.png" alt="image-20230509142004563"></p><p><code>\cp -r /home/bbb/opt</code> 强制覆盖所有文件,不需要一个一个的提示</p><h3 id="rm"><a href="#rm" class="headerlink" title="rm"></a>rm</h3><ul><li><p>不同于上面的删除目录, 这个是删除文件</p></li><li><p>常用选项</p><ul><li>-r 递归删除整个文件夹</li><li>-f 强制删除不提示</li><li><strong>这些选项可以组合</strong></li><li>-rf强制删除所有文件夹不提示</li></ul></li><li><p>比如将&#x2F;home&#x2F;hello.txt文件删除</p><p><code>rm /home/hello.txt</code></p><p><code>rm -f /home/hello.txt</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816017.png" alt="image-20230509142656169"></p><p><strong>两种方法得到的结果为上图</strong></p><ul><li>tips</li></ul><p>删除整个系统为<code>-rm -rf /</code>但是这样会有系统提示</p><p>,为了绕开它的提示我们可以使用<code>-rm -rf /*</code></p><h3 id="mv指令"><a href="#mv指令" class="headerlink" title="mv指令"></a>mv指令</h3><ul><li>移动文件与目录或者重命名</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816283.png" alt="image-20230509143508413"></p><ul><li><p>在同一个目录下面, 就是重命名</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037870.png" alt="image-20230509143631469"></p></li><li><p>否则就是移动文件.</p></li><li><p>移动整个目录</p><p>将bbb目录移动到home&#x2F;下面</p><p><code>mv bbb /home/</code></p></li></ul><h3 id="cat指令-更安全"><a href="#cat指令-更安全" class="headerlink" title="cat指令(更安全)"></a>cat指令(更安全)</h3><ul><li><p>他只能浏览方便, 但是不可以修改文件.</p></li><li><p>查看文件的内容</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816752.png" alt="image-20230509144025149"></p><p><code>cat -n /etc/profile</code></p><h4 id="拓展-管道命令"><a href="#拓展-管道命令" class="headerlink" title="拓展 : 管道命令"></a>拓展 : 管道命令</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816907.png" alt="image-20230509144422055"></p><p><strong>将前面命令的结果交给下一个命令进行处理</strong></p><p> &#96;&#96;cat -n &#x2F;etc&#x2F;profile | more&#96;</p><p><strong>more可以进行翻页等功能</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037468.png" alt="image-20230509144450191"></p><p><code>more /etc/profile</code></p><h3 id="less"><a href="#less" class="headerlink" title="less"></a>less</h3><p>功能:</p><p> <img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816427.png" alt="image-20230509144722631"></p><p><strong>它比more指令更加好用, 它的查看文件的效率更加.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037726.png" alt="image-20230509145126682"></p><h3 id="echo"><a href="#echo" class="headerlink" title="echo"></a>echo</h3><ul><li>输出内容到控制台</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037278.png" alt="image-20230509145229416"></p><ul><li>环境变量带有美元符号</li></ul><p><code>echo $HOSTNAME</code>显示当前服务器名字</p><p><code>echo &quot;hello,world&quot;</code> (注意这里必须要加上引号)</p><p><code>echo &gt;</code>代表的是覆盖</p><p><code>echo &gt;&gt;</code>代表的是追加</p><h3 id="head指令"><a href="#head指令" class="headerlink" title="head指令"></a>head指令</h3><ul><li>用来显示文件的开头文件内容, 默认查看10行的内容.</li><li><code>head -n 5</code> 显示前五行.</li></ul><h3 id="tail指令"><a href="#tail指令" class="headerlink" title="tail指令"></a>tail指令</h3><ul><li><p>显示文件的末尾内容, 默认显示末尾10行.</p></li><li><p>同head指令</p></li><li><p><strong>选项 <code>-f</code>实时显示文件内容.(非常重要)</strong></p><p>输入<strong>ctrl+c</strong>代表退出</p></li></ul><p><strong>拓展 : 重定向,将输出的内容写入到其他地方.</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816937.png" alt="image-20230509150147565"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816653.png" alt="image-20230509150154370"></p><p>在linux系统中向文件中写入这个指令, 然后再tail的监控下得到了<code>helloworld</code></p><h3 id="和-指令"><a href="#和-指令" class="headerlink" title="&gt; 和 &gt;&gt; 指令"></a>&gt; 和 &gt;&gt; 指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037240.png" alt="image-20230509150523092"></p><ul><li><p>因为以上指令的输出地方都是再控制台里面, 我们可以利用重定向将他转换到其他地方</p></li><li><p>cal : 显示当前的日历</p></li></ul><p><code>cal &gt; /home/cc.txt</code>将日历覆盖到<code>cc.txt</code>文件之中</p><h3 id="ln指令-这里是l不是i"><a href="#ln指令-这里是l不是i" class="headerlink" title="ln指令(这里是l不是i)"></a>ln指令(这里是l不是i)</h3><p>软链接, 类似于window之中的<code>快捷键</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071037056.png" alt="image-20230509151433783"></p><p><code>ln -s /root/ /home/myroot</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816792.png" alt="image-20230509151609372"></p><h3 id="history"><a href="#history" class="headerlink" title="history"></a>history</h3><p>查看已经执行过的历史指令.</p><ul><li><p>查看所有的指令<code>history</code></p></li><li><p>查看最近的十条指令<code>history 10</code></p></li><li><p>执行历史编号为<code>!5</code></p></li></ul><h2 id="时间日期类指令"><a href="#时间日期类指令" class="headerlink" title="时间日期类指令"></a>时间日期类指令</h2><p><code>date</code></p><p><code>date +%Y</code></p><p><code>date +%m</code></p><p><code>date +%d</code></p><p><code>date &quot;+%Y- %m- %d %H:%M:%S&quot;</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816870.png" alt="image-20230512102419810"></p><p><code>date -s 设计系统当前时间</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040881.png" alt="image-20230512102701478"></p><p><code>cal</code> 查看日历指令</p><h2 id="搜索查找类指令"><a href="#搜索查找类指令" class="headerlink" title="搜索查找类指令"></a>搜索查找类指令</h2><h3 id="find指令"><a href="#find指令" class="headerlink" title="find指令"></a>find指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040348.png" alt="image-20230512102954151"></p><ol><li><code>find /home -name hello.txt</code></li></ol><p>查找 home 名称下面的hello的记事本</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816791.png" alt="image-20230512103312599"></p><ol start="2"><li><p><code>find /opt -user nobody</code></p><p>可以换成将<code>nobody</code>替换成<code>root</code></p><p>因为跳转的太快我们看不清里面的文件， 我们还可以使用 |more 来减缓速度</p><p>例如<code>find / -user root | more</code></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816976.png" alt="image-20230512103813288"></p><p><code>find / -size +200M</code> 找到从根目录下大于200M的文件</p><p><code>ls -lh</code>将数据换成比较适合人看的单位</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040298.png" alt="image-20230512105002992"></p></li></ol><h3 id="locate-指令"><a href="#locate-指令" class="headerlink" title="locate  指令"></a>locate  指令</h3><p><code>快速定位文件的路径</code></p><p><strong>它的查询速度非常快速，他是建立自己的数据库进行查找</strong></p><ul><li>在第一次运行之前， 需要使用<code>updatedb</code>指令创建<code>locate</code>数据库, 否则会检索不到</li></ul><h3 id="which-指令"><a href="#which-指令" class="headerlink" title="which 指令"></a>which 指令</h3><p><strong>可以查看某一个指令在哪个目录存放 。</strong></p><p><code>which ls</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816676.png" alt="image-20230512104657145"></p><h3 id="grep-指令和管道符号"><a href="#grep-指令和管道符号" class="headerlink" title="grep 指令和管道符号"></a>grep 指令和管道符号</h3><p><code>grep 过滤查找， 管道符， &quot;|&quot; 表示将前一个命令的处理结果输出传递给后面的命名处理</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816821.png" alt="image-20230512104805852"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040821.png" alt="image-20230512105721349"></p><p><code>grep -n &quot;查找内容&quot; 地址</code></p><ul><li>常用选项</li></ul><p><code>-i</code> ： 忽略大小写</p><h2 id="压缩和解压指令"><a href="#压缩和解压指令" class="headerlink" title="压缩和解压指令"></a>压缩和解压指令</h2><h3 id="gzip-gunzip-指令"><a href="#gzip-gunzip-指令" class="headerlink" title="gzip &#x2F; gunzip 指令"></a>gzip &#x2F; gunzip 指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816275.png" alt="image-20230512105927399"></p><ul><li><p>gzip 地址&#x2F;</p><p>压缩后会保存源文件</p></li><li><p>gunzip压缩</p></li><li><p>选项 -r 递归压缩， 也就是压缩目录</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816278.png" alt="image-20230512110256282"></p><ul><li><code>zip -r myhome.zip /home/</code>将home目录及其包</li><li><code>unzip -d /opt/tmp/ home/myhome.zip</code> 解压myhome.zip刀tmp目录下</li></ul><h3 id="tar指令"><a href="#tar指令" class="headerlink" title="tar指令"></a>tar指令</h3><ul><li>zxvf <strong>解包文件</strong></li><li>zcvf <strong>压缩打包文件</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040312.png" alt="image-20230512110956001"></p><ul><li><strong>将上诉两个文件， 打包到一个tar.gz文件中</strong></li></ul><p><code>tar -zcvf pc.tar.gz helo.txt sss.txt</code></p><ul><li><strong>将<code>pc.tar.gz</code>解压到当前目录</strong></li></ul><p><code>tar -zxvf pc.tar.gz</code></p><ul><li><strong>将<code>pc.tar.gz</code>解压刀指定目录</strong></li></ul><p>(1).<code>mkdir /opt/tmp2</code></p><p>(2).<code>tar -zxvf /home/myhome.tar.gz -C /opt/tmp2</code></p><h2 id="用户组"><a href="#用户组" class="headerlink" title="用户组"></a>用户组</h2><ul><li>任何一个用户都必须有一个组</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816805.png" alt="image-20230513102646026"></p><h2 id="文件-目录-所有者"><a href="#文件-目录-所有者" class="headerlink" title="文件&#x2F;目录 所有者"></a>文件&#x2F;目录 所有者</h2><ul><li><p>ls -ahl 查看所有文件，以及它的创建者</p></li><li><p>chown 用户名 文件名 将该文件 转换为对应的用户名</p></li></ul><h3 id="组的创建"><a href="#组的创建" class="headerlink" title="组的创建"></a>组的创建</h3><ul><li><code>groupadd 组名 groupadd monster</code></li><li>创建一个用户fox  <code>useradd -g monster</code></li><li>给用户设置密码 <code>passwd fox</code></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071040005.png" alt="image-20230513103703454"></p><p>第一个root代表用户名， 第二个代表组名</p><ul><li>修改文件所在的组</li></ul><p><code>chgrp 组名 文件名</code></p><p><code>touch orange.txt</code></p><p><code>chgrp fox orange.txt</code></p><p>创建一个orange的文本， 然后把这个文本的组名换成fox组</p><h2 id="其他组"><a href="#其他组" class="headerlink" title="其他组"></a>其他组</h2><p><code>usermod -g 新组名 用户名</code></p><p><code>usermod -d 目录名 用户名</code> : <strong>用户需要有进入到目录的权限</strong></p><h2 id="权限的基本介绍"><a href="#权限的基本介绍" class="headerlink" title="权限的基本介绍"></a>权限的基本介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816112.png" alt="image-20230513105300579"></p><p>这行数据的含义如下</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816537.png" alt="image-20230513105326509"></p><p><strong>第一位</strong></p><p>是<code>l</code>代表链接</p><p>是<code>d</code>代表目录,相当于windows的目录</p><p>是<code>-</code>代表是普通文件</p><p>是<code>c</code>代表是字符设备 比如鼠标键盘 <strong>cd &#x2F;dev 就可以看到, 下面的也可以</strong>通过这个方式看到</p><p>是<code>b</code>是块设备, 比如硬盘</p><p><strong>第1-3位</strong>确定所有者拥有对该文件的权限 –user</p><p><strong>第4-6位</strong>确定所属组拥有的对该文件的权限 –group</p><p><strong>第7-9位</strong>确定其他用户组拥有该文件的权限 – Other</p><p>如果对应权限没有,利用<code>-</code>来表示<strong>缺省</strong></p><p><code>-    rwx    rw-    r--</code></p><p><strong>上面分隔开就可以表示权限</strong></p><p>rwx (<strong>r代表可读 w代表可写 x代表可以执行</strong>)</p><p>作用到文件和目录下面的区别</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071041461.png" alt="image-20230513110428616"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816112.png" alt="image-20230513105300579"></p><ul><li>两个root之后的<strong>数字代表文件的字节大小,</strong> 后面是<strong>最后修改的日期</strong> , 最后一个代表的是文件名</li></ul><h2 id="修改权限-chmod"><a href="#修改权限-chmod" class="headerlink" title="修改权限 - chmod"></a>修改权限 - chmod</h2><ul><li>要先切换到对应的用户名那边先。</li></ul><blockquote><p>u:所有(拥有)者 g:所有组 o:其他人 a:所有人</p></blockquote><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513111852339.png" alt="image-20230513111852339"></p><ul><li><p><code>-</code>运算符, 代表 除去用户对应输入字母的权限</p></li><li><p><code>+</code>运算符, 代表 增加用户对应输入字母的权限</p></li><li><p>当前abc的权限</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816155.png" alt="image-20230513112435746"></p><ul><li>输入该指令之后<code>chmod u=rwx,g=rwx,o=rx abc</code></li><li>权限变更位如下</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071041389.png" alt="image-20230513112455168"></p><p>输入<code>chmod u-x,g+w abc</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816151.png" alt="image-20230513112703869"></p><p>所有者权限x消失了,<code>用户组</code>增加了<code>w</code>权限</p><ul><li>当然我们也可以通过数字来变更权限</li></ul><p><code>r = 4 w = 2 x = 1</code>,所以 rwx 对应的数字为 &#x3D; 4 + 2 + 1 &#x3D; 7</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816303.png" alt="image-20230513112858870"></p><h2 id="chown-修改文件所有者"><a href="#chown-修改文件所有者" class="headerlink" title="chown - 修改文件所有者"></a>chown - 修改文件所有者</h2><p><code>chown tom /home/abc.txt</code></p><p>修改abc.txt的所有者为<code>tom</code></p><p><strong>修改前</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071041460.png" alt="image-20230513113132399"></p><p><strong>修改后</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816550.png" alt="image-20230513113122116"></p><ul><li><code>-R</code>如果是目录,则使其所有子文件或者目录递归生效</li></ul><p><code>chown -R tom /home/test</code> 将test文件夹里面的所有文本全部变成tom用户的所属</p><h2 id="chgrp-修改文件所属组"><a href="#chgrp-修改文件所属组" class="headerlink" title="chgrp - 修改文件所属组"></a>chgrp - 修改文件所属组</h2><p><strong>类似于上面的chown</strong></p><ul><li>将abc.txt的组换成shaolin组</li></ul><p><code>chgrp shaolin /home/abc.txt</code></p><ul><li>将&#x2F;home&#x2F;test目录下的所有文件和目录的所有组全部变成shaolin组</li></ul><p><code>chgrp -R shaolin /home/test</code></p><h2 id="组的总结"><a href="#组的总结" class="headerlink" title="组的总结"></a>组的总结</h2><ul><li>如果想要对目录的文件进行修改， 我们必须先获得对应文件夹的<strong>执行权限</strong>。</li><li>如果我们有x权限，但是没有r权限，那么这个文件夹不能用<code>ls</code>操作， 但是可以cd到这个文件（而且我们也可以用<code>vim</code></li><li>对于一个目录， 如果你没有w权限， 那么你就不能就目录里的文件进行<strong>删除，和创建文件</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816783.png" alt="image-20230514160753450"></p><h1 id="crond任务调度"><a href="#crond任务调度" class="headerlink" title="crond任务调度"></a>crond任务调度</h1><ul><li>指定系统在某一个时间调度。</li><li>指定系统定时调度</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042458.png" alt="image-20230514162502238"></p><ul><li>占位符</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816211.png" alt="image-20230514162711101"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">*/1 * * * * ls -l /etc/ &gt; /tmp/to.txt（*/1 代表每1min都执行一次）</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042105.png" alt="image-20230514163107233"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816458.png" alt="image-20230514163052523"></p><p><code>cd</code> 到<code>/tmp/</code>里面，发现生成了一个<code>to.txt</code> ， 如果暂时还没有生成， 我们可以等一伙</p><ul><li>最后一个* 代表星期几</li></ul><h2 id="特殊符号的说明"><a href="#特殊符号的说明" class="headerlink" title="特殊符号的说明"></a>特殊符号的说明</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042313.png" alt="image-20230514163727308"></p><ul><li>星期和日期尽量不要同时选</li></ul><h2 id="一个小的案例"><a href="#一个小的案例" class="headerlink" title="一个小的案例"></a>一个小的案例</h2><ul><li>我们先创建一个文本<code>my.sh</code>(还要把my。sh的权限修改为有x， chmod u+x)</li><li>vim my.sh 输入<code>date &gt;&gt; /home/mycal</code>      <code>cal &gt;&gt; /home/mycal</code></li><li><code>crontab -e</code>  <code>*/1 * * * * my.sh</code></li><li>最后效果为</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816166.png" alt="image-20230514170338156"></p><h2 id="案例二（我还没做，到时候装了数据库再说）"><a href="#案例二（我还没做，到时候装了数据库再说）" class="headerlink" title="案例二（我还没做，到时候装了数据库再说）"></a>案例二（我还没做，到时候装了数据库再说）</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816170.png" alt="image-20230514171039076"></p><h2 id="其他crontab指令"><a href="#其他crontab指令" class="headerlink" title="其他crontab指令"></a>其他crontab指令</h2><ul><li>crontab -r ： 终止任务调度</li><li>crontab -l：列出当前有那些任务调度</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816329.png" alt="image-20230514170957165"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042556.png" alt="image-20230514170948449"></p><h2 id="at指令"><a href="#at指令" class="headerlink" title="at指令"></a>at指令</h2><ul><li><p>基本介绍</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042287.png" alt="image-20230514171200073"></p></li><li><p>拓展 ：ps -ef 检测当前的进程</p><ul><li>结合过滤语句可以查看是否存在atd<code>ps -ef | grep atd</code></li></ul></li></ul><p>at<strong>命令选项</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816074.png" alt="image-20230514171801752"></p><ul><li>at的时间定义</li><li></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042445.png" alt="image-20230514172118480"></p><ul><li>先输入时间指令</li><li>然后再输入命令指令</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042679.png" alt="image-20230514173315561"></p><ul><li>要退出的话，连续敲击<code>ctrl + D</code></li></ul><blockquote><p>atq可以查看当前系统执行工作任务</p></blockquote><blockquote><p>再输入命令的时候，打错了要输入ctrl + backspace</p></blockquote><blockquote><p>删除一个at进程， atrm 5(5 是他对应的编号)</p></blockquote><h1 id="linux-磁盘分区"><a href="#linux-磁盘分区" class="headerlink" title="linux 磁盘分区"></a>linux 磁盘分区</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816274.png" alt="image-20230515153704104"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042640.png" alt="image-20230515153925596"></p><ul><li><p>挂载 （mount）：</p><p>lsblk  <strong>查看挂载内容</strong><br>lsblk -f 查看挂载</p></li><li><p>分区（IDE硬盘 和SCSI硬盘）目前基本上都是SCSI硬盘</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042982.png" alt="image-20230515154509526"></p><ul><li>uuid 分区的唯一标识符</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816233.png" alt="image-20230515155025026"></p><h2 id="增加硬盘示例"><a href="#增加硬盘示例" class="headerlink" title="增加硬盘示例"></a>增加硬盘示例</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042420.png" alt="image-20230515155108654"></p><blockquote><p>新增一个newdisk， 然后把他挂载到分区1</p></blockquote><ul><li><p>增加一个快硬盘(右击对应虚拟机， 然后点击硬盘添加。)</p></li><li><p>分区指令 <code>fdisk /dev/?</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042589.png" alt="image-20230515155747169"></p><ul><li>之后还需要再进行格式化 ， 具体操作为</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816596.png" alt="image-20230515160027830"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816608.png" alt="image-20230515160431126"></p><p><strong>挂载</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071042826.png" alt="image-20230515160535402"></p><p><strong>卸载</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816154.png" alt="image-20230515160719390"></p><ul><li><p>如果利用命令行挂载，重启之后，之前挂载的内容会失效</p><p>想要永久挂载</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816490.png" alt="image-20230515160917755"></p></li></ul><p>​       将你要挂载的内容加入到里面</p><p>​      第一个数字：0&#x2F;1 &#x3D; 备份&#x2F;不备份，第二个数字：2&#x2F;1&#x2F;0 &#x3D; 根目录&#x2F;其他目录文件检查&#x2F;不检    查</p><p>​     <img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816805.png" alt="image-20230515161206690"></p><ul><li>对于第一个位置 ，你可以填写<strong>uuid</strong>， 也可以写它的<strong>地址</strong> ，第二个位置为挂载到的地点， 后面几个就先照抄我们还没有学</li></ul><h2 id="磁盘情况查询"><a href="#磁盘情况查询" class="headerlink" title="磁盘情况查询"></a>磁盘情况查询</h2><p><code>df -h</code> 查看磁盘的情况</p><ul><li><p>如果使用率超过了80%，那么需要清理硬盘，或者增加硬盘</p></li><li><p>查看指定目录的磁盘占用情况，默认为当前目录</p></li><li><p>使用<code>du -h --max-depth=1来查看磁盘的文件个数</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816907.png" alt="image-20230515162009026"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816976.png" alt="image-20230515162456559"></p><h2 id="磁盘情况-实用命令"><a href="#磁盘情况-实用命令" class="headerlink" title="磁盘情况-实用命令"></a>磁盘情况-实用命令</h2><ul><li>统计opt目录下文件个数</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816032.png" alt="image-20230515162722318"></p><p>grep过滤， 可以使用正则表达式， “^-“ 代表匹配前面为”-“的字符串</p><ul><li>统计opt文件夹下目录的个数</li></ul><p>grep过滤 ， 可以使用正则表达式，”^.”代表匹配前面任意一个字符串</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816176.png" alt="image-20230515162943471"></p><ul><li><p>统计&#x2F;opt文件夹下文件的个数，包括子文件夹里的</p><p><strong>ls -lR &#x2F;opt 目录下全部文件， wc -l可以统计个数</strong></p><p>ls -lR &#x2F;opt | grep “^.” | wc -l</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816291.png" alt="image-20230515163443478"></p></li><li><p>tree可以显示文件内的所有内容， 但是要下载<code>sudo yum install tree</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071043890.png" alt="image-20230515163726702"></p><h1 id="NAT网络原理图"><a href="#NAT网络原理图" class="headerlink" title="NAT网络原理图"></a>NAT网络原理图</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816734.png" alt="image-20230515165045620"></p><p>vmnet8可以跟linux虚拟机通讯</p><p>但是虚拟机<strong>不能ping vmnet8</strong> ，是因为<strong>windows</strong>里面会有防火墙</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071043253.png" alt="image-20230515165525475"></p><p>能上网， 是因为<strong>无线网卡</strong>做了<strong>代理</strong></p><h2 id="查看网络ip和代理"><a href="#查看网络ip和代理" class="headerlink" title="查看网络ip和代理"></a>查看网络ip和代理</h2><p>自行看65集就好</p><h2 id="linux网络环境配置"><a href="#linux网络环境配置" class="headerlink" title="linux网络环境配置"></a>linux网络环境配置</h2><ul><li>自动获取， 登录之后ip地址就会发生改变</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071043372.png" alt="image-20230515170707217"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816092.png" alt="image-20230515170918777"></p><p>从自动分配变成static</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816304.png" alt="image-20230516151017037"></p><ul><li><p>这一节就是教你怎么修改成静态ip的</p></li><li><p>网络服务生效 <strong>service network restart</strong> 或者选择 <strong>reboot</strong></p></li></ul><h1 id="设置主机名-和hosts映射"><a href="#设置主机名-和hosts映射" class="headerlink" title="设置主机名 和hosts映射"></a>设置主机名 和hosts映射</h1><ul><li><p>hostname - 查看当前主机名</p></li><li><p>修改主机的名字<code>vim /etc/hostname</code></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816399.png" alt="image-20230516142523551"></p><ul><li><p>那么如何通过主机名来查找主机</p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816769.png" alt="image-20230516143434265"></p></li><li><p>你只要在etc&#x2F;hosts里面写入ip地址空格主机名，这样就可以通过主机名来访问了</p></li></ul><p>它的原理为如下</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311071043820.png" alt="image-20230516143942597"></p><ul><li><strong>先找网络域名服务器， 在按照该图来进行修改</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816020.png" alt="image-20230516144200859"></p><ul><li>如果某个人把你的etc&#x2F;hosts修改为如下信息， 那么就会出现dns域名劫持</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516144340815.png" alt="image-20230516144340815"></p><ul><li>查看一个网站的ip地址可以使用ping 网站名称</li></ul><p>想要修改hosts文件，可以用记事本管理员模式打开， 然后打开到<code>C:\Windows\System32\drivers\etc\hosts</code></p><h1 id="Linux进程"><a href="#Linux进程" class="headerlink" title="Linux进程"></a>Linux进程</h1><p><code>pid</code>: 进程号（每一个程序分配一个ID号）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816242.png" alt="image-20230516151848444"></p><h2 id="显示系统的执行进程"><a href="#显示系统的执行进程" class="headerlink" title="显示系统的执行进程"></a>显示系统的执行进程</h2><h3 id="ps指令"><a href="#ps指令" class="headerlink" title="ps指令"></a>ps指令</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816621.png" alt="image-20230516151949132"></p><blockquote><p>User 代表进程用户名</p><p>CPU 程序占用CPU百分比</p><p>MEM 占用实际物理内存的百分比</p><p>YSZ 占用虚拟内存的大小（KB）单位， 下面那个也是</p><p>VSZ 占用物理内存的大小（KB）单位，</p><p>STAT 当前运行的状态 <strong>s代表休眠</strong>， <strong>r正在运行</strong>    <strong>Z 僵尸进程</strong>    <strong>T 被跟踪或者停止</strong> <strong>D短期等待</strong></p><p>start 进程的开始时间</p><p>TIME 占用的cpu时间</p><p>command 启动这个进程的名字（也就是进程）</p><p>TTY 终端的名称 ， 缩写</p></blockquote><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516152346986.png" alt="image-20230516152346986"></p><h2 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h2><ul><li>要求以全格式查看所有进程， 已经进程的父进程</li></ul><p><code>ps -ef</code></p><p><strong>-e显示所有进程 -f全格式</strong></p><p>ppid <strong>代表父进程</strong>， 父进程为0 代表没有父进程</p><p>sshd 父进程信息</p><p><code>ps -ef | more sshd</code></p><h2 id="终止进程"><a href="#终止进程" class="headerlink" title="终止进程"></a>终止进程</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516153714487.png" alt="image-20230516153714487"></p><p>killall会把子进程也给干掉</p><h3 id="四个实践"><a href="#四个实践" class="headerlink" title="四个实践"></a>四个实践</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816223.png" alt="image-20230516153837280"></p><ul><li>踢掉某一个用户 （注意不能用root的时候用<code>su -alan</code>,要直接新开一个shell来登录<ul><li>ps -aux | grep sshd</li></ul></li><li>终止远程登录服务<ul><li><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816286.png" alt="image-20230516155231085"></li><li>这个进程号代表xshell的进程</li><li>重新启动指令 &#x2F;bin&#x2F;systemctl start sshd.service</li></ul></li><li>终止多个gedit   <code>killall gedit</code></li><li>强制删除一个进程（因为有一些进程杀不掉） kill -9 xxxx</li></ul><h3 id="查看进程树pstree"><a href="#查看进程树pstree" class="headerlink" title="查看进程树pstree"></a>查看进程树pstree</h3><p>pstree 显示进程</p><ul><li><p>选项</p><ul><li><p>-p 显示进程号</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816791.png" alt="image-20230516155543174"></p></li><li><p>-u 显示进程的用户信息</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816804.png" alt="image-20230516155607212"></p></li></ul></li></ul><h2 id="服务进程"><a href="#服务进程" class="headerlink" title="服务进程"></a>服务进程</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516155900357.png" alt="image-20230516155900357"></p><ul><li>指令</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816991.png" alt="image-20230516155848640"></p><ul><li>etc&#x2F;init.d还可以通过该指令查看</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816171.png" alt="image-20230516160002842"></p><p>停止掉网络服务之后， 就不能够在连接xshell</p><p><code>service network stop</code>: 可以让xshell连接不到服务器</p><p><code>service network restart</code>： xshell连接上</p><h3 id="打开和关闭自启动"><a href="#打开和关闭自启动" class="headerlink" title="打开和关闭自启动"></a>打开和关闭自启动</h3><p><code>setup</code>打开这个管理界面</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516160327392.png" alt="image-20230516160327392"></p><ul><li><p>带上<code>*</code>号的会自启动</p></li><li><p>取消星号 摁下空格</p></li><li><p>tab移动光标来退出</p></li></ul><h3 id="运行级别"><a href="#运行级别" class="headerlink" title="运行级别"></a>运行级别</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816614.png" alt="image-20230516170223204"></p><ul><li>多数选择3</li></ul><h3 id="chkconfig指令"><a href="#chkconfig指令" class="headerlink" title="chkconfig指令"></a>chkconfig指令</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516170629907.png" alt="image-20230516170629907"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516171056890.png" alt="image-20230516171056890"></p><ul><li>输入chkconfig –level 3 network off 来关闭某个级别的网络服务</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516171101595.png" alt="image-20230516171101595"></p><p>敲击chkconfig –level 3 network on之后</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816319.png" alt="image-20230516171233340"></p><h2 id="systemctl指令（明天学）-后天（昨天游泳了）-swimmer"><a href="#systemctl指令（明天学）-后天（昨天游泳了）-swimmer" class="headerlink" title="systemctl指令（明天学）&#x2F; 后天（昨天游泳了）:swimmer:"></a>systemctl指令（明天学）&#x2F; 后天（昨天游泳了）:swimmer:</h2><ul><li>基本指令</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816440.png" alt="image-20230518154330934"></p><p> 它的指令管理的服务在<code>/usr/lib/systemd/system</code> 查看</p><ul><li>firewalld.service  <strong>防火墙的名称</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816061.png" alt="image-20230518154259349"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816074.png" alt="image-20230518154312007"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518154424204.png" alt="image-20230518154424204"></p><ul><li>systemctl [start | stop | restart | status] 服务名</li></ul><p>systemctl status firewalld 查看防火墙的状态</p><ul><li>如果想要将某个东西可以关闭或者开启自启动，要用enable或者disable</li></ul><h3 id="防火墙的原理"><a href="#防火墙的原理" class="headerlink" title="防火墙的原理"></a>防火墙的原理</h3><blockquote><p>防火墙可以理解为筛子，通过预先设置的大小，来过滤掉不符合尺寸的服务</p></blockquote><ul><li>没有防火墙的时候， 外面的东西就可以随便进入</li></ul><h3 id="防火墙"><a href="#防火墙" class="headerlink" title="防火墙"></a>防火墙</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816287.png" alt="image-20230724122724783"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816308.png" alt="image-20230724122807869"></p><ul><li><strong>打开或者关闭端口</strong>但是同时不关闭防火墙</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518160030406.png" alt="image-20230518160030406"></p><p> 查看协议 netstat -anp | more ,最左侧的数据就是协议</p><p>在修改端口状态之后，还有<strong>重新载入</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816001.png" alt="image-20230518160249899"></p><p><code>firewall-cmd --permanent --add-port=111/tcp</code> 注意这里的firewall结尾是没有d的</p><p><code>firewall-cmd --reload</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816016.png" alt="image-20230518160752435"></p><ul><li><p>查看防火墙是否存在</p><p>firewall-cmd –query-port&#x3D;111&#x2F;tcp</p></li><li><p>关闭之后</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518160902340.png" alt="image-20230518160902340"></p><blockquote><p>防火墙是 yes 才能够被访问到</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816233.png" alt="image-20230625112314948"></p><hr><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230625112324723.png" alt="image-20230625112324723"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816882.png" alt="image-20230625112425647"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230625112438681.png" alt="image-20230625112438681"></p><h2 id="动态监控进程"><a href="#动态监控进程" class="headerlink" title="动态监控进程"></a>动态监控进程</h2><p>top指令 ， 不同于<strong>ps</strong> ，他是<strong>动态的监控</strong></p><p>选项</p><p>-d 秒数 指定top命令每隔<strong>几秒钟更新</strong>，默认是3秒</p><p>-i 使得top不显示<strong>任何闲置或者僵死</strong>的进程</p><p>-p 通过指定监控进程id来仅仅<strong>监控某个进程的状态</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816940.png" alt="image-20230518161751226"></p><p>通过指定监控进程id</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518161610873.png" alt="image-20230518161610873"></p><blockquote><p>第一个数字代表系统时间</p><p>第二个数字代表运行时间</p><p>第三个代表使用的用户</p><p>第四个代表负载均衡（三个负载加起来，除以3 》 0.7说明电脑配置要升级一下了）</p></blockquote><ul><li>交互操作说明</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816192.png" alt="image-20230518162103794"></p><ul><li><p>监控xxx用户， 方法 ： <strong>先输入top 回车， 然后再输入<code>u</code>  在输入用户名，回车即可</strong></p><p>之前没有alan进程，但是我们又登录了alan就新增了一个进程</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518163032902.png" alt="image-20230518163032902"></p><ul><li><p>终止指定进程 方法 ： 输入top回车， 然后再输入k回车， 再输入要结束的id进程号</p></li><li><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518163231249.png" alt="image-20230518163231249"></p></li><li><p>再按下9， 强制删除（型号量）</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518163244507.png" alt="image-20230518163244507"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816101.png" alt="image-20230518163323100"></p><h2 id="netstat指令"><a href="#netstat指令" class="headerlink" title="netstat指令"></a>netstat指令</h2><p>输入 <code>netstat -an</code></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518163519203.png" alt="image-20230518163519203"></p><p>proto : 协议</p><p><code>netstat -anp</code> 会更加详细（会显示哪个进程再调用）</p><h3 id="local-address-and-foreign-address之间的关系"><a href="#local-address-and-foreign-address之间的关系" class="headerlink" title="local address and foreign address之间的关系"></a>local address and foreign address之间的关系</h3><p>local是linux的地址， foreign是windos的地址（这里要看本机的情况而定）</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518164139574.png" alt="image-20230518164139574"></p><ul><li>如果关闭连接之后</li><li>状态是先变成time-Wait 后面才会没有（因为tcp协议会暂时以为是只是网络不好）</li><li>查看sshd服务的信息 <code>netstat -anp | grep ssh</code></li></ul><h2 id="rpm管理"><a href="#rpm管理" class="headerlink" title="rpm管理"></a>rpm管理</h2><ul><li>介绍</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816493.png" alt="image-20230518164911922"></p><p><code>rpm -qa | grep xx</code> 查询已安装的rpm列表</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816500.png" alt="image-20230518165010229"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816515.png" alt="image-20230518165023300"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518165152222.png" alt="image-20230518165152222"></p><p><code>rpm -q firefox</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816052.png" alt="image-20230518165228534"></p><p><code>rpm -qi firefox</code></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518165319466.png" alt="image-20230518165319466"></p><p><code>rpm -al firefox</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816351.png" alt="image-20230518165424630"></p><ul><li><p><strong>查询文件所属的包</strong></p><p>rpm -qf &#x2F;etc&#x2F;passwd</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816588.png" alt="image-20230518165710126"></p><ul><li>删除rpm包</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816935.png" alt="image-20230518165807424"></p><p> 强制删除 <strong>$rpm -e –nodeps foo</strong>  因为存在其他软件，需要依赖于这个安装包</p><ul><li><p>安装rpm包</p><p>rpm -ivh RPM包全路径名称</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518170005403.png" alt="image-20230518170005403"></p></li></ul><h2 id="yum指令"><a href="#yum指令" class="headerlink" title="yum指令"></a>yum指令</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816342.png" alt="image-20230518170511733"></p><p><code>yum list | grep xx</code>查看yum服务器是否又需要安装的软件</p><p><code>yum install xxx</code>下载安装</p><h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><ul><li><p>tomcat 安装</p><p>步骤如下：</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816428.png" alt="image-20230519150409019"></p><p><code>[Apache Tomcat/8.5.88](http://192.168.202.138:8080/)</code></p><p>然后就可以访问了</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230519152248621.png" alt="image-20230519152248621"></p><ul><li>在apa &#x2F;&#x2F; 的webapps 的root中输入文件</li></ul><p><a href="http://192.168.202.138:8080/wjh.html">192.168.202.138:8080&#x2F;wjh.html</a></p><p><code>/opt/tomcat/apache-tomcat-8.5.88/bin</code>,它的路径为</p><ul><li>注意<strong>使用之前</strong>要先开启<code>./startup.sh</code></li></ul><h2 id="mysql安装"><a href="#mysql安装" class="headerlink" title="mysql安装"></a>mysql安装</h2><p>下载文件：</p><p><code>[wget](https://so.csdn.net/so/search?q=wget&amp;spm=1001.2101.3001.7020) http://dev.mysql.com/get/mysql-5.7.26-1.el7.x86_64.rpm-bundle.tar</code></p><p><a href="https://blog.csdn.net/Tommy__li/article/details/127080007">(65条消息) 韩顺平——linux下的mysql安装过程（完全按照视频流程来的）成功版_快乐本乐的博客-CSDN博客</a></p><p>可以参考以上链接安装</p><h2 id="shell编程快速入门"><a href="#shell编程快速入门" class="headerlink" title="shell编程快速入门"></a>shell编程快速入门</h2><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">echo &quot;hello,world~&quot;</span><br></pre></td></tr></table></figure><ul><li><p>直接写脚本名称。运行 但是得加上执行权限</p></li><li><p>使用sh + 脚本名称 就可以不需要加上权限x</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518171847762.png" alt="image-20230518171847762"></p></li></ul><h3 id="系统变量"><a href="#系统变量" class="headerlink" title="系统变量"></a>系统变量</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518171951253.png" alt="image-20230518171951253"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816189.png" alt="image-20230518172413937"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816638.png" alt="image-20230518172427077"></p><ul><li>vim : set nu <strong>可以查看行号</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816704.png" alt="image-20230518172611279"></p><h2 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816708.png" alt="image-20230519150025794"></p><p>定义环境变量要在&#x2F;etc&#x2F;profile文件中。</p><p><strong>export</strong>之后， 要<strong>source &#x2F;etc&#x2F;profile</strong>文件，才可以显示出来文件</p><ul><li><p>shell的补充</p><p>shell脚本的多行注释（字符串要独立写为一行）</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">开头打这个:&lt;&lt;!</span><br><span class="line"></span><br><span class="line">结尾打这个!</span><br></pre></td></tr></table></figure></li></ul><h2 id="位置参数变量"><a href="#位置参数变量" class="headerlink" title="位置参数变量"></a>位置参数变量</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816914.png" alt="image-20230519153407645"></p><p>在shcode文件夹中建立一个sh文件</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816385.png" alt="image-20230519153720474"></p><ul><li>输入部分指令之后，得到一下的结果</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230519153803222.png" alt="image-20230519153803222"></p><h3 id="预定义变量"><a href="#预定义变量" class="headerlink" title="预定义变量"></a>预定义变量</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816894.png" alt="image-20230519154100220"></p><p><code>$! 后台最后一个运行的进程的进程号结果为</code></p><h2 id="shell-运算符"><a href="#shell-运算符" class="headerlink" title="shell - 运算符"></a>shell - 运算符</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816043.png" alt="image-20230519154542299"></p><ul><li>案例一（还有没有开始弄）</li></ul><p><strong>案例二</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816618.png" alt="image-20230519160135767"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230519160124338.png" alt="image-20230519160124338"></p><h2 id="shell-判断"><a href="#shell-判断" class="headerlink" title="shell 判断"></a>shell 判断</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816399.png" alt="image-20230519160827175"></p><ul><li><p>过程</p><p><strong>中括号和语句之间要有空格</strong></p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816515.png" alt="image-20230519161029957"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816060.png" alt="image-20230519180822403"></p><ul><li>如果要写一个为空的判断， 中括号之间必要要有空格（空判断为false）</li><li>如果只在中括号中输入字符， 那么条件为真， 因为非空返回true</li></ul><h2 id="条件判断"><a href="#条件判断" class="headerlink" title="条件判断"></a>条件判断</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816241.png" alt="image-20230519181941468"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816641.png" alt="image-20230519182000153"></p><h2 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816797.png" alt="image-20230519182236352"></p><ul><li>需要注意的是，这里的其他输入的是<code>*</code>， 而不是<code>“*”</code>.</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">case $1 in</span><br><span class="line">&quot;1&quot;)</span><br><span class="line">echo &quot;1&quot;</span><br><span class="line">;;</span><br><span class="line">&quot;2&quot;)</span><br><span class="line">echo &quot;2&quot;</span><br><span class="line">;;</span><br><span class="line">*)</span><br><span class="line">echo &quot;5&quot;</span><br><span class="line">;;</span><br><span class="line">esac</span><br></pre></td></tr></table></figure><h2 id="for"><a href="#for" class="headerlink" title="for"></a>for</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816403.png" alt="image-20230519184205657"></p><h2 id="while"><a href="#while" class="headerlink" title="while"></a>while</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816662.png" alt="image-20230519184121248"></p><h2 id=""><a href="#" class="headerlink" title=""></a></h2><h2 id="read"><a href="#read" class="headerlink" title="read"></a>read</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816879.png" alt="image-20230520142137748"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816119.png" alt="image-20230520142443008"></p><ul><li>通过这种方式就可ui理解read函数</li></ul><h2 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816212.png" alt="image-20230520142603619"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816404.png" alt="image-20230520142731563"></p><ul><li>dirname</li></ul><h3 id="自定义函数"><a href="#自定义函数" class="headerlink" title="自定义函数"></a>自定义函数</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520142840366.png" alt="image-20230520142840366"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816275.png" alt="image-20230520143032557"></p><h2 id="综合实战"><a href="#综合实战" class="headerlink" title="综合实战"></a>综合实战</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816305.png" alt="image-20230520144832152"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816628.png" alt="image-20230520145411988"></p><ul><li>备份<strong>数据库</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816834.png" alt="image-20230520145718349"></p><ul><li>删除源文件， 然后打包</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520150317285.png" alt="image-20230520150317285"></p><p><strong>-exec继续执行   命令  ｛｝前面指令得到的内容   \；结尾符号</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520150506395.png" alt="image-20230520150506395"></p><h2 id="自己的实战复习"><a href="#自己的实战复习" class="headerlink" title="自己的实战复习"></a>自己的实战复习</h2><ul><li>时间</li></ul><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">!/bin/bash</span></span><br><span class="line">BACKUP=/root/shcode</span><br><span class="line">DATETIME=$(date +%Y-%m-%d_%H%M%S)</span><br><span class="line">touch $&#123;BACKUP&#125;/$&#123;DATETIME&#125;.sh</span><br></pre></td></tr></table></figure><ul><li>date代表当前的日期， 后面的代表时间分钟秒数，还有小时分钟和秒数。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816300.png" alt="image-20230520151707190"></p><h2 id="日志管理"><a href="#日志管理" class="headerlink" title="日志管理"></a>日志管理</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520153222128.png" alt="image-20230520153222128"></p><ul><li>重要的任务</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816678.png" alt="image-20230520153338241"></p><p><strong>lastlog 不要用cat查看， 直接打入<code>lastlog</code>就好了</strong></p><p><strong>ulmp 不要用cat 用who就好了</strong></p><h2 id="原理图"><a href="#原理图" class="headerlink" title="原理图"></a>原理图</h2><ul><li>再<code>/etc/rsyslog.conf</code>文件里面有一个后台程序，会自动的生成这些日志</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230520154102859.png" alt="image-20230520154102859"></p><ul><li><p>查看<strong>rsyslog</strong>是否存在</p><p><code>ps -aux | grep rsyslog</code></p><p><code>ps -aux | grep -v rsyslog</code> 反向匹配（选择不含有rsyslog的）</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816888.png" alt="image-20230521142403019"></p></li><li><p>查看所有进程状态</p><p><code>systemctl list-unit-files | grep &quot;rsyslog&quot;</code></p></li><li><p>日志类型</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816162.png" alt="image-20230520155917438"></p><ul><li><strong>日志级别</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816219.png" alt="image-20230520155326718"></p><p>一个日志的格式为<code>*.*</code>，第一个<code>*</code>代表<strong>日志的类型</strong>（具体参考第一张图片），第二个<code>*</code>代表日志级别</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816912.png" alt="image-20230520155710048"></p><ul><li>对于一个日志它可以这么查看， 第一个代表时间， 第二个代表用户，第三个代表程序或者服务，第四个发生的事件</li></ul><h2 id="日志管理服务（自定义）"><a href="#日志管理服务（自定义）" class="headerlink" title="日志管理服务（自定义）"></a>日志管理服务（自定义）</h2><ul><li><p>第一步 <code>vim  /etc/rsyslog.conf</code></p></li><li><p>第二步 然后找到一个最后的一个日志类型信息，打入<code>*.*</code>，然后输入<code>/etc/log/wjh.log</code></p></li><li><p>然后reboot</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816947.png" alt="image-20230521143904131"></p></li><li><p>当我输错秘密的时候， 就会产生一下的文件</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521144119246.png" alt="image-20230521144119246"></p><h2 id="日志轮替（把旧的日志文件改名等操作，换成新的）"><a href="#日志轮替（把旧的日志文件改名等操作，换成新的）" class="headerlink" title="日志轮替（把旧的日志文件改名等操作，换成新的）"></a>日志轮替（把旧的日志文件改名等操作，换成新的）</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521144413309.png" alt="image-20230521144413309"></p><p>这个文件规定了<strong>轮替的规则</strong></p><p>但是也可以单独的给某个日志指定策略</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816064.png" alt="image-20230521144541993"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816350.png" alt="image-20230521144818686"></p><p>logrotate。log文件的规则如上。</p><p><strong>自定义</strong>的方法</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816405.png" alt="image-20230521145049833"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521145234326.png" alt="image-20230521145234326"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521145502254.png" alt="image-20230521145502254"></p><p>我们再自定义日志文件的时候，可以把它写到<code>/etc/logrotate.d</code>的目录下。没必要一股儿脑的全部写到<code>/etc/logrotate.conf</code>配置文件中</p><p>我自己写了一个文件为<code>wjh.log</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">/var/log/wjh.log</span><br><span class="line">&#123;</span><br><span class="line">        missingok</span><br><span class="line">        daily</span><br><span class="line">        copytruncate</span><br><span class="line">        rotate 7</span><br><span class="line">        notifempty</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="日志轮换机制"><a href="#日志轮换机制" class="headerlink" title="日志轮换机制"></a>日志轮换机制</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816480.png" alt="image-20230521150100024"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521150212116.png" alt="image-20230521150212116"></p><p>它会又一个crond 的后台程序， 然后回用logrotate 然后对<code>/etc/logrotate.d</code></p><p>或者是<code>/etc/logrotate.conf</code>来处理</p><h2 id="内存日志"><a href="#内存日志" class="headerlink" title="内存日志"></a>内存日志</h2><ul><li>查看内存日志， 他是写入内存的，而不是文件</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230521150410432.png" alt="image-20230521150410432"></p><h2 id="linux定制（先过）"><a href="#linux定制（先过）" class="headerlink" title="linux定制（先过）"></a>linux定制（先过）</h2><p><strong>总的思路</strong></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816437.png" alt="image-20230521152307561"></p><h2 id="备份-实体机做快照"><a href="#备份-实体机做快照" class="headerlink" title="备份 - 实体机做快照"></a>备份 - 实体机做快照</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816680.png" alt="image-20230521153142100"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816171.png" alt="image-20230521153837239"></p><h3 id="restore-回复"><a href="#restore-回复" class="headerlink" title="restore 回复"></a>restore 回复</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061816831.png" alt="image-20230521154545118"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061817069.png" alt="image-20230521155219024"></p><h2 id="Nginx-命令"><a href="#Nginx-命令" class="headerlink" title="Nginx 命令"></a>Nginx 命令</h2><p>以下指令都是再sbin目录下运行</p><p><code>/usr/local/nginx/sbin</code></p><ul><li><p>.&#x2F;nginx -v ,显示nginx的版本</p></li><li><p>.&#x2F;nginx -t 检查语法</p></li><li><p>.&#x2F;nginx  启动nginx</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230723163209633.png" alt="image-20230723163209633"></p><ul><li>.&#x2F;nginx stop 停止服务</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230723163722696.png" alt="image-20230723163722696"></p><h2 id="lrzsz-指令"><a href="#lrzsz-指令" class="headerlink" title="lrzsz 指令"></a>lrzsz 指令</h2><p>这是可以用来传输文件的指令</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230724114528812.png" alt="image-20230724114528812"></p><ul><li>他会传输到当前的文件夹里面</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230724115418717.png" alt="image-20230724115418717"></p>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习 </tag>
            
            <tag> linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mysql</title>
      <link href="/2023/11/06/mysql/"/>
      <url>/2023/11/06/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="报告错误总结"><a href="#报告错误总结" class="headerlink" title="报告错误总结"></a>报告错误总结</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802384.png" alt="image-20230515190512074"></p><p>​              <strong>多半是用了查询语句， 但是执行用的是executeUpdate, 要使用executeQuery</strong></p><p>对于创建文件来说， 它返回的受到影响的行数为0， 所以这时候不要用以下语句来判断是否成功</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803727.png" alt="image-20230515190629844"></p><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>进入数据库的指令</p><p><code>mysql -u root -p</code> ，<strong>我们的密码是（空的）（window） 123456（linux）</strong></p><p>快捷键</p><ol><li>shift+ctrl +c</li><li>shift+ctrl+r</li></ol><ul><li>字符集的一些注意点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802388.png" alt="image-20221113225133612"></p><p><strong>基字符集</strong></p><ul><li>utf-8等等</li></ul><p><strong>这些是数据库排序规则</strong></p><ol><li>utf8_general_ci<code>不区分大小写</code></li><li>utf8_bin<code>区分大小写</code></li></ol><ul><li>删除数据库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803966.png" alt="image-20221113225638295"></p><p><strong>SELECT {*|字段列名}FROM 数据表名 WHERE 查询条件</strong></p><ul><li>你可以用 *来替代所有字段列名</li><li>或者自定义字段列名</li><li>|   代表或者</li></ul><p><strong>LIMIT + 数字</strong>表示打印的个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    customer_number</span><br><span class="line">FROM</span><br><span class="line">    orders</span><br><span class="line">GROUP BY customer_number</span><br><span class="line">ORDER BY COUNT(*) DESC</span><br><span class="line">LIMIT 1</span><br><span class="line"># z</span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802396.png" alt="image-20221113225844499"></p><ul><li>查询</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803549.png" alt="image-20221113231328062"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># t1代表的是表的名字，NAME是这个表定义的名称</span><br><span class="line">SELECT * FROM t1 WHERE NAME = &#x27;tom&#x27;</span><br><span class="line">s</span><br></pre></td></tr></table></figure><h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><p><code>SHOW DATABASES</code></p><ul><li>注意这里要写上s</li></ul><h2 id="显示数据库创建语句"><a href="#显示数据库创建语句" class="headerlink" title="显示数据库创建语句"></a>显示数据库创建语句</h2><p><code>SHOW CREATE DATABASE 名称</code></p><ul><li>名称尽量带上反引号，否则编译器容易误解</li><li>如果名称与关键字重合那就必须带上双引号</li></ul><p><code>SHOW CREATE DATABASE</code>  </p><h2 id="数据库删除语句（慎用）"><a href="#数据库删除语句（慎用）" class="headerlink" title="数据库删除语句（慎用）"></a>数据库删除语句（慎用）</h2><p><code>DROP DATABASE 名称</code></p><h2 id="数据库的备份"><a href="#数据库的备份" class="headerlink" title="数据库的备份"></a>数据库的备份</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802090.png" alt="image-20221115233305552"></p><ul><li>必须在dos操作系统下执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p -B wjh_db05 &gt; d:\\pr\\bak1.sql（会自动创建文件）</span><br></pre></td></tr></table></figure><ul><li>恢复数据(方法一)</li></ul><p>要先进入mysql命令行才能够执行</p><p><code>mysql -u root -p</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source d:\\bak1.sql</span><br></pre></td></tr></table></figure><ul><li>恢复方法二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接手动复制数据库的数据赋值到文件中,放到查询编译器中，执行</span><br></pre></td></tr></table></figure><h2 id="仅仅备份数据库中的表"><a href="#仅仅备份数据库中的表" class="headerlink" title="仅仅备份数据库中的表"></a>仅仅备份数据库中的表</h2><p><code>mysqldump -u root -p 数据库 然后表的名称</code></p><p><strong>一定要熟悉以上的语法</strong></p><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a><strong>创建表</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE table name&#123;</span><br><span class="line"> field1 datatype,</span><br><span class="line"> field2 datatype</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803580.png" alt="image-20221116090408023"></p><ol><li>character set 如果没有指定字符集，就以创建数据库的规则为准</li><li>collate 同上</li><li>engine 同上</li></ol><p>创建方式1： 用图形化创建表</p><p>创建方式2： 用指令创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line"> id INT,</span><br><span class="line"> `name` VARCHAR(255),</span><br><span class="line"> `password` VARCHAR(255),</span><br><span class="line"> `birthday` DATE)</span><br><span class="line"> CHARACTER SET utf8 COLLATE utf8_bin ENGINE INNODB</span><br></pre></td></tr></table></figure><ul><li><strong>后面的类型可以不写</strong></li></ul><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><ol><li>增加一个行叫做image</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">  ADD image VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">  AFTER RESUME</span><br></pre></td></tr></table></figure><ol start="2"><li>修改job列 使其长度为60</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">  MODIFY job VARCHAR(60) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">  AFTER RESUME</span><br></pre></td></tr></table></figure><ol start="3"><li>删除sex这一行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">  DROP sex</span><br></pre></td></tr></table></figure><ol start="4"><li>表名改成 employee</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE emp T10 employee （第一个是数据库，第二个是要修改的原表名称，第三个是修改后的表名</span><br></pre></td></tr></table></figure><ol start="5"><li>修改表的字符集为utf8</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employee CHARACTER SET utf8</span><br></pre></td></tr></table></figure><ol start="6"><li>列名name改成user_name</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employee </span><br><span class="line"> CHANGE `name` `user_name` VARCHAR(64) NOT NULL DEFAULT &#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="MySQL的常用数据类型"><a href="#MySQL的常用数据类型" class="headerlink" title="MySQL的常用数据类型"></a>MySQL的常用数据类型</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804568.png" alt="image-20221116092017426"></p><ol><li>数值类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802392.png" alt="image-20221116092456448"></p><ol start="2"><li>文本类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804791.png" alt="image-20221116092635015"></p><ol start="3"><li>二进制数据类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804504.png" alt="image-20221116092747860"></p><ol start="4"><li>日期类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802448.png" alt="image-20221116092833735"></p><p>​           datetime YYYY-MM-DD HH:MM:SS</p><ol start="5"><li><p>时间戳</p><p><strong>timestamp</strong></p></li></ol><h3 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><ol><li>使用规则：在能够满足需求的情况下，尽量选择小的数据类型</li><li>必须要在数据范围内的数据才能够被存入到数据中</li></ol><h4 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h4><ol><li>打印出来是以二进制的形式输出</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t05(num BIT(8));</span><br><span class="line">INSERT INTO t05 VALUES(254);</span><br><span class="line">SELECT* FROM t05; </span><br></pre></td></tr></table></figure><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t06(</span><br><span class="line"> nums1 FLOAT,</span><br><span class="line"> nums2 DOUBLE,</span><br><span class="line"> nums3 DECIMAL(30,20));</span><br><span class="line">INSERT INTO t06 VALUES(88.661616,88.6151515115151,88.5555555555555);</span><br><span class="line">SELECT *FROM t06;</span><br></pre></td></tr></table></figure><p>输出结果为</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804479.png" alt="image-20221116121209785"></p><ul><li><p>DECIMAL的注意事项</p></li><li><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221116121243929.png" alt="image-20221116121243929"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802145.png" alt="image-20221116121341610"></p></li></ul><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804303.png" alt="image-20221118120951402"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802185.png" alt="image-20221116121735280"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802381.png" alt="image-20221116121843219"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t10(</span><br><span class="line"> `name` VARCHAR(32766))CHARSET gbk;</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 在数据范围内</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t10(</span><br><span class="line"> `name` VARCHAR(32767))CHARSET gbk;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 超过了gbk格式的数据范围</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221116122220141.png" alt="image-20221116122220141"></p><p><strong>提示输入数值过大</strong></p><blockquote><p>问题1：为什么这里要减去三个字节</p><p>回答： 因为要用1~3的字节去记录大小</p><p>问题2：这里的size是代表字符还是字节</p><p>回答：是字符</p></blockquote><ul><li>细节</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804984.png" alt="image-20221118121154289"></p><p><strong>注意这里面的4是字符而不是字节</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t11(</span><br><span class="line"> `name` CHAR(4));</span><br><span class="line">INSERT INTO t11 VALUES(&#x27;abs&#x27;);</span><br><span class="line">SELECT * FROM t11;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802478.png" alt="image-20221118122106130"></p><ul><li>varchar是一个可变长的字符，不会造成空间的浪费，而CHAR只能根据最开始分配的空间来给内存</li><li>但是char的查询速度快于varchar，如果数据的定长的话，我们就尽量去使用char</li><li>如果varchar不够用，可以使用mediumtext或者longtext，或者可以写text</li></ul><p>总 结</p><ol><li>空间大小上： <code>char &gt; varchar</code></li><li>速度快慢上：<code>char &gt; varchar</code></li><li>如果文本过大就选择text</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802520.png" alt="image-20221118122643836"></p><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804913.png" alt="image-20221119143143769"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t14(</span><br><span class="line"> birthday DATE , -- 生日</span><br><span class="line"> jobtime DATETIME ,-- 记录年月日 时分秒</span><br><span class="line"> login_time TIMESTAMP </span><br><span class="line">  NOT NULL DEFAULT CURRENT_TIMESTAMP </span><br><span class="line">  ON UPDATE CURRENT_TIMESTAMP);-- 登录时间</span><br><span class="line">SELECT *FROM t14;</span><br><span class="line">INSERT INTO t14(birthday,jobtime)</span><br><span class="line"> VALUES(&#x27;2022-11-11&#x27;,&#x27;2022-11-11 10:10:10&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804550.png" alt="image-20221119143948153"></p><p><strong>不用输入时间自动跳出来登陆时间</strong></p><p>需要输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `emp`(</span><br><span class="line"> id INT,</span><br><span class="line"> `name` VARCHAR(32),</span><br><span class="line"> sex CHAR(1),</span><br><span class="line"> birthday DATE,</span><br><span class="line"> entry_date DATETIME,</span><br><span class="line"> job VARCHAR(32),</span><br><span class="line"> salary DOUBLE,</span><br><span class="line"> `resume` TEXT) CHARSET utf8 COLLATE utf8_bin ENGINE INNODB;</span><br><span class="line"># 添加的时间</span><br><span class="line">INSERT INTO `emp`</span><br><span class="line"> VALUES(100,&#x27;小妖怪&#x27;,&#x27;男&#x27;,&#x27;2000-11-11&#x27;,</span><br><span class="line"> &#x27;2010-11-10 11:11:11&#x27;,&#x27;巡山的&#x27;,3000,&#x27;大王叫我来巡山&#x27;);</span><br><span class="line">SELECT *FROM `emp`</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221119144705934.png" alt="image-20221119144705934"></p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="insert-语句"><a href="#insert-语句" class="headerlink" title="insert 语句"></a>insert 语句</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221119164904712.png" alt="image-20221119164904712"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 注意写上字符集以及校对规则和引擎</span><br><span class="line">CREATE TABLE `good`(</span><br><span class="line"> id INT,</span><br><span class="line"> goods_name VARCHAR(15),</span><br><span class="line"> price DOUBLE)CHARSET utf8 COLLATE utf8_bin ENGINE INNODB;</span><br><span class="line">INSERT INTO `good` (id,goods_name,price)</span><br><span class="line"> VALUES(10,&#x27;华为手机&#x27;,2000);</span><br><span class="line">INSERT INTO `good` (id,goods_name,price)</span><br><span class="line"> VALUES(20,&#x27;苹果手机&#x27;,3000);</span><br><span class="line">SELECT* FROM good;</span><br><span class="line"></span><br><span class="line">#上诉的insert语句也可以简化写为（但是必须和你写的表的顺序一致）</span><br><span class="line">INSERT INTO `good` </span><br><span class="line"> VALUES(20,&#x27;苹果手机&#x27;,3000);</span><br></pre></td></tr></table></figure><ul><li>注意点</li></ul><ol><li><blockquote><p>插入的数据应当和字段类型相同。</p></blockquote></li></ol><p>错误示范：</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221119170335962.png" alt="image-20221119170335962"></p><p>同时我们用单引号括起来的是一个数字，那么它会进行转型，这种时候就是正确的</p><ol start="2"><li><blockquote><p>数据的长度应该在列的范围内</p></blockquote></li></ol><p>错误示范：</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803671.png" alt="image-20221119170536712"></p><ol start="3"><li><blockquote><p>在values中列出的数据位置必须与被加入的列的排列位置相对应</p></blockquote></li><li><blockquote><p>字符和日期形数据应该包含在单引号中</p></blockquote></li><li><blockquote><p>列可以插入空值（前提是该字段允许为空），insert into table value (null)</p></blockquote></li><li><blockquote><p> insert into tab_name(列名..)</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `goods` v（填入内容） （填入内容） （填入内容）</span><br></pre></td></tr></table></figure><ol start="7"><li><blockquote><p>如果是给表中的所有字段添加数据，可以不写前面的字段名称,但是不能少一条字段</p></blockquote></li><li><blockquote><p>默认值，当不给某个字段值时，如果有默认值就会添加默认值，否则报错</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 这个时候就是可以的</span><br><span class="line">CREATE TABLE &#x27;goods&#x27;(</span><br><span class="line">  id INT,</span><br><span class="line">     &#x27;label&#x27; VARCHAR(10),</span><br><span class="line">     &#x27;price&#x27; DOUBLE </span><br><span class="line"> )</span><br><span class="line">INSERT INTO `goods`(id,goods_name)</span><br><span class="line">  VALUES(80,&#x27;格力手机&#x27;);</span><br><span class="line"># 当表的创建格式为以下的情况的时候,编译器就会报错</span><br><span class="line">CREATE TABLE &#x27;goods&#x27;(</span><br><span class="line">  id INT,</span><br><span class="line">     &#x27;label&#x27; VARCHAR(10),</span><br><span class="line">     &#x27;price&#x27; DOUBLE NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h3 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from xxx(the name of list) where user_name = &quot;yyy&quot;</span><br><span class="line"># 从表名为 xxx 的表中 删除掉名字为 yyy 的 的那一列</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 删除表中的名称为yy的user_name</span><br><span class="line">DELETE FROM xxx</span><br><span class="line">  WHERE user_name = &#x27;yyy&#x27;;</span><br><span class="line"># 删除表中为user_name的数据</span><br><span class="line">DELETE FROM XXX</span><br><span class="line"></span><br><span class="line"># 删除表中邮箱相同的,并且只保留它的id最小值</span><br><span class="line">DELETE p1 from </span><br><span class="line">        Person p1,Person p2</span><br><span class="line">        where </span><br><span class="line">        p1.email=p2.email AND p1.id&gt;p2.id</span><br><span class="line">        </span><br><span class="line">DELETE </span><br><span class="line">FROM</span><br><span class="line"> Person </span><br><span class="line">WHERE</span><br><span class="line"> id NOT IN (SELECT * FROM ( SELECT min( id ) AS id FROM Person GROUP BY email ) t)</span><br><span class="line">    </span><br><span class="line"># delete不能删除某一列的数据</span><br><span class="line"># 如果需要删掉某一行的一个字段，我们需要利用update进行替换</span><br><span class="line">UPDATE employee SET job = &#x27;&#x27; WHERE user_name = &#x27;老妖怪&#x27;</span><br><span class="line"></span><br><span class="line"># 删除表是用drop而不是delete</span><br></pre></td></tr></table></figure><ul><li>因为delete语句不能删除某一列的值（可使用update 设为null)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE xxx(表名称) SET x = &#x27;&#x27; WHERE user_name = &#x27;老妖怪&#x27; </span><br></pre></td></tr></table></figure><h3 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h3><ol><li>将所有的员工薪水修改为5000</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATuE employee SET salary = 5000</span><br></pre></td></tr></table></figure><ol start="2"><li>将姓名为小妖怪的员工修改为3000</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employee set salary = 3000 where user_name = &#x27;小妖怪&#x27; </span><br></pre></td></tr></table></figure><ol start="3"><li>将老妖怪的薪水增加3000</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employee set salary = salary + 3000 where user_name = &#x27;老妖怪&#x27; </span><br></pre></td></tr></table></figure><ul><li>set可以根据需要修改多个字段的值</li></ul><p><code>set xxx = xxxx yyy = yyyy</code></p><h4 id="CASE语句"><a href="#CASE语句" class="headerlink" title="CASE语句"></a>CASE语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 将性别为男的改成女的，女的改成男的</span><br><span class="line">UPDATE salary</span><br><span class="line">SET</span><br><span class="line">    sex = CASE sex</span><br><span class="line">        WHEN &#x27;m&#x27; THEN &#x27;f&#x27;</span><br><span class="line">        ELSE &#x27;m&#x27;</span><br><span class="line">    END;</span><br></pre></td></tr></table></figure><h3 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT  *FROM `student`;</span><br><span class="line"># 去重查询（必须查出来的每一个列都相同）</span><br><span class="line">select DISTINCT english from student</span><br><span class="line"></span><br><span class="line">#如果两个人的英语成select DISTINCT english from student绩相同但是名字不一样</span><br><span class="line">select DISTINCT english name from student</span><br><span class="line">#这个时候，就不会去重</span><br></pre></td></tr></table></figure><h4 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name` (chinese+math+english)from student</span><br><span class="line"># 计算学术三个科目的总分</span><br><span class="line">SELECT `name` as &#x27;名字&#x27;,(chinese+math+english) as &#x27;总分&#x27;</span><br><span class="line">from student</span><br><span class="line"># as可以替换名字</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>   <strong>自己到力扣做题就懂了</strong></p><ul><li><strong>如果想要离散的空间查询需要用到IN</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from student where math in(89,90,91)</span><br><span class="line"># 代表着查询数学成绩为 89, 90 ,91的学生</span><br></pre></td></tr></table></figure><ul><li>模糊匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select *from student where math like &#x27;韩%&#x27;</span><br><span class="line"># 一定要加上%</span><br><span class="line"></span><br><span class="line"># 需要注意的是这里没有讲清楚实际上 :</span><br><span class="line">#如果这里写的是 %韩% 的话那么代表查找存在韩的数据</span><br><span class="line"># 如果是韩% 代表查找以韩开头的数据</span><br><span class="line"># 如果是%韩 , 代表查找 以韩为结尾d</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803693.png" alt="image-20221120094701115"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select * from student </span><br><span class="line">  order by math(默认升序)</span><br><span class="line">select * from student </span><br><span class="line">  order by math asc(升序) // 默认为升序</span><br><span class="line">select * from student </span><br><span class="line">  order by math desc(减序)</span><br><span class="line"></span><br><span class="line"># 排序的组合操作</span><br><span class="line">#如果我们想要部门按照部门号升序，然后按照工资降序</span><br><span class="line">select *from emp </span><br><span class="line"> order by deptno asc, sal desc </span><br></pre></td></tr></table></figure><h2 id="函数-与select配合的"><a href="#函数-与select配合的" class="headerlink" title="函数(与select配合的)"></a>函数(与select配合的)</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><blockquote><p>查询的结果有多少行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*)from student where math&gt;90</span><br><span class="line"># 统计数学大于90的学生</span><br></pre></td></tr></table></figure><ul><li>count(*) 返回满足条件的行数</li><li>count(列):统计满足条件某列有多少个，<strong>但是会排除为null的情况</strong></li></ul><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><blockquote><p>返回满足where条件的行的和 一般使用在数值列中（注意他只能对数值起作用）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select sum(math) from student;</span><br><span class="line"># 统计一个班所有人的数学总成绩</span><br></pre></td></tr></table></figure><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><blockquote><p>求平均值，同上对数值起作用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(math) from student</span><br></pre></td></tr></table></figure><h3 id="max-min"><a href="#max-min" class="headerlink" title="max&#x2F;min"></a>max&#x2F;min</h3><blockquote><p>求最大值或者最小值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select max(math) from student</span><br><span class="line">select min(math) from student</span><br></pre></td></tr></table></figure><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221120100654899.png" alt="image-20221120100654899"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal),max(sal), deptno from employee group by deptno</span><br><span class="line"># 按照部门分组查询平均工资和最高工资</span><br><span class="line"># 需要注意是，一个部门有很多人，每个人的工资不一样</span><br></pre></td></tr></table></figure><p><strong>最后的输出结果为</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121194906997.png" alt="image-20221121194906997"></p><h3 id="having（和group共同使用）"><a href="#having（和group共同使用）" class="headerlink" title="having（和group共同使用）"></a>having（和group共同使用）</h3><p>相当于where条件筛选，他和group是好兄弟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal) as avg_sal,deptno</span><br><span class="line"> from emp group by deptno</span><br><span class="line"> having avg_sal&lt;3000</span><br><span class="line"># 筛选平均工资小于3000的部门9</span><br><span class="line"></span><br><span class="line"># 筛选至少合作过三次的导演</span><br><span class="line">SELECT actor_id, director_id FROM ActorDirector </span><br><span class="line">    GROUP BY actor_id, director_id</span><br><span class="line">    HAVING COUNT(*) &gt;= 3;</span><br><span class="line"># GROUP BY 就是分组，这样子写的话，就是把一对导演和演员分成一组</span><br></pre></td></tr></table></figure><h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803507.png" alt="image-20221121195045357"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select charset(ename) from emp;</span><br><span class="line">返回charset（name）的表</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(ename,&#x27;工作是&#x27;,job) from emp;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121195537204.png" alt="image-20221121195537204"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803104.png" alt="image-20221121195659676"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803107.png" alt="image-20221121200009584"></p><ul><li>练习 以首字母小写的方式显示所有员工emp表的姓名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 方法一</span><br><span class="line">select CONCAT(Lcase(SUBSTRING(ename,1,1)),SUBSTRING(ename,2)) as new_name</span><br><span class="line"> from emp;</span><br><span class="line">## 注意这里的下标从0开始</span><br><span class="line"></span><br><span class="line"># 方法二</span><br><span class="line">select concat(lcase(Left(ename,1)),substring(ename,2)) as new_name;</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803112.png" alt="image-20221121200659389"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121200914705.png" alt="image-20221121200914705"></p><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803736.png" alt="image-20221121201227293"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mes(</span><br><span class="line"> id INT,</span><br><span class="line"> content VARCHAR(30),</span><br><span class="line"> send_time DATETIME);</span><br><span class="line">INSERT INTO mes</span><br><span class="line"> VALUES(1,&#x27;北京新闻&#x27;,CURRENT_TIMESTAMP);</span><br><span class="line">SELECT* FROM mes;</span><br><span class="line"></span><br><span class="line"># 计算时间差的时候其实除了使用DATEDIFF还可以 使用between xxx and xxx（时间用&#x27;&#x27;b）</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121201726906.png" alt="image-20221121201726906"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803151.png" alt="image-20221121201840084"></p><ul><li>请写出以上的所有mysql语句</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121202025586.png" alt="image-20221121202025586"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#如果改成20min之内就是</span><br><span class="line">select * from mes</span><br><span class="line">where date_add(send_time,INTERVAL 20 MINUTE)&gt;=NOW();</span><br></pre></td></tr></table></figure><ul><li>year&#x2F;month&#x2F;date（）</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121202816540.png" alt="image-20221121202816540"></p><p><strong>分别返回年&#x2F;月&#x2F;日</strong></p><ul><li>unix_timestamp返回的是1970-1-1到现在的<strong>秒数</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select unix_timestamp(now()) from xxx</span><br></pre></td></tr></table></figure><ul><li>from_unixtime</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># &#x27;%Y-%m-%d&#x27;(年月日的格式)</span><br><span class="line">select from_unixtime(1618483484,%Y-%m-%d) from dual</span><br><span class="line"># &#x27;%Y-%m-%d %H:%i:%s&#x27;(int转换位年月日的格式)</span><br></pre></td></tr></table></figure><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803540.png" alt="image-20221121203640271"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select user() from dual;</span><br><span class="line"># 返回的是用户ip地址</span><br><span class="line">select database()</span><br><span class="line"># 查询当前使用数据库名称</span><br><span class="line">select MD5(&#x27;HSP&#x27;)from dual </span><br><span class="line"># 在数据库中存放的是加密后的密码（长度是32位）</span><br><span class="line">select password(&#x27;hsp&#x27;)from dual</span><br><span class="line"># 加密函数，mysql数据库的用户密码就是password函数加密</span><br></pre></td></tr></table></figure><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803664.png" alt="image-20221121204649874"></p><p><strong>多分支的任务需求</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121205703208.png" alt="image-20221121205703208"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 如果第一个exp1为真就返回exp2，否则返回expr3</span><br><span class="line">select if(TRUE,&#x27;北京&#x27;,&#x27;上海&#x27;)from dual;</span><br><span class="line">#输出                         北京</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 看上表规则</span><br><span class="line">select if(NULL,&#x27;北京&#x27;，&#x27;上海&#x27;)</span><br><span class="line">#输出                         上海</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多分支</span><br><span class="line"># 判断是否为空要使用is null/is not null</span><br><span class="line">select  ename  IF(comm is null，0.0,comm);</span><br><span class="line">#或者写出</span><br><span class="line">select  ename  IFNULL(comm，0.0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#多分支</span><br><span class="line">select ename, (select case</span><br><span class="line">               when job = &#x27;cherk&#x27; then &#x27;职员&#x27;</span><br><span class="line">               when job = &#x27;manager&#x27; then &#x27;经理&#x27;</span><br><span class="line">               when job = &#x27;salesman&#x27; then &#x27;销售人员&#x27;</span><br><span class="line">               when job end) as &#x27;job&#x27;</span><br><span class="line">               from emp</span><br></pre></td></tr></table></figure><ul><li>模糊匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select ename from list ename Like &quot;__0%&quot;</span><br><span class="line"># 查询ename第三个数字是0的表</span><br><span class="line">select ename from list ename like &quot;s%&quot;</span><br><span class="line"># 查询ename以s作为开头的ename</span><br></pre></td></tr></table></figure><ul><li>分页查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># grammer select * from * limit xxxx</span><br><span class="line">select *from emp order by empno</span><br><span class="line">select * from emp</span><br><span class="line">  order by empno </span><br><span class="line">  limit 0, 3;</span><br><span class="line">select * from emp </span><br><span class="line">  order by empno </span><br><span class="line">  limit 3, 3;</span><br><span class="line">select * from emp</span><br><span class="line">  order by empno</span><br><span class="line">  limit 6,</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li><p>多表查询的时候，<strong>就是列拼接在一起，然后相乘得到行数</strong></p></li><li><p>当有<strong>两个表相同的字段</strong>我们需要做出区分</p></li><li><p>自连接</p></li></ul><p><strong>问题</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221125184303704.png" alt="image-20221125184303704"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 显示员工和他上级的名字</span><br><span class="line"># 把同一张表当作两张表使用</span><br><span class="line"># 需要给表取别名，表名，表别名</span><br><span class="line"># 列名不明确，可以指定列的别名</span><br><span class="line">select worker.ename as &#x27;职员表&#x27;,boss.ename As &#x27;上级表&#x27;</span><br><span class="line">    from emp worker, emp boss# 注意这个可以不用加上as </span><br><span class="line">                where worker.mgr = boss.empno;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mysql子查询"><a href="#mysql子查询" class="headerlink" title="mysql子查询"></a>mysql子查询</h2><h3 id="单行和多行的子查询"><a href="#单行和多行的子查询" class="headerlink" title="单行和多行的子查询"></a>单行和多行的子查询</h3><ul><li>单行子查询：返回单行</li><li>多行子查询：返回多行<ul><li>all ： <strong>所有的条件</strong></li><li>any： <strong>存在一个条件</strong></li></ul></li></ul><p><strong>问题</strong>1</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803218.png" alt="image-20221125185534231"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 子条件</span><br><span class="line">select deptno </span><br><span class="line">  from emp</span><br><span class="line">  where ename = &#x27;SMITH&#x27;</span><br><span class="line"># 然后把他嵌套进去</span><br><span class="line">select* from emp </span><br><span class="line">  where deptno =(</span><br><span class="line">            select deptno </span><br><span class="line">   from emp</span><br><span class="line">   where ename = &#x27;SMITH&#x27;</span><br><span class="line">        ) </span><br></pre></td></tr></table></figure><p><strong>问题2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 薪水大于所有查询子条件的元素 </span><br><span class="line">select ename,sal,deptno </span><br><span class="line">  from emp</span><br><span class="line">  where sal&gt;ALL(</span><br><span class="line">         select sal</span><br><span class="line">              from emp</span><br><span class="line">           where deptno = 30</span><br><span class="line">        )</span><br><span class="line"> # 方法二</span><br><span class="line">select ename,sal,deptno </span><br><span class="line">  from emp</span><br><span class="line">  where sal(</span><br><span class="line">         select MAX(sal)</span><br><span class="line">              from emp</span><br><span class="line">           where deptno = 30</span><br><span class="line">        )</span><br><span class="line">#  求薪水最小的就反过来</span><br></pre></td></tr></table></figure><ul><li>any</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select sal , empno </span><br><span class="line"> from emp</span><br><span class="line"> where sal &gt; any(</span><br><span class="line">     select sal </span><br><span class="line">         from emp</span><br><span class="line">         where dep = 30;</span><br><span class="line">    )</span><br><span class="line">当前元素比dep= 30的任一一个元素的val要大</span><br><span class="line">select sal ,empno</span><br><span class="line"> from emp</span><br><span class="line"> where sal &gt; (</span><br><span class="line">     select min(sal) </span><br><span class="line">         from emp</span><br><span class="line">         where dep = 30;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="子查询的临时表"><a href="#子查询的临时表" class="headerlink" title="子查询的临时表"></a>子查询的临时表</h3><p>任务：我们需要查询每一个商品类别中最高价格的商品信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 每一个商品种类最高价格的查询</span><br><span class="line">select cat_id, MAX(shop_price)</span><br><span class="line">  from ecs_goods</span><br><span class="line">  Group BY cat_id</span><br><span class="line"># 实现</span><br><span class="line">select goods_id ecs_goods.cat_id, goods_name,shop_price</span><br><span class="line">  from(</span><br><span class="line">          select cat_id ,MAX(shop_price) as max_price</span><br><span class="line">             from ecs_goods</span><br><span class="line">             group by cat_id</span><br><span class="line">        )temp# 这个就被叫做临时表</span><br><span class="line">        , ecs_goods</span><br><span class="line">        where temp.cat_id = ecs_goods.cat_id</span><br><span class="line">        AND temp.max_price = ecs_goods.shop_price </span><br><span class="line"></span><br><span class="line"># 从员工表中找到一个工资比经理高的员工</span><br><span class="line"> select a.Name as Employee </span><br><span class="line"> from Employee a, (select Salary,Id from Employee) b</span><br><span class="line"> where a.ManagerId=b.Id and a.Salary &gt; b.Salary </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> # 注意在写完临时表后必须给临时表命名命名格式是 在括号后面直接写 表的名字，或者是写上as 表名</span><br><span class="line"> select  k.c as employee </span><br><span class="line">                from (</span><br><span class="line">                    select a.name as c from employee as a,employee as b </span><br><span class="line">                    where a.managerId = b.id and a.salary&gt;b.salary</span><br><span class="line">                )as `k`</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#子表</span><br><span class="line">select deptno, job</span><br><span class="line">  from emp</span><br><span class="line">  where ename = &#x27;SMITH&#x27;</span><br><span class="line">select *from emp </span><br><span class="line">  //类似于python的列表， 可以进行多段匹配</span><br><span class="line">  where(deptno,job)=(</span><br><span class="line">            select deptno, job</span><br><span class="line">   from emp</span><br><span class="line">   where ename = &#x27;SMITH&#x27;</span><br><span class="line">        )AND ename !=&#x27;SMITH&#x27;;</span><br></pre></td></tr></table></figure><ul><li>练习一:<strong>查找每一个部门工资高于本部门平均工资的人的资料</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 找到每一个部门,的平均工资</span><br><span class="line">select deptno AVG(sal) as avg_sal</span><br><span class="line">  from emp</span><br><span class="line">  group by deptno</span><br><span class="line">  </span><br><span class="line">#  将该表作为一个临时表</span><br><span class="line">select ename, sal, temp.avg_sal,emp.deptno from emp,(</span><br><span class="line">  select deptno AVG(sal) as avg_sal</span><br><span class="line">  from emp</span><br><span class="line">  group by deptno </span><br><span class="line">  )temp where emp.deptno = temp.deptno AND emp.sal&gt;temp.avg_sal;</span><br></pre></td></tr></table></figure><ul><li>练习二: <strong>查找每一个部门工资最高的人的详细资料</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 弄出一个子查询(每一个部门最高工资的人的)</span><br><span class="line">select dentno, MAX(sal) as max_sal</span><br><span class="line">      from emp</span><br><span class="line">                        group by deptno</span><br><span class="line">                      </span><br><span class="line">                      </span><br><span class="line"># 然后当作临时表进行查询</span><br><span class="line">select ename,emp.deptno,max_sal</span><br><span class="line">   from emp ,(</span><br><span class="line">                select dentno, MAX(sal) as max_sal</span><br><span class="line">                from emp</span><br><span class="line">                group by deptno</span><br><span class="line">            )temp where emp.deptno = temp.deptno AND emp.sal = temp.max_sal</span><br></pre></td></tr></table></figure><ul><li>练习三: <strong>查询每一个部门的信息,包括部门名,编号,地址和人员数量</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--1. 部门名 来自 dept表</span><br><span class="line">select count(*),deptno</span><br><span class="line">  from emp</span><br><span class="line">  group by deptno</span><br><span class="line"></span><br><span class="line">select dname, dept, deptno, loc ,tmp.per_num as&#x27;人数&#x27;</span><br><span class="line">  from  (</span><br><span class="line">            select count(*) as per_num,deptno</span><br><span class="line">            from emp</span><br><span class="line">            group by deptno</span><br><span class="line">        ) tmp, dept</span><br><span class="line">        where tmp.deptno = dept.deptno</span><br><span class="line"></span><br><span class="line"># select 也可以改写为tmp.*,这样代表tmp的所有字段</span><br><span class="line">select tmp.*, dname,loc</span><br><span class="line">  from dept,(</span><br><span class="line">            select count(*) as per_num,deptno</span><br><span class="line">            from emp</span><br><span class="line">            group by deptno</span><br><span class="line">        ) tmp</span><br><span class="line">        where tmp.deptno = dept.deptno</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h2 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h2><p>目的:</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221126081534874.png" alt="image-20221126081534874"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 复制一个表的数据到另一个表</span><br><span class="line">insert into my_tab01</span><br><span class="line">  (id,`name`,sal,job,deptno)</span><br><span class="line">  select empno,ename,sal,job,deptno from emp&#x27;</span><br><span class="line"># 自我复制</span><br><span class="line">insert into my_tab02</span><br><span class="line">  select * from my_tab02</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>题目如何去掉一个表的重复记录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> # 把表的结构复制到emp表中,这样就不用重复打那么多字了(注意是表的结构)</span><br><span class="line"> create table my_tab02 like emp;</span><br><span class="line"> </span><br><span class="line"># 构造重复行 </span><br><span class="line"> insert into my_tab02</span><br><span class="line">  select * from my_tab02</span><br><span class="line"> # 现在就有很多重复的行,那如何去重呢</span><br><span class="line"> </span><br><span class="line"> # 方法就是创建一个临时表,</span><br><span class="line"> # 挑选这个表的distinct * from,插入到另一个表中</span><br><span class="line"> # 然后删除原表,新表改成原表的名字</span><br><span class="line"> </span><br><span class="line">create table my_tmp like my_tab02</span><br><span class="line">insert into my_tmp </span><br><span class="line">  select distinct * from my_tab02;</span><br><span class="line">delect from my_tab02;</span><br><span class="line">insert into my_tab02 </span><br><span class="line">   select * from my_tmp;</span><br><span class="line">   </span><br><span class="line"># 或者我们也可以写成这样，来修改名字</span><br><span class="line"># [old] rename to [new]</span><br><span class="line">alter table my_tab02 rename to my_tmp</span><br></pre></td></tr></table></figure><h2 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h2><ul><li><code>union all将两个查询结果合并，不会去重</code></li><li><code>union就是两个结 果合并，回去重，事实上很像or</code></li></ul><h2 id="表的外连接"><a href="#表的外连接" class="headerlink" title="表的外连接"></a>表的外连接</h2><ul><li>如果要搞一个表的相同两个集合</li></ul><h4 id="表的自连接"><a href="#表的自连接" class="headerlink" title="表的自连接"></a>表的自连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">method1 :</span><br><span class="line">select </span><br><span class="line"> *</span><br><span class="line"> from emp.worker , emp.boss</span><br><span class="line"> where worker.mg</span><br><span class="line">SELECT</span><br><span class="line">     a.NAME AS Employee</span><br><span class="line">FROM Employee AS a JOIN Employee AS b</span><br><span class="line">     ON a.ManagerId = b.Id</span><br><span class="line">     AND a.Salary &gt; b.Salary</span><br><span class="line">相当于from两个表连接在一起      </span><br><span class="line">     </span><br></pre></td></tr></table></figure><p>问题<img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221127080047582.png" alt="image-20221127080047582"></p><p>发现两个表合并不能很好的实现</p><p>引出我们的外连接</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221127080338884.png"></p><p>引出我们的外连接问题<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803063.png" alt="image-20221127080727053"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 即便左表没有和右表连接的地方，也会出现左表,且左表为null</span><br><span class="line">select &#x27;name&#x27; stu.id,</span><br><span class="line">  from stu LEFT JOIN exam</span><br><span class="line">  ON stu.i d = exam.id</span><br><span class="line">  </span><br><span class="line"># 左连接如下写法</span><br><span class="line">select &#x27;name&#x27; stu.id,</span><br><span class="line">  from stu RIGHT JOIN exam</span><br><span class="line">  ON stu.id = exam.id</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221127080923568.png" alt="image-20221127080923568"></p><p>问题<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803169.png" alt="image-20221127081333443"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select eptno.id,ename,work </span><br><span class="line">  from company left join emp</span><br><span class="line">  ON where company.id = emp.id</span><br></pre></td></tr></table></figure><h2 id="mysql的约束"><a href="#mysql的约束" class="headerlink" title="mysql的约束"></a>mysql的约束</h2><ul><li><p>查看约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#使用dec+表名</span><br><span class="line">dec t17</span><br><span class="line"># 就会显示约束的情况</span><br></pre></td></tr></table></figure></li></ul><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><ul><li>主键列的值是不可以重复的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在字段后面添加primary key就是把一个字段变成主键</span><br><span class="line">create table t17(</span><br><span class="line">  id int primary key,</span><br><span class="line">  `name` varchar(32),</span><br><span class="line">  emain varchar(32));</span><br><span class="line">        </span><br></pre></td></tr></table></figure><ul><li>主键插入的元素不可以为<strong>null</strong></li><li>一个表只能有一个主键，但可以<strong>复合主键</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 只有当id和name都和表中的一个数据相同的时候，才不能插入</span><br><span class="line">create table t17(</span><br><span class="line">  id int,</span><br><span class="line">  `name` varchar(32),</span><br><span class="line">  emain varchar(32)</span><br><span class="line">  primary key(id,`name`));--这就是复合主键</span><br></pre></td></tr></table></figure><ul><li>定义主键的方式二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table t19(</span><br><span class="line">  id int,</span><br><span class="line">     `name` varchar(32),</span><br><span class="line">     emain varchar(32),</span><br><span class="line">     primary key(`name`)--把定义写在后面</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table t19(</span><br><span class="line">    id int unique,--id不可以重复</span><br><span class="line">    `name` varchar(32),</span><br><span class="line">    ename varchar(32),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>如果unique没有增加not null约束，那么你就可以添加null的元素，<strong>而且null可以填写多个</strong>（当然非null不能填写多个）</li><li>一张表中可以有<strong>多个unique字段</strong></li><li>primary key和unique的区别在于，<strong>primary key在一个表中只能存在一次，但是unique可以有多个</strong>，其他的特征都是相同的</li></ul><h2 id="表的外键"><a href="#表的外键" class="headerlink" title="表的外键"></a>表的外键</h2><blockquote><p>如果我们要求每一个学生所在的班级编号是存在的班级编号，我们就可以把class_id做成外键约束</p></blockquote><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221129233418189.png" alt="image-20221129233418189"></p><ul><li>相互约束的表格，必须得先删除左边的表，才能删除右边的表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 创建主表</span><br><span class="line">CREATE TABLE my_class(</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">     `name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;);</span><br><span class="line"> </span><br><span class="line"># 创建从表</span><br><span class="line">CREATE TABLE my_stu(</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">     `name`  VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">     class_id INT,</span><br><span class="line">     # 制定外键关系</span><br><span class="line">     FOREIGN KEY(class_id) REFERENCES my_class(id))</span><br><span class="line">  )</span><br><span class="line">  // 第一个是key（从表的属性）re（主表（属性））</span><br><span class="line">  </span><br><span class="line">INSERT INTO my_class</span><br><span class="line"> VALUES(100,&#x27;java&#x27;),(200,&#x27;web&#x27;);   </span><br><span class="line">    #成功插入</span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"> VALUES(1,&#x27;tom&#x27;,100),(2,&#x27;jack&#x27;,200);</span><br><span class="line"> #成功插入</span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"> VALUES(3,&#x27;hsp&#x27;,300);</span><br><span class="line"> #插入失败</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803973.png" alt="image-20221130115600150"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 4</span><br><span class="line">insert into my_stu</span><br><span class="line">  values(5, &#x27;king&#x27;, NULL);</span><br><span class="line"># 注意这是不会报错的</span><br><span class="line"># 5</span><br><span class="line">delete from my_class</span><br><span class="line">  where id == 5;</span><br><span class="line"># 外键约束失败了， 数据不能随意删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="check"><a href="#check" class="headerlink" title="check"></a>check</h2><ul><li><p>mysql15.7,只做语法校验，不会生效</p><p>oracle ,sql server便会生效</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table t23(</span><br><span class="line">  id int primary key,</span><br><span class="line">  `name` varchar(32),</span><br><span class="line">  sex varchar(6) check(sex in(&#x27;man&#x27;,&#x27;woman&#x27;))),</span><br><span class="line">  sal double check(sal&gt;1000 AND sal&lt;2000)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h2 id="ENUM"><a href="#ENUM" class="headerlink" title="ENUM"></a>ENUM</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sex enum(&#x27;男&#x27;,&#x27;女&#x27;)not null</span><br><span class="line"># 表示sex只可能是男生或者女生</span><br></pre></td></tr></table></figure><h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803037.png" alt="image-20221204221806824"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t24</span><br><span class="line"> (id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line"> email VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line"> `name` VARCHAR(32)NOT NULL DEFAULT &#x27;&#x27;);</span><br><span class="line">DESC t24</span><br><span class="line">INSERT INTO t24 </span><br><span class="line"> VALUES(NULL,&#x27;jack@qq.com&#x27;,&#x27;jack&#x27;);</span><br><span class="line"> </span><br><span class="line"># 方法二</span><br><span class="line"># 注意这里必要写参量</span><br><span class="line">insert into t24</span><br><span class="line"> (email, &#x27;name&#x27;) values(&#x27;jack@qq.com&#x27;, &#x27;jack&#x27;);</span><br><span class="line">SELECT* FROM t24</span><br><span class="line"># 出现null的时候会自动变成1</span><br></pre></td></tr></table></figure><ul><li><p>细节</p><ol><li><p>一般来说自增长需要和primary key配合使用</p></li><li><p>自增长也可以单独使用（但是需要配合一个unique）</p></li><li><p>自增长修饰的字段为整数形的（虽然小数也可以但是非常非常少这样使用）</p></li><li><p>自增长默认从1开始，你也可以通过如下命令修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table t24 auto_increment = 100</span><br><span class="line"># 下次开始的时候就是从100开始</span><br></pre></td></tr></table></figure></li><li><p>如果你添加数据时，<strong>给自增长字段指定的有值，则以指定的值为准，如果指定了自增长，一般来说，就按照自增长的规则来添加数据</strong></p></li></ol></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引优化速度"><a href="#索引优化速度" class="headerlink" title="索引优化速度"></a>索引优化速度</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221204223135245.png" alt="image-20221204223135245"></p><ul><li><p>当表的元素特别多的时候，在没有创建索引时，我们的查询一条记录会非常慢</p></li><li><p>创建索引</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># create index 索引的名称 on 表名 (列名)</span><br><span class="line">create index empno_index on emp (empno)</span><br><span class="line"># 创建索引之后，在select贼快,但是在创建索引的过程中需要一些时间，并且内存会变大</span><br><span class="line">select * from emp where ename = &#x27;axJxC&#x27;;</span><br></pre></td></tr></table></figure><h3 id="索引机制"><a href="#索引机制" class="headerlink" title="索引机制"></a>索引机制</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803256.png" alt="image-20221204224422620"></p><ul><li><p>索引的原理</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803286.png" alt="image-20221204224635635"></p></li></ul><p> 使用索引后，就会形成一个数据结构，比如二叉树。这个有序的二叉树就会存储这些数据</p><ul><li><p>坏处</p><ol><li><p>占用<strong>磁盘空间</strong></p></li><li><p>会对<strong>update delete insert造成一定的影响</strong></p></li></ol></li></ul><p>但是因为<strong>select在业务开发中的使用次数多于update delete insert之和</strong>,所以这个东西还是特别使用的</p><h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><ul><li><p>查询一个表是否有索引</p></li><li><p>添加唯一索引</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index id_index on t25(id);</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除索引</span><br><span class="line">drop index id_index on t25</span><br><span class="line"></span><br><span class="line"># 删除主键索引</span><br><span class="line">alter table drop primary key </span><br></pre></td></tr></table></figure><ul><li>查询索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 方式1</span><br><span class="line">show index from 表名</span><br><span class="line"></span><br><span class="line"># 方式二</span><br><span class="line">show indexes from 表名</span><br><span class="line"></span><br><span class="line"># 方式三</span><br><span class="line">DESC b</span><br></pre></td></tr></table></figure><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p> 主键就是<strong>一种索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table t11(</span><br><span class="line">id int primary key,-- 主键，同时也是索引</span><br><span class="line">name varchar(32))</span><br><span class="line">);</span><br><span class="line">create table t12(</span><br><span class="line">id int unique,-- 主键，同时也是索引</span><br><span class="line">name varchar(32))</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><ul><li>这是一种最常用的索引。</li></ul><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t25(</span><br><span class="line"> id INT,</span><br><span class="line"> `name` VARCHAR(32));</span><br><span class="line">INSERT INTO t25</span><br><span class="line"> VALUES(20,&quot;java&quot;);</span><br><span class="line">SHOW  INDEXES FROM t25 </span><br><span class="line"># 如果某列值是不重复，那么优先考虑唯一索引，否则考虑普通索引</span><br><span class="line">CREATE UNIQUE INDEX id_index ON t25(id);</span><br><span class="line"></span><br><span class="line"># 添加索引方式2</span><br><span class="line">alter table t25 add index id_index (id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加主键索引</span><br><span class="line">alter table t26 add primary key (id)</span><br></pre></td></tr></table></figure><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><ul><li>我们常用solr和elasticsearch（ES）。</li></ul><h2 id="mysql事务"><a href="#mysql事务" class="headerlink" title="mysql事务"></a>mysql事务</h2><ul><li>事务的理解</li></ul><p>现在需要把多个数据视为一个整体。将多个dml（delete，update，insert）当做一个整体，要么全部成功，要么全部失败</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103115023554.png" alt="image-20230103115023554"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table t27&#123;</span><br><span class="line"> id int,</span><br><span class="line"> `name` varchar(32)</span><br><span class="line">&#125;</span><br><span class="line">start transaction </span><br><span class="line">savepoint a</span><br><span class="line">insert into t27 values(200,&#x27;javk&#x27;);</span><br><span class="line">rollback a</span><br><span class="line"># commit 就会真的生效了，还会把所有的回滚机制回退。 </span><br><span class="line">commit </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803202.png" alt="image-20230506232037664"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction  也可以写成 set autocommit = off;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803366.png" alt="image-20230103120031423"></p><ul><li>默认情况下会自动提交事务，但是不会保持。</li><li>必须使用innODB引擎才能使用支持事务</li></ul><h3 id="mysql事务隔离级别"><a href="#mysql事务隔离级别" class="headerlink" title="mysql事务隔离级别"></a>mysql事务隔离级别</h3><p> <img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103120900930.png" alt="image-20230103120900930"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803816.png" alt="image-20230103120909327"></p><ul><li>更好理解的方式</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230507141313883.png" alt="image-20230507141313883"></p><ul><li>知乎的一篇博客（讲的也可以）</li></ul><p><a href="https://zhuanlan.zhihu.com/p/150107974">大白话讲解脏写、脏读、不可重复读和幻读 - 知乎 (zhihu.com)</a></p><h3 id="隔离级别的详细说明"><a href="#隔离级别的详细说明" class="headerlink" title="隔离级别的详细说明"></a>隔离级别的详细说明</h3><ul><li>脏读就是在没有<strong>commit</strong>的时候，一个事务被修改了，另一端也可以被查询到</li><li>不可重复读和幻读是，你commit了，当这个事务在commit之前被修改了，那么另一端就可以看到</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103121208049.png" alt="image-20230103121208049"></p><ul><li>可串行化在<strong>事物没有提交</strong>的时候， 就会卡住不会动</li></ul><h3 id="查看mysql的隔离级别"><a href="#查看mysql的隔离级别" class="headerlink" title="查看mysql的隔离级别"></a>查看mysql的隔离级别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看隔离级别</span><br><span class="line">select @@tx_isolation</span><br><span class="line"></span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803598.png" alt="image-20230103145804494"></p><ul><li>查看系统隔离级别</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看系统隔离级别</span><br><span class="line">suselect @@global.tx_isolation</span><br></pre></td></tr></table></figure><h3 id="修改一个控制台的隔离级别设置"><a href="#修改一个控制台的隔离级别设置" class="headerlink" title="修改一个控制台的隔离级别设置"></a>修改一个控制台的隔离级别设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level 隔离级别</span><br><span class="line"># 被设置为读未提交的隔离级别</span><br><span class="line">比如：set session transaction isolation level read uncommitted</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>修改系统隔离级别</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置系统当前隔离级别</span><br><span class="line">set global transaction isolation level 隔离级别</span><br></pre></td></tr></table></figure><ul><li><strong>mysql默认的事务隔离级别是repeatable read，一般情况下，没有特殊要求，没有必要修改</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803898.png" alt="image-20230103160128015"></p><h2 id="mysql表的类型和存储引擎"><a href="#mysql表的类型和存储引擎" class="headerlink" title="mysql表的类型和存储引擎"></a>mysql表的类型和存储引擎</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103162842363.png" alt="image-20230103162842363"></p><ul><li>事务安全型比如说是InnoDB</li><li>非事务安全性就是其他的引擎</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803217.png" alt="image-20230103163129815"></p><ul><li><p>表锁的级别高一些， 锁的更多</p></li><li><p>细节说明：</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103163509171.png" alt="image-20230103163509171"></p><h2 id="myisam引擎"><a href="#myisam引擎" class="headerlink" title="myisam引擎"></a>myisam引擎</h2><p><strong>速度快，不支持外键，和事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table t28(</span><br><span class="line">  id int,</span><br><span class="line">  `name` varchar(32))engine myisam;</span><br><span class="line">start transaction;</span><br><span class="line">savepoint t1;</span><br><span class="line">insert into t28 values(1,&#x27;jack&#x27;);</span><br><span class="line">select* from t28;</span><br><span class="line"># 这里就会报错。因为myisam引擎不支持回滚。</span><br><span class="line">rollback to t28</span><br></pre></td></tr></table></figure><h2 id="memory引擎"><a href="#memory引擎" class="headerlink" title="memory引擎"></a>memory引擎</h2><p>数据存储在内存中</p><p>执行速度很快，<strong>但是关闭数据库的时候，就会出现删除记录，但是会保留结构。</strong>， 但是<strong>表的结构还是存在</strong>的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table t28(</span><br><span class="line">  id int,</span><br><span class="line">  `name` varchar(32))engine memory;</span><br><span class="line">insert int t29(</span><br><span class="line">   (1,&#x27;tom&#x27;),(2,&#x27;jack&#x27;),(3,&#x27;hsp&#x27;) );</span><br><span class="line">select* from t29</span><br></pre></td></tr></table></figure><ul><li><p>三种引擎的抉择</p><p>当你<strong>不需要进行事务处理的时候</strong>就优先选择<strong>myisam</strong>.</p><p>否则就选择innoDB，如果<strong>代表用户的状态</strong>的时候，用户的状态频繁改动，我们就可以选择memory引擎（<strong>比如用户在线的状态</strong>）。</p></li><li><p>修改存储引擎</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将表的存储引擎修改为innoDB</span><br><span class="line">alter table `t29` engine = innoDB</span><br></pre></td></tr></table></figure><h2 id="视图原理"><a href="#视图原理" class="headerlink" title="视图原理"></a>视图原理</h2><ul><li><p><strong>视图和对应的真实表</strong>的关系</p></li><li><p>视图的总结</p><ul><li>视图是根据基本来创建的，视图是虚拟的表</li><li>视图也有列，数据来自基表的映射（相当于一个指针）。</li><li>通过视图可以修改<strong>基表的数据</strong></li><li>基表的改变，也会影响到视图的数据</li></ul><p>而且基表不能直接查看，只能通过这个视图来访问</p></li></ul><h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103170610014.png" alt="image-20230103170610014"></p><ul><li>查看视图的view语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create VIEW emp_view01</span><br><span class="line">  AS</span><br><span class="line">  SELECT empno, ename,job,deptno from emp;</span><br><span class="line"># 查看视图</span><br><span class="line">DESC emp_view01;</span><br></pre></td></tr></table></figure><ul><li><p>查看创建视图的指令</p></li><li><p>修改视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update emp_view01</span><br><span class="line">  set job = &quot;MANAGER&quot;</span><br><span class="line">  WHERE empno = 7369;</span><br><span class="line"># 发现基表也发生了变化，而且该表基表，视图也会发生改变</span><br></pre></td></tr></table></figure></li></ul><h3 id="视图最佳实践"><a href="#视图最佳实践" class="headerlink" title="视图最佳实践"></a>视图最佳实践</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803634.png" alt="image-20230103171706923"></p><ul><li>这样就可以创建一个视图，然后以后可以直接拿来反复用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create view `view_032`</span><br><span class="line">  as</span><br><span class="line">  select empno, ename, dname,grade </span><br><span class="line">  from emp, dept,salgrade</span><br><span class="line">  where emp.deptno = dept.deptno AND</span><br><span class="line">  (sal Between losal AND hisal)</span><br></pre></td></tr></table></figure><ul><li>映射到多张表的方法，就是映射到多个表格之间的笛卡尔积。</li></ul><h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103172856098.png" alt="image-20230103172856098"></p><ul><li>当我们做项目开发时，可以根据不同的开发人员，赋给他相应的mysql操作权限</li><li>所以，mysql数据库管理人员，根据需要创建不同的用户名，赋给相应的权限，供人员使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个hsp_edu的用户，他可以获得管理数据库的部分权限</span><br><span class="line">CREATE USER &#x27;hsp_edu&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br><span class="line"># 删除用户</span><br><span class="line">DROP user `名称`@`localhost`;</span><br></pre></td></tr></table></figure><ul><li>登陆</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103174126035.png" alt="image-20230103174126035"></p><p>点击那个绿色的充电器符号，然后就可以改变你的身份为wjh</p><ul><li>修改密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for `wjh`@`localhost` = password(&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure><h3 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权"></a>给用户授权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 库.对象名 to `用户名`@`登录位置`</span><br><span class="line"># 直接赋给一个用户全部权限</span><br><span class="line">grant all on *.* to `用户名`@`登录位置`</span><br></pre></td></tr></table></figure><ul><li>练习题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803679.png" alt="image-20230103175025671"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1</span><br><span class="line">create user `wjh`@`localhost` indentified by &#x27;123456&#x27;;</span><br><span class="line"># 2</span><br><span class="line"> # 使用root 用户创建testdb,表为news</span><br><span class="line">create database testdb</span><br><span class="line">create table news(</span><br><span class="line">  id int,</span><br><span class="line">  content varchar(32));</span><br><span class="line"># 添加一个测试数据</span><br><span class="line">insert into news values(100,&#x27;数据库&#x27;);</span><br><span class="line">grant select ,insert </span><br><span class="line"> on testdb.news</span><br><span class="line"> to `wjh`@`localhost`</span><br><span class="line"># 但是在wjh的用户，就不能更改这个用户的数据</span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 表示xxx用户在192.168.1.* 的ip可以登录mysql</span><br><span class="line">create user `smith`@`192.168.1.%`</span><br><span class="line"></span><br><span class="line"># 在删除用户的时候，如果host不是%，需要明确制定，用户@host值</span><br><span class="line">drop user jack-- 默认就是drop user `jack`@`%`</span><br><span class="line">drop user `smith`@`192.168.1.%`表示xxx用户在192.168.1.*d</span><br></pre></td></tr></table></figure><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><ul><li>查找第n高的数据·</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select DISTINCT</span><br><span class="line"> salary as xx</span><br><span class="line">from</span><br><span class="line"> employee</span><br><span class="line">order by salary desc</span><br><span class="line">limit 1 offset 1</span><br><span class="line">// offset代表跳过多少个元素</span><br><span class="line">// 但是会遇到会空的情况， 我们可以利用子表查询,当为空的时候，就会返回一个null</span><br><span class="line">SELECT</span><br><span class="line">    (SELECT DISTINCT</span><br><span class="line">            Salary</span><br><span class="line">        FROM</span><br><span class="line">            Employee</span><br><span class="line">        ORDER BY Salary DESC</span><br><span class="line">        LIMIT 1 OFFSET 1) AS SecondHighestSalary</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p> 我们还可以使用ifnull函数</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803774.png" alt="image-20230504121726459"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    IFNULL(</span><br><span class="line">      (SELECT DISTINCT Salary</span><br><span class="line">       FROM Employee</span><br><span class="line">       ORDER BY Salary DESC</span><br><span class="line">        LIMIT 1 OFFSET 1),</span><br><span class="line">    NULL) AS SecondHighestSalary</span><br></pre></td></tr></table></figure><ul><li>求第N高的薪水</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 先让N减去1</span><br><span class="line">set N := N - 1;</span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">  distinct salary</span><br><span class="line">from </span><br><span class="line">  Employee</span><br><span class="line">order by </span><br><span class="line">  salary desc</span><br><span class="line">limit 1 offset N</span><br><span class="line"></span><br><span class="line"># distinct 和 group by一个元素都可以起到去重的效果。</span><br><span class="line"></span><br><span class="line"># 子查询实现</span><br><span class="line">    select </span><br><span class="line">      distinct salary</span><br><span class="line">      from employee e </span><br><span class="line">      where </span><br><span class="line">      (select count(distinct salary) from employee where salary &gt; e.salary) = N</span><br></pre></td></tr></table></figure><h1 id="Java-基础知识补充"><a href="#Java-基础知识补充" class="headerlink" title="Java - 基础知识补充"></a>Java - 基础知识补充</h1><p><strong>Properties的作用</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230517133747245.png" alt="image-20230517133747245"></p><h1 id="java-jdbc"><a href="#java-jdbc" class="headerlink" title="java - jdbc"></a>java - jdbc</h1><p>导入 mysql - jdbc 的jar文件</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230528222459750.png" alt="image-20230528222459750"></p><h2 id="jdbc概述"><a href="#jdbc概述" class="headerlink" title="jdbc概述"></a>jdbc概述</h2><p>该图展现了java连接数据库的模式</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803385.png" alt="image-20230513130330541"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803717.png" alt="image-20230513130431706"></p><h3 id="jdbc-编写的步骤"><a href="#jdbc-编写的步骤" class="headerlink" title="jdbc 编写的步骤"></a>jdbc 编写的步骤</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513174544652.png" alt="image-20230513174544652"></p><ul><li>连接</li></ul><p><code>jdbc:mysql://localhost::3306/hsp_db02</code></p><p>”jdbc:mysql”是固定的，代表的是协议</p><ul><li><p>3306 代表监听的端口</p></li><li><p>hsp_db02 代表你要连接的数据库</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513183647741.png" alt="image-20230513183647741"></p><ul><li>第一个jdbc代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjh.jdbc;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 这是第一个jdbc程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbc01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2。得到链接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="comment">// 将用户名和密码放入到Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        <span class="comment">// 3；执行sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into actor values(null, &#x27;刘德华&#x27;, &#x27;男&#x27;, &#x27;1970-11-11&#x27;, &#x27;110&#x27;)&quot;</span>;</span><br><span class="line">        <span class="comment">// 用于执行静态sql语句并返回其生成对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connect.createStatement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> statement.executeUpdate(sql); <span class="comment">// dml语句 返回的就是影响的行数,只有在dml的时候才会返回影响的行数，如果是创建的话，就不会</span></span><br><span class="line"></span><br><span class="line">        System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.关闭连接资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connect.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>上面代码需要注意的点 ： 要在url里面结尾加上<code>?useUnicode=true&amp;characterEncoding=utf8</code></p></li><li><p>可以通过修改<code>sql</code>,换成<code>delete</code> ， <code>update</code> 等语句</p></li><li><p>通过反射类来加载， 可以减少依赖性</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver)aClass.newInstance();</span><br></pre></td></tr></table></figure><ul><li>利用DriverManager.registerDriver方法我们可以更好的打开数据库数据，而不像之前那样搞键值对</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver)aClass.newInstance();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passwd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, passwd);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>进一步的， 我们发现， 其实可以不需要注册驱动(这是因为底层有一个静态代码块，自动帮你写了) （这个方式获取链接是最重要）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passwd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, passwd);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection</span><br><span class="line">                          );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513203223293.png" alt="image-20230513203223293"></p><ul><li><p>然后因为jdbc的优化， &#x2F;META-INF &#x2F; service&#x2F;java.sql.Driver 里面有注册，所以反射的那一段都可以不要， 但是建议还是选择方法4.</p></li><li><p>进一步的优化方法4：我们可以自定义密码用户名(用户自己配置密码 用户名 driver)</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513205019188.png" alt="image-20230513205019188"></p><p>  现在src目录下创建一个<code>mysql.properties</code>文件， 然后输入这些内容进去</p><p>  <img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803806.png" alt="image-20230513205146810"></p><blockquote><p>注意这里不要添加空格和双引号</p></blockquote><p>​     然后函数写法如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect05</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    Class.forName(driver);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    System.out.println(<span class="string">&quot;方式5 &quot;</span> + connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Resultset"><a href="#Resultset" class="headerlink" title="Resultset"></a>Resultset</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515191339770.png" alt="image-20230515191339770"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803955.png" alt="image-20230515191514606"></p><ul><li>对于executeQuery（）来说， 结尾关闭的文件还有<code>resultSet.close()</code>;</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803949.png" alt="image-20230515192159401"></p><p>  <strong>遍历的方式1</strong></p><p>底层的源码如下</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803207.png" alt="image-20230515192737325"></p><h2 id="statement-mysql注入"><a href="#statement-mysql注入" class="headerlink" title="statement&#x2F; mysql注入"></a>statement&#x2F; mysql注入</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803789.png" alt="image-20230515193007310"></p><ul><li><p>statement存在一个sql注入问题。</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803850.png" alt="image-20230515193515020"></p></li><li><p>sql注入黑客的原理， 因为可以把最后一位变得永远是真，然后把所有数据都偷出来</p></li></ul><p><strong>输入数据</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515195415652.png" alt="image-20230515195415652"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515195351292.png" alt="image-20230515195351292"></p><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement_"></a>PreparedStatement_</h2><ul><li>层次结构图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803847.png" alt="image-20230515195556552"></p><ul><li>使用它的好处</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515195832526.png" alt="image-20230515195832526"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803209.png" alt="image-20230515200959087"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入用户的名字&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入用户的密码&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"><span class="comment">// 导入数据</span></span><br><span class="line">      <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">      properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">      <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="comment">// 反射机制， 注册数据</span></span><br><span class="line">      Class.forName(driver);</span><br><span class="line"><span class="comment">// 执行sql语句</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT name, pwd from admin where name =? and pwd =?&quot;</span>;</span><br><span class="line">      <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">      <span class="comment">// ? 代表占位符</span></span><br><span class="line">      <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">      preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line">      preparedStatement.setString(<span class="number">2</span>, admin_pwd);</span><br><span class="line"><span class="comment">// 这里现在不用填入sql了（statement的时候要）</span></span><br><span class="line">      <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">      <span class="keyword">if</span>(resultSet.next())&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>在使用了preparedStatement的时候就不要在execute的时候这一行使用的括号中写sql</p></li><li><p>dml语句</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update admin set pwd = ? where name = ?&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="comment">// ? 代表占位符</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, admin_name);</span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, admin_pwd);</span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span>: <span class="string">&quot;失败&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="jdbc-api的复习"><a href="#jdbc-api的复习" class="headerlink" title="jdbc api的复习"></a>jdbc api的复习</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803535.png" alt="image-20230516203905276"></p><ul><li><p>补充 setObject <strong>（占位符的索引，占位符的值）</strong></p></li><li><p>ResultSet（结果集）</p><ul><li><strong>next（）</strong>向下移动一行 （一开始返回的是第一行的前面一个元素）</li><li><strong>previous（）</strong>向上移动一行</li><li><strong>getInt（）</strong>还可以通过字符来进行索引resultset.getInt(“id”) 通过列名来获取值</li></ul></li></ul><h2 id="封装JDBCUtil"><a href="#封装JDBCUtil" class="headerlink" title="封装JDBCUtil"></a>封装JDBCUtil</h2><p><code>Alt + Insert</code>: 可以快速调用常用指令</p><p><code>alt + Enter</code>可以try-catch包括住</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803595.png" alt="image-20230516205106115"></p><ul><li>注意方法才可以抛出， 代码块里面必须使用try-catch</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516205616966.png" alt="image-20230516205616966"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.wjh.jdbc.utils;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class JDBCUtils &#123;</span><br><span class="line">    private static String user;</span><br><span class="line">    private static String password;</span><br><span class="line">    private static String url;</span><br><span class="line">    private static String driver;</span><br><span class="line">    // 在static 代码块去初始化</span><br><span class="line">    static &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Properties properties = new Properties();</span><br><span class="line">            properties.load(new FileInputStream(&quot;src\\mysql.properties&quot;));</span><br><span class="line">            user = properties.getProperty(&quot;user&quot;);</span><br><span class="line">            password = properties.getProperty(&quot;password&quot;);</span><br><span class="line">            url = properties.getProperty(&quot;url&quot;);</span><br><span class="line">            driver = properties.getProperty(&quot;driver&quot;);</span><br><span class="line">        &#125;catch(IOException e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (SQLException e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void close(ResultSet set, Statement statement,Connection connection)&#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          if(set != null)&#123;</span><br><span class="line">              set.close();</span><br><span class="line">          &#125;</span><br><span class="line">          if(statement != null)&#123;</span><br><span class="line">              statement.close();</span><br><span class="line">          &#125;</span><br><span class="line">          if(connection != null)&#123;</span><br><span class="line">              connection.close();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;catch(SQLException e)&#123;</span><br><span class="line">        throw new RuntimeException(e);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JDBCUtil_DML</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjh.jdbc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtil_DML</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testDML();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// connect</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//create sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update actor set name =? where id =?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,<span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>,preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JDBC的事务介绍"><a href="#JDBC的事务介绍" class="headerlink" title="JDBC的事务介绍"></a>JDBC的事务介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803157.png" alt="image-20230516214610316"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection.setAutoCommit(<span class="literal">false</span>); <span class="comment">// 开启了事务(开了之后就不会一执行sql， 就提交）)</span></span><br><span class="line">connection.rollback();</span><br></pre></td></tr></table></figure><ul><li>我们可以把回滚操作，放到有一半的业务出现异常catch语句中的时候， 当出事的时候，就回滚。</li></ul><h2 id="批处理操作"><a href="#批处理操作" class="headerlink" title="批处理操作"></a>批处理操作</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518195826456.png" alt="image-20230518195826456"></p><p><strong>可以提高效率</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">preparedStatement.addBatch(); <span class="comment">// 批量处理数据</span></span><br><span class="line"><span class="comment">// 如果要使用批量处理， url后面一定要加上?rewriteBatchedStatements=true</span></span><br><span class="line"><span class="comment">// 每当满1000条的时候就一起扔到服务器里面</span></span><br><span class="line"><span class="comment">// 速度大大的提高</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i  &lt; <span class="number">5000</span>;++i)&#123;</span><br><span class="line">    preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">    preparedStatement.addBatch(); <span class="comment">// 批量处理数据</span></span><br><span class="line">    <span class="keyword">if</span>((i + <span class="number">1</span>)% <span class="number">1000</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        preparedStatement.executeBatch();</span><br><span class="line">        preparedStatement.clearbatch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>事实上，他就是创建了一个arraylist数组， 把所有数据存到里面，然后一次性执行</p><p>executeBatch（）函数，这样相比于正常的方法只用调用5次executeBatch</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518202129108.png" alt="image-20230518202129108"></p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="传统连接"><a href="#传统连接" class="headerlink" title="传统连接"></a>传统连接</h3><ul><li>如果又多个人， 连接一个数据库， 会变得很慢</li></ul><p>这是因为每次，连接数据库，然后关闭，都要验证<strong>ip地址， 用户名和密码</strong></p><p>而且， 如果程序出现异常，不能正常关闭，将会导致数据库的内存泄露。最终导致重启数据库</p><h3 id="开始新的连接"><a href="#开始新的连接" class="headerlink" title="开始新的连接"></a>开始新的连接</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518203127314.png" alt="image-20230518203127314"></p><p>通过再缓存池里面放入一定数量的连接， 每次只需从缓冲池里面取出一个，使用完以后再放回去</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803838.png" alt="image-20230518203622485"></p><p>它的本质就是一个<strong>等待队列</strong>，再放回去的时候，不会释放对象。</p><p>数据库连接池的种类</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803844.png" alt="image-20230518203824373"></p><h3 id="连接池-C3P0"><a href="#连接池-C3P0" class="headerlink" title="连接池 - C3P0"></a>连接池 - C3P0</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数据源对象</span></span><br><span class="line">comboxxxx = <span class="keyword">new</span> <span class="title class_">comboxxxx</span>;</span><br><span class="line"><span class="comment">// 通过配置文件mysql.properties 获取相关的信息。</span></span><br><span class="line"><span class="comment">//略</span></span><br><span class="line">    </span><br><span class="line">com.setdriverxxxclass(driver);</span><br><span class="line">com.set(url);</span><br><span class="line">com.set(user);</span><br><span class="line">com.setpass(password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置初始化连接数</span></span><br><span class="line">comxxx.poolsize(<span class="number">10</span>);</span><br><span class="line">comxxx.setMaxsize(<span class="number">50</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comxxx.getconnection();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803944.png" alt="image-20230518205241292"></p><ul><li><p>以上是大体的流程</p></li><li><p>我们还可以利用其他的方式二（它的xml来连接）</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518205731069.png" alt="image-20230518205731069"></p><p>这样子，代码就可以变得特别短</p><p>xml代码</p><p>文件的命名为<code>c3p0.config.xml</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803394.png" alt="image-20230518210102272"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803412.png" alt="image-20230518210043131"></p><h3 id="连接池-Druid"><a href="#连接池-Druid" class="headerlink" title="连接池 - Druid"></a>连接池 - Druid</h3><h2 id="Mysql主从复制"><a href="#Mysql主从复制" class="headerlink" title="Mysql主从复制"></a>Mysql主从复制</h2><ul><li>如果idea中出现报错， 我们需要再url结尾加上 <code>useSSL=false</code></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722202809491.png" alt="image-20230722202809491"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803137.png" alt="image-20230722214613077"></p><p>这一步还有一个重启</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803021.png" alt="image-20230722214714204"></p><p>主从复制的作用</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722215505596.png" alt="image-20230722215505596"></p><h2 id="项目中的文件配置"><a href="#项目中的文件配置" class="headerlink" title="项目中的文件配置"></a>项目中的文件配置</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722220459783.png" alt="image-20230722220459783"></p><p>其中 load-balance-algorithm-type是负载均衡</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803350.png" alt="image-20230722220720406"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803511.png" alt="image-20230722221153558"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722221144802.png" alt="image-20230722221144802"></p><ul><li>再 idea中 显示为， 查询的时候 DataSources：slave ， 增添的时候为 master。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803422.png" alt="image-20230723160911437"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webcomponent</title>
      <link href="/2023/11/06/webcomponent/"/>
      <url>/2023/11/06/webcomponent/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的前端小组件库-thinking"><a href="#这是我的前端小组件库-thinking" class="headerlink" title="这是我的前端小组件库 :thinking:"></a>这是我的前端小组件库 :thinking:</h1><h2 id="cloud-font"><a href="#cloud-font" class="headerlink" title="cloud-font"></a>cloud-font</h2><p><a href="https://github.com/Alanyaeer/web-component/tree/master/cloud-font">cloud-font</a></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282006780.png" alt="image-20231028192333139"></p><h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><p><a href="https://github.com/Alanyaeer/web-component/tree/master/nav-tab">nav</a></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310291413234.png" alt="image-20231029141317092"></p><h2 id="process-bar"><a href="#process-bar" class="headerlink" title="process-bar"></a>process-bar</h2><p><a href="https://github.com/Alanyaeer/web-component/tree/master/process-bar">进度条</a></p><p>这里有一段代码不是很理解</p><p><code>background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);</code></p><blockquote><p>这段 CSS 代码是用来设置一个元素的背景图像，具体来说是一个线性渐变背景。我们可以逐步解析这段代码：</p><p><code>linear-gradient(45deg, ...)</code>: 这是 CSS 的 <code>linear-gradient</code> 函数，它创建一个线性渐变。这里的 <code>45deg</code> 表示渐变的方向是 45 度角。</p><p><code>rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent</code>: 这是渐变的颜色和位置。</p><ul><li><code>rgba(255, 255, 255, .15) 25%</code>: 表示颜色为白色（RGB 为 255,255,255）并且不透明度为 0.15 的色标位于渐变的 25% 位置。不透明度范围从 0（完全透明）到 1（完全不透明）。</li><li><code>transparent 25%</code>: 表示一个透明的色标，位于渐变的 25% 位置。透明色标将确保在渐变中有一个从下到上的过渡。</li><li><code>transparent 50%</code>: 表示一个透明的色标，位于渐变的 50% 位置。再次使用透明色标以在渐变中创建一个从下到上的过渡。</li><li><code>rgba(255, 255, 255, .15) 50%</code>: 表示颜色为白色（RGB 为 255,255,255）并且不透明度为 0.15 的色标位于渐变的 50% 位置。</li><li><code>rgba(255, 255, 255, .15) 75%</code>: 表示颜色为白色（RGB 为 255,255,255）并且不透明度为 0.15 的色标位于渐变的 75% 位置。</li><li><code>transparent 75%</code>: 表示一个透明的色标，位于渐变的 75% 位置。再次使用透明色标以在渐变中创建一个从上到下的过渡。</li><li><code>transparent</code>: 最后，透明色标确保在渐变的最后有一个从上到下的过渡。</li></ul><p>这里的 <code>transparent</code> 的主要作用是创建渐变的过渡效果，它使得颜色之间的过渡更加平滑，而不是直接跳转到下一个颜色。通过使用透明色标，我们可以创建出各种各样的线性渐变效果，例如“彩虹”效果等。</p></blockquote><p>暂时放着以后之后再来回头看， 大概的意思是 transparent 可以让过渡效果更加的好看</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311052044848.png" alt="image-20231105204409670"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 组件库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/2023/11/06/websocket%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/11/06/websocket%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题🤕"><a href="#问题🤕" class="headerlink" title="问题🤕"></a>问题🤕</h1><blockquote><p> 写课设的时候， 使用websocket 建立连接发送消息， 出现了 以下两种问题 </p></blockquote><h2 id="CloseStatus-1002"><a href="#CloseStatus-1002" class="headerlink" title="CloseStatus &#x3D; 1002"></a>CloseStatus &#x3D; 1002</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061317978.png" alt="image-20231106131744951"></p><ul><li>遇到这个问题多半是因为 你发送的消息的 时候前端没有对数据进行调整</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(sendmessage))</span><br></pre></td></tr></table></figure><blockquote><p>JSON.stringify 如果不加上这个就会报错， 我是在写心跳检测的时候， 没有对空的字符串进行 stringify所以导致一打开服务就报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 罪魁祸首</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendHeartbeat</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (socket.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;  </span><br><span class="line">      socket.<span class="title function_">send</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 发送空的心跳包给服务器  </span></span><br><span class="line">      <span class="comment">//这里修改为 socket.send(JSON.stringify(&#x27;&#x27;))</span></span><br><span class="line">      <span class="title function_">sendHeartbeat</span>(); <span class="comment">// 递归调用发送心跳包函数，以保持连接活跃  </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已关闭&#x27;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;, <span class="number">5000</span>); <span class="comment">// 每30秒发送一次心跳包给服务器  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CloseStatus-1006"><a href="#CloseStatus-1006" class="headerlink" title="CloseStatus &#x3D; 1006"></a>CloseStatus &#x3D; 1006</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061317040.png" alt="image-20231106131730108"></p><ul><li>后来发现是自己修改ip地址的时候吧后面的 端口号也给删除了</li></ul><p>正确 的websocket 格式 是 <code>ws:// ip地址 + :(端口号) + /xxx</code>， 这样一修改之后就木有这个问题了 。</p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty</title>
      <link href="/2023/10/31/Netty/"/>
      <url>/2023/10/31/Netty/</url>
      
        <content type="html"><![CDATA[<h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><blockquote><p>牢记四个点</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312044227.png" alt="image-20231031204440182"></p><h2 id="NIO基础"><a href="#NIO基础" class="headerlink" title="NIO基础"></a>NIO基础</h2><blockquote><p>非阻塞io - non-blocking io</p></blockquote><h3 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h3><blockquote><p>Channel Buffer Selector</p></blockquote><ol><li><p>Channel &amp; Buffer</p><p>最常用的 Buffer： ByteBuffer</p><p>其他的不是很清楚</p></li><li><p>Selector</p><p>Selector相当于一个中转站， 来分发channel 发来的数据给thread<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312106328.png" alt="image-20231031210625241"></p></li></ol><h3 id="bytebuffer"><a href="#bytebuffer" class="headerlink" title="bytebuffer"></a>bytebuffer</h3><h4 id="bytebuffer的基本使用"><a href="#bytebuffer的基本使用" class="headerlink" title="bytebuffer的基本使用"></a>bytebuffer的基本使用</h4><blockquote><p>代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">FileChannel</span> <span class="variable">channel</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.txt&quot;</span>).getChannel())&#123;</span><br><span class="line">        <span class="comment">// 准备缓冲区 </span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 从channel 读取数据， 向buffer 写入</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> channel.read(buffer)</span><br><span class="line">            log.debug(xxx ,len);</span><br><span class="line">            <span class="keyword">if</span>(len == -<span class="number">1</span>)&#123; <span class="comment">//读取完成了 </span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 打印</span></span><br><span class="line">            buffer.filp() <span class="comment">// 切换至读取模式</span></span><br><span class="line">            <span class="keyword">while</span>(buffer.hasRemaining())&#123;</span><br><span class="line">                <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> buffer.get() <span class="comment">//读取一个字节</span></span><br><span class="line">                log.debug(xxx, b);</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.clear() <span class="comment">//切换换位写入模式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bytebuffer-结构"><a href="#Bytebuffer-结构" class="headerlink" title="Bytebuffer 结构"></a>Bytebuffer 结构</h4><blockquote><p>它有三个重要的属性</p></blockquote><ul><li>capacity</li><li>position</li><li>limit</li></ul><p>调用<strong>clear****方法</strong></p><ol><li><strong>默认是写模式</strong></li></ol><p>如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312134540.png" alt="image-20231031213414504"></p><p>position往后读取， 直到遇到 Limit 或者Capacity 。 </p><blockquote><p><strong>这里讲讲 Limit 和Capacity 的区别</strong></p><p><code>ByteBuffer buffer = ByteBuffer.allocate(10)</code>这句话就限制了它的Capacity 为 10。</p><p>在程序往后运行之后， limit 是小于等于 Capacity 的。 比如我这个文本是13个字节</p><p>那么第一次读取到的Limit 就是 10， 第二次读取是3.</p></blockquote><p>在调用buffer 的 <strong>flip方法</strong>之后</p><ol start="2"><li><strong>进入写模式</strong></li></ol><p>Position 指针跳回到第0位地址， 然后边向右移动， 边读取数据，直到遇到Limit </p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312140821.png" alt="image-20231031214014784"></p><p><strong>（调用Compact方法）</strong></p><ol start="3"><li>进入Compact模式</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312142916.png" alt="image-20231031214211859"></p><p>和普通的读模式不同的是，<strong>在compact 模式中， position会将会写入的数据， 向前压缩</strong>。</p><p> 然后Position跳入到最后已读取数据的下一位地址继续读取</p><ul><li>需要注意的是 Compact 会不会消除最后一位数据，他会在写入模式的时候把那个字符覆盖</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312156938.png" alt="image-20231031215648878"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_Juc</title>
      <link href="/2023/10/31/Java-Juc/"/>
      <url>/2023/10/31/Java-Juc/</url>
      
        <content type="html"><![CDATA[<h1 id="依赖改变"><a href="#依赖改变" class="headerlink" title="依赖改变"></a>依赖改变</h1><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.openjdk.jol<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>jol-core<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">version</span>&gt;</span>0.16<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure><h1 id="前置知识"><a href="#前置知识" class="headerlink" title="前置知识"></a>前置知识</h1><h2 id="进程和线程"><a href="#进程和线程" class="headerlink" title="进程和线程"></a>进程和线程</h2><blockquote><p>进程就是： 一个软件实例就是一个进程</p><p>线程就是： 进程的子集 </p></blockquote><h2 id="并发和并行"><a href="#并发和并行" class="headerlink" title="并发和并行"></a>并发和并行</h2><blockquote><p>并发(concurrent)就是， 一个核心迅速在多个任务之间切换</p><p>并行(parallel)就是， 多个核心同时在多个任务运行。</p></blockquote><h2 id="异步和同步"><a href="#异步和同步" class="headerlink" title="异步和同步"></a>异步和同步</h2><blockquote><p>同步： 不需要等待结果的返回</p><p>异步： 需要等待结果的返回’</p></blockquote><ul><li><p>运行效率提升</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311111906943.png" alt="image-20231111190652846"></p></li></ul><h1 id="创建和运行线程"><a href="#创建和运行线程" class="headerlink" title="创建和运行线程"></a>创建和运行线程</h1><h2 id="直接使用Thread"><a href="#直接使用Thread" class="headerlink" title="直接使用Thread"></a>直接使用Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// 需要执行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">t.start() <span class="comment">//线程开始执行</span></span><br></pre></td></tr></table></figure><h2 id="Runnable-配合Thread"><a href="#Runnable-配合Thread" class="headerlink" title="Runnable 配合Thread"></a>Runnable 配合Thread</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Runnable</span> <span class="variable">runnable</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Runnable</span>() &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span> <span class="params">()</span> &#123;</span><br><span class="line">        <span class="comment">// 需要执行的任务</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// 创建线程对象</span></span><br><span class="line"><span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(runnable);</span><br><span class="line">t.start()</span><br></pre></td></tr></table></figure><blockquote><p>可以试着使用lambda表达式把上诉代码精简</p></blockquote><h2 id="Thread-和-Runnable之间的关系"><a href="#Thread-和-Runnable之间的关系" class="headerlink" title="Thread 和 Runnable之间的关系"></a>Thread 和 Runnable之间的关系</h2><p>上诉的两个方法中</p><ul><li>方法一： 是把线程和任务合并在一起了</li><li>方法二： 是把线程和任务分开了</li></ul><p>并且使用 Runnable 可以更加的和线程池等高级api 配合。 </p><h2 id="FutureTask-配合Thread"><a href="#FutureTask-配合Thread" class="headerlink" title="FutureTask 配合Thread"></a>FutureTask 配合Thread</h2><blockquote><p> 可以获取任务的执行结果， 他和Runnable 有关系</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建任务对象</span></span><br><span class="line">FutureTask&lt;Integer&gt;task3 = <span class="keyword">new</span> <span class="title class_">FutureTask</span>&lt;&gt;(()-&gt;&#123;</span><br><span class="line">    log.debug(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="number">100</span>;</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 第一个参数任务对象， 第二个参数线程名字</span></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">Thread</span>(task3, <span class="string">&quot;t3&quot;</span>)</span><br><span class="line"><span class="comment">// 这里的get会阻塞， 直到结果的返回</span></span><br><span class="line"><span class="type">Integer</span> <span class="variable">result</span> <span class="operator">=</span> task3.get();</span><br><span class="line">log.debug(<span class="string">&quot;结果是：&#123;&#125;&quot;</span>, result);</span><br></pre></td></tr></table></figure><h1 id="线程运行"><a href="#线程运行" class="headerlink" title="线程运行"></a>线程运行</h1><h2 id="查看进程线程的方法"><a href="#查看进程线程的方法" class="headerlink" title="查看进程线程的方法"></a>查看进程线程的方法</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311111936309.png" alt="image-20231111193656252"></p><h2 id="JConsole"><a href="#JConsole" class="headerlink" title="JConsole"></a>JConsole</h2><ol><li>打开cmd</li><li>输入JConsole </li><li>然后就可以连接你想要连接的Java服务</li></ol><p>对于你想要监听的 类， 你需要做如下操作</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">java -Djava.rmi.server.hostname=`ip地址` -Dcom.sun.management.jmxremote -</span><br><span class="line">Dcom.sun.management.jmxremote.port=`连接端口` -Dcom.sun.management.jmxremote.ssl=是否安全连接 -</span><br><span class="line">Dcom.sun.management.jmxremote.authenticate=是否认证 java类</span><br></pre></td></tr></table></figure><h2 id="栈与栈帧"><a href="#栈与栈帧" class="headerlink" title="栈与栈帧"></a>栈与栈帧</h2><p>略（很简单）</p><h2 id="多线程的栈与栈帧"><a href="#多线程的栈与栈帧" class="headerlink" title="多线程的栈与栈帧"></a>多线程的栈与栈帧</h2><blockquote><p>每个线程都有自己独立的栈内存， 线程之间的栈互相不干扰</p></blockquote><h2 id="线程的上下文切换（Thread-context-Switch）"><a href="#线程的上下文切换（Thread-context-Switch）" class="headerlink" title="线程的上下文切换（Thread context Switch）"></a>线程的上下文切换（Thread context Switch）</h2><blockquote><p>从使用cpu到不使用cpu的原因</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122251260.png" alt="image-20231112225156160"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122255852.png" alt="image-20231112225516807"></p><h2 id="常见方法"><a href="#常见方法" class="headerlink" title="常见方法"></a>常见方法</h2><p>看pdf</p><h3 id="start"><a href="#start" class="headerlink" title="start"></a>start</h3><p><strong>getState 获取线程的状态</strong></p><blockquote><p>在未start之前， 调用线程的getState方法会得到一个NEW， 在调用start 之后， 调用线程的getState 方法会得到一个 RUNNABLE</p></blockquote><ul><li>连续调用两次start 方法</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311122307487.png" alt="image-20231112230727451"></p><h3 id="sleep"><a href="#sleep" class="headerlink" title="sleep"></a>sleep</h3><blockquote><p>使得线程的状态由Running 变成 Timed Waiting 状态</p></blockquote><h4 id="线程打断"><a href="#线程打断" class="headerlink" title="线程打断"></a>线程打断</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(<span class="string">&quot;t1&quot;</span>) &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">        log.debug(<span class="string">&quot;enter sleep...&quot;</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Thread.sleep(<span class="number">2000</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;wake up...&quot;</span>);</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line">t1.start();</span><br><span class="line"></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">log.debug(<span class="string">&quot;interrupt...&quot;</span>);</span><br><span class="line">t1.interrupt();</span><br></pre></td></tr></table></figure><p>报错信息如下</p><blockquote><p>java.lang.InterruptedException: sleep interrupted<br>    at java.lang.Thread.sleep(Native Method)<br>    at cn.itcast.test.Test7$1.run(Test7.java:14)</p></blockquote><ul><li>同时我们还需要注意一个睡眠结束的线程未必会立即执行</li></ul><h4 id="sleep方法更新"><a href="#sleep方法更新" class="headerlink" title="sleep方法更新"></a>sleep方法更新</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 原来</span></span><br><span class="line">Thread.sleep(<span class="number">1000</span>);</span><br><span class="line"><span class="comment">// 替换成这个更好</span></span><br><span class="line">TimeUnit.SECONDS.sleep(<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="yield"><a href="#yield" class="headerlink" title="yield"></a>yield</h3><blockquote><p>使得线程从 running 变成 runnable 状态， 然后调用其他的线程， 如果没有其他的线程要执行会把机会继续让该线程进行</p></blockquote><h3 id="线程优先级（setPriority）"><a href="#线程优先级（setPriority）" class="headerlink" title="线程优先级（setPriority）"></a>线程优先级（setPriority）</h3><blockquote><p>提示任务调度器去优先调度这个线程， 但是这只是个提示，不一定会执行</p><p>当cpu 繁忙的时候，优先级高的就会被分配尽可能多的服务</p></blockquote><p>在Runnable 构造器中， 使用Thread.yield()可以实现让的效果</p><p>而setPriority 需要对线程对象 进行操作。 </p><h4 id="sleep的小应用"><a href="#sleep的小应用" class="headerlink" title="sleep的小应用"></a>sleep的小应用</h4><p>略</p><h3 id="join"><a href="#join" class="headerlink" title="join"></a>join</h3><blockquote><p>等待线程的结束， 拥塞主线程</p></blockquote><ul><li>如果下面这段代码不加上 join 方法， 那么就会出现r &#x3D; 0 . 但是又了join之后就会等到这个线程结束之后再去调用后面的方法</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">r</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line"><span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">    log.debug(<span class="string">&quot;开始&quot;</span>);</span><br><span class="line">    sleep(<span class="number">1</span>);</span><br><span class="line">    log.debug(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">    r = <span class="number">10</span>;</span><br><span class="line">&#125;,<span class="string">&quot;t1&quot;</span>);</span><br><span class="line">t1.start();</span><br><span class="line">t1.join();</span><br><span class="line">log.debug(<span class="string">&quot;结果为:&#123;&#125;&quot;</span>, r);</span><br><span class="line">log.debug(<span class="string">&quot;结束&quot;</span>);</span><br></pre></td></tr></table></figure><ul><li>带参数的join</li></ul><blockquote><p>设置等待的最大时间, 如果超过这个时间就不等待</p></blockquote><h3 id="interrupt"><a href="#interrupt" class="headerlink" title="interrupt"></a>interrupt</h3><blockquote><p>介绍不同阻塞状态被打断的会发生的事件</p></blockquote><h4 id="打断sleep-join-wait"><a href="#打断sleep-join-wait" class="headerlink" title="打断sleep join wait"></a>打断sleep join wait</h4><ol><li>sleep 会抛出异常， 同时打断的那一刻会有一个打断标记， 但是会立刻清空，把它变成false</li></ol><ul><li>isInterrupted方法， 获取线程的打断标签（如果被正常的打断是为true）</li></ul><p>如果在一个线程里面， 我们想要获得这个线程的实例</p><p>那么我们可以使用这个方法</p><p><code>Thread.currentThread()</code></p><p>获取打断标签 <code>Thread.currentThread().isInterrupted()</code></p><h4 id="两个阶段终止模式"><a href="#两个阶段终止模式" class="headerlink" title="两个阶段终止模式"></a>两个阶段终止模式</h4><blockquote><p>线程T1 终止 线程 T2， 这里的终止， 不会立刻终止， 而是会等T2处理好一切之后再终止</p></blockquote><ul><li><p>错误思路</p><p>强制终止， stop 方法真正杀死线程。</p><p>使用System.exit(int) 方法停止线程。</p></li><li><p>正确思路</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311132348718.png" alt="image-20231113234824606"></p></li></ul><p>重新设置打断标记， 可以使得原本为false的标记变成true</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test13</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> InterruptedException &#123;</span><br><span class="line">        <span class="type">TwoPhaseTermination</span> <span class="variable">tpt</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TwoPhaseTermination</span>();</span><br><span class="line">        tpt.start();</span><br><span class="line"></span><br><span class="line">       Thread.sleep(<span class="number">3500</span>);</span><br><span class="line">        log.debug(<span class="string">&quot;停止监控&quot;</span>);</span><br><span class="line">        tpt.stop();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j(topic = &quot;c.TwoPhaseTermination&quot;)</span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">TwoPhaseTermination</span> &#123;</span><br><span class="line">    <span class="comment">// 监控线程</span></span><br><span class="line">    <span class="keyword">private</span> Thread monitorThread;</span><br><span class="line">    <span class="comment">// 停止标记</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">volatile</span> <span class="type">boolean</span> <span class="variable">stop</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="comment">// 判断是否执行过 start 方法</span></span><br><span class="line">    <span class="keyword">private</span> <span class="type">boolean</span> <span class="variable">starting</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 启动监控线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">start</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">            <span class="keyword">if</span> (starting) &#123; <span class="comment">// false</span></span><br><span class="line">                <span class="keyword">return</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            starting = <span class="literal">true</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        monitorThread = <span class="keyword">new</span> <span class="title class_">Thread</span>(() -&gt; &#123;</span><br><span class="line">            <span class="keyword">while</span> (<span class="literal">true</span>) &#123;</span><br><span class="line">                <span class="type">Thread</span> <span class="variable">current</span> <span class="operator">=</span> Thread.currentThread();</span><br><span class="line">                <span class="comment">// 是否被打断</span></span><br><span class="line">                <span class="keyword">if</span> (stop) &#123;</span><br><span class="line">                    log.debug(<span class="string">&quot;料理后事&quot;</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">                    log.debug(<span class="string">&quot;执行监控记录&quot;</span>);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (InterruptedException e) &#123;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;monitor&quot;</span>);</span><br><span class="line">        monitorThread.start();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 停止监控线程</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">stop</span><span class="params">()</span> &#123;</span><br><span class="line">        stop = <span class="literal">true</span>;</span><br><span class="line">        monitorThread.interrupt();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="打断park"><a href="#打断park" class="headerlink" title="打断park"></a>打断park</h4><blockquote><p>park 可以让进程暂时停止</p></blockquote><ul><li><p>LockSupport.park()</p></li><li><p>通过对线程使用interrupt方法， 可以让他停止暂停</p></li><li><p>但是如果你打断了它一次， 再打断它就没用了（但是可以通过调用Thread.interrupted使得打断标记重置为假的）<br><code>调用LockSupport.park(),开始打断 </code></p></li></ul><blockquote><p>不推荐使用的方法 stop(使用两阶段终止模式来停止）、 suspend resume 。</p></blockquote><h3 id="守护线程"><a href="#守护线程" class="headerlink" title="守护线程"></a>守护线程</h3><ul><li>用例： 垃圾回收器就是一个守护线程</li><li>Tomcat中的Acceptor 和 Poller 都是守护请求， 当它接受到shutdown命令之后，就会关闭掉这两个线程</li></ul><h3 id="线程的状态"><a href="#线程的状态" class="headerlink" title="线程的状态"></a>线程的状态</h3><h4 id="五种状态"><a href="#五种状态" class="headerlink" title="五种状态"></a>五种状态</h4><ul><li><p>初始状态</p></li><li><p>可运行状态</p></li><li><p>运行状态</p></li><li><p>终止状态</p></li><li><p>阻塞状态</p><p>这是腿上面这几种状态的描述</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311142344333.png" alt="image-20231114234427244"></p><h4 id="六种状态"><a href="#六种状态" class="headerlink" title="六种状态"></a>六种状态</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311142349870.png" alt="image-20231114234947770"></p><ul><li>synchroniz 是一个锁操作，</li></ul><h3 id="统筹规划习题"><a href="#统筹规划习题" class="headerlink" title="统筹规划习题"></a>统筹规划习题</h3><ul><li><font color="green">泡茶问题 </font></li></ul><p>方法一 ： 使用join 方法</p><h2 id="共享模型-之-管程"><a href="#共享模型-之-管程" class="headerlink" title="共享模型 之 管程"></a><font color="red">共享模型 之 管程</font></h2><ul><li>问题引入</li></ul><p>两个 线程同时加加减减， 然后停止， 但是结果和应该的结果不符合</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311152347661.png" alt="image-20231115234729515"></p><p>上面这个是 java的 自增和自减 运算符的 操作过程</p><h3 id="临界区"><a href="#临界区" class="headerlink" title="临界区"></a>临界区</h3><p>多个线程访问共享资源</p><p>多个线程读写共享资源时发送了指令交错， 就会出现错误</p><p>在一段代码块如果存在对一个共享资源的多线程读写操作， 这个代码块就是一个临界区</p><p>可以理解为 一个代码块里面</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> increment &#123;</span><br><span class="line">    counter++;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="竞态条件"><a href="#竞态条件" class="headerlink" title="竞态条件"></a>竞态条件</h3><blockquote><p>多个线程在临界区内执行， 由于代码块的执行顺序不同而导致结果没有办法预测，称作竞态条件</p></blockquote><h3 id="synchronized-对象锁"><a href="#synchronized-对象锁" class="headerlink" title="synchronized(对象锁)"></a>synchronized(对象锁)</h3><p><strong>语法</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">synchronized</span>(对象) &#123;</span><br><span class="line">    <span class="comment">//临界区</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Test17</span>&#123;</span><br><span class="line"><span class="keyword">static</span> <span class="type">int</span> <span class="variable">counter</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">static</span> <span class="type">Object</span> <span class="variable">lock</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Object</span>();</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>&#123;</span><br><span class="line">        </span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span> (lock)&#123;</span><br><span class="line">                    counter++;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;, <span class="string">&quot;t1&quot;</span>);</span><br><span class="line">        <span class="type">Thread</span> <span class="variable">t2</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Thread</span>(()-&gt;&#123;</span><br><span class="line">            <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; <span class="number">5000</span>; ++i)&#123;</span><br><span class="line">                <span class="keyword">synchronized</span>(lock)&#123;</span><br><span class="line">                    counter--;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">    t1.start();</span><br><span class="line">    t2.start();</span><br><span class="line">    t1.join();</span><br><span class="line">    t2.join();</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, counter);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// </span></span><br><span class="line"><span class="keyword">class</span> <span class="title class_">Test</span>&#123;</span><br><span class="line">    <span class="keyword">public</span>  <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">test</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">synchronized</span>(Test.class)&#123; <span class="comment">// 一般这里直接写Test.class = this就可以了</span></span><br><span class="line">            </span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="线程八锁"><a href="#线程八锁" class="headerlink" title="线程八锁"></a>线程八锁</h3><ul><li>类对象和 实例对象的区别</li></ul><h3 id="线程安全的判断"><a href="#线程安全的判断" class="headerlink" title="线程安全的判断"></a>线程安全的判断</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311180042998.png" alt="image-20231118004210879"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程mysql连接不上</title>
      <link href="/2023/10/30/%E8%BF%9C%E7%A8%8Bmysql%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A/"/>
      <url>/2023/10/30/%E8%BF%9C%E7%A8%8Bmysql%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="用户权限已经是-，但是远程数据库依旧连接不上"><a href="#用户权限已经是-，但是远程数据库依旧连接不上" class="headerlink" title="用户权限已经是%，但是远程数据库依旧连接不上"></a>用户权限已经是%，但是远程数据库依旧连接不上</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近趁着双11购买了腾讯云服务器，想着配置好环境，早点用上。</p><p>然后启动我的数据库 开始 狠狠的连接（误）， 结果都是timeout ？ ， 什么我明明已经设置了用户权限是%啊！</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301954484.png" alt="image-20231030195447448"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>后来思来想去， 突然想要去看看端口是不是3306， 然后想到中午打开腾讯云的时候，看到了端口？ 我才猛地意识到我的3306端口没有开启</p><blockquote><p>不过这个已经是开启后的了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301951278.png" alt="image-20231030195131182"></p><h3 id="开启端口方式"><a href="#开启端口方式" class="headerlink" title="开启端口方式"></a>开启端口方式</h3><ul><li>点击 添加规则</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301952077.png" alt="image-20231030195223035"></p><p>跳出来这个页面， 然后将应用类型的下拉框选择mysql ，就好了</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301952193.png" alt="image-20231030195259158"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域请求解决-nginx服务器</title>
      <link href="/2023/10/28/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%A7%A3%E5%86%B3-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/10/28/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%A7%A3%E5%86%B3-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="跨域请求问题-nginx解决"><a href="#跨域请求问题-nginx解决" class="headerlink" title="跨域请求问题 - nginx解决"></a>跨域请求问题 - nginx解决</h1><ul><li>想象一个场景， 我在用vue3 vite 写前端（或者已经打包后的文件）， 同时后端用springboot ， 我写完一个功能想要调试， 但是遇到了下面这个问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282236940.png" alt="image-20231028223647903"></p><p>这就是跨域请求的会出现的问题。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>我在网上看到了很多， 在前端配置一些文件， 在后端加上注解或添加一些配置类文件， 但是恰巧我的程序使用了上面种种方法都无法成功， 在舍友的提醒下， 我开始使用nginx</p></li><li><p>打开nginx 文件夹 打开conf</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282239386.png" alt="image-20231028223957355"></p><ul><li>使用 vscode 打开 这个nginx.conf(最好不要使用文本编辑器)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282240185.png" alt="image-20231028224030156"></p><ul><li>加上 这段代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282241195.png" alt="image-20231028224109169"></p><p>我解释一下它的作用， 首先 nginx 有一个监听的端口， 这里就是180，（<strong>所以我们后续调试打开的地址就是180）</strong></p><p>然后 location &#x2F;api 就是你的路径以 api 开头的网址， 被转发到</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282242519.png" alt="image-20231028224242497"></p><p>同理 &#x2F;friend 就被转发到</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282243562.png" alt="image-20231028224303540"></p><p>其余的都被转发到 5173 端口。</p><blockquote><p>在这里 8080 端口是你后端程序的端口， 而5173可以换成你前端程序的端口</p></blockquote><p>而 &#x2F;api 和 &#x2F; friend 就是 我的前端的请求接口 一个是以api 开头一个是 friend开头 。</p><p>哦 对了， 我们还需要将前端的请求地址换成180端口</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282246671.png" alt="image-20231028224611652"></p><p> 这里根据你的nginx 监听的端口而定</p><p>然后打开localhost:180， 发现启动成功</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282247683.png" alt="image-20231028224751393"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> nginx </tag>
            
            <tag> 疑难解惑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文件上传和文件下载</title>
      <link href="/2023/10/28/java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2023/10/28/java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<h1 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h1><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;String&gt; <span class="title function_">uploadFileAndPicture</span><span class="params">(MultipartFile e)</span>  &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">originFileName</span> <span class="operator">=</span> e.getOriginalFilename();</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> originFileName.substring(originFileName.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + originFileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            e.transferTo(<span class="keyword">new</span> <span class="title class_">File</span>(basepath + originFileName));</span><br><span class="line"></span><br><span class="line">        &#125;<span class="keyword">catch</span>(Exception ex)&#123;</span><br><span class="line">            log.info(<span class="string">&quot;&#123;&#125;&quot;</span>,ex.getMessage());</span><br><span class="line">        &#125;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, originFileName);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="string">&quot;发送成功&quot;</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><h1 id="文件下载-点击文件之后可下载"><a href="#文件下载-点击文件之后可下载" class="headerlink" title="文件下载 - 点击文件之后可下载"></a>文件下载 - 点击文件之后可下载</h1><h2 id="后端-java"><a href="#后端-java" class="headerlink" title="后端 - java"></a>后端 - java</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/downloadfile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, HttpServletRequest request, String fileName, String extend)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + fileName);</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, extend);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        result.put(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;下载的文件不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    response.reset();</span><br><span class="line">    response.setContentType(extend);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentLength((<span class="type">int</span>) file.length());</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(file.getName(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="type">byte</span>[] readeBytes = FileUtil.readBytes(file);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    os.write(readeBytes);</span><br><span class="line">    result.put(<span class="string">&quot;success&quot;</span>, <span class="string">&quot;下载成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="前端-vue"><a href="#前端-vue" class="headerlink" title="前端 - vue"></a>前端 - vue</h2><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api/download 就是 上面后端download的地址</span></span><br><span class="line">axios.<span class="title function_">get</span>(baseUrl + <span class="string">&quot;/api/downloadfile&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">fileName</span>: item.<span class="property">fileName</span>,</span><br><span class="line">        <span class="attr">extend</span>: item.<span class="property">extend</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 注意这里一定要写arraybuffer， 不然可能会出错</span></span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 先转换为 Blob类型</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;<span class="attr">type</span>: item.<span class="property">extend</span>&#125;))</span><br><span class="line"><span class="comment">// 在转换为 File类型</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">blob</span>=&gt;</span> <span class="keyword">new</span> <span class="title class_">File</span>([blob], item.<span class="property">fileName</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">file</span>=&gt;</span>&#123;</span><br><span class="line">        item.<span class="property">msg</span> = file</span><br><span class="line">        <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">        <span class="keyword">let</span> fileNameTemp = item.<span class="property">fileName</span></span><br><span class="line">        reader.<span class="property">onloadend</span> = <span class="function">(<span class="params">es</span>)=&gt;</span>&#123;</span><br><span class="line">            item.<span class="property">msg</span> = es.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">            item.<span class="property">fileName</span> = fileNameTemp</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">msg</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(item.<span class="property">chatType</span> === <span class="number">1</span>)&#123;</span><br><span class="line">                srcImgList.<span class="property">value</span>.<span class="title function_">push</span>(item.<span class="property">msg</span>)</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h1 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h1><h2 id="断点上传"><a href="#断点上传" class="headerlink" title="断点上传"></a>断点上传</h2><h3 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h3><ul><li>上传分片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/uploadslice&quot;)</span></span><br><span class="line"><span class="comment">//    File file, Long chunkcnt,String md5</span></span><br><span class="line">    <span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">uploadchunks</span><span class="params">(<span class="meta">@RequestPart(&quot;file&quot;)</span>MultipartFile file , <span class="meta">@RequestPart(&quot;hash&quot;)</span> String hash, <span class="meta">@RequestPart(&quot;chunkcnt&quot;)</span> String chunkcnt ,<span class="meta">@RequestPart(&quot;filename&quot;)</span> String filename, <span class="meta">@RequestPart(&quot;totalCnt&quot;)</span> String totalCnt)</span> <span class="keyword">throws</span> IOException, InterruptedException &#123;</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, filename);</span><br><span class="line">        <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">        <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> filename.substring(<span class="number">0</span>, filename.lastIndexOf(<span class="string">&quot;.&quot;</span>) - <span class="number">1</span>);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, suffix);</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, prefix);</span><br><span class="line">        <span class="type">File</span> <span class="variable">dir</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath  + hash+ <span class="string">&quot;\\&quot;</span> + prefix+  <span class="string">&quot;_&quot;</span> + chunkcnt);</span><br><span class="line">        <span class="keyword">if</span>(!dir.exists())&#123;</span><br><span class="line">            dir.mkdirs();</span><br><span class="line">        &#125;</span><br><span class="line">        file.transferTo(dir);</span><br><span class="line">        <span class="comment">//        uploadcache.put(hash, Integer.parseInt(chunkcnt));</span></span><br><span class="line">        <span class="keyword">if</span>(uploadcache.containsKey(hash)) uploadcache.put(hash, uploadcache.get(hash) + <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">else</span> uploadcache.put(hash, <span class="number">0</span>);</span><br><span class="line">        log.info(<span class="string">&quot;当前写了: &#123;&#125;&quot;</span>, chunkcnt);</span><br><span class="line">        <span class="keyword">if</span>(chunkcnt.equals(totalCnt))&#123;</span><br><span class="line">            <span class="comment">//执行合并</span></span><br><span class="line">            <span class="type">boolean</span> <span class="variable">ismerge</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">            <span class="keyword">while</span>(!ismerge)&#123;</span><br><span class="line">                <span class="type">int</span> <span class="variable">n</span> <span class="operator">=</span> Integer.parseInt(totalCnt);</span><br><span class="line">                <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= n; ++i)&#123;</span><br><span class="line">                    <span class="type">File</span> <span class="variable">fileitem</span>    <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + hash + <span class="string">&quot;\\&quot;</span> + prefix + <span class="string">&quot;_&quot;</span> + i);</span><br><span class="line">                    <span class="keyword">if</span>(!fileitem.exists())&#123;</span><br><span class="line">                        log.info(<span class="string">&quot;还有文件没有输入结束&quot;</span>);</span><br><span class="line">                        <span class="keyword">break</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="keyword">if</span>(i == n) ismerge = <span class="literal">true</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            log.info(<span class="string">&quot;当前的文件为&#123;&#125;/&#123;&#125;&quot;</span>,chunkcnt ,totalCnt);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> R.success(<span class="number">1</span>);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><ul><li>合并文件</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/merge&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">fileMerge</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hash</span> <span class="operator">=</span> map.get(<span class="string">&quot;hash&quot;</span>).toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">filename</span> <span class="operator">=</span> map.get(<span class="string">&quot;filename&quot;</span>).toString();</span><br><span class="line">    <span class="type">Integer</span> <span class="variable">totalCnt</span> <span class="operator">=</span> Integer.valueOf(map.get(<span class="string">&quot;totalCnt&quot;</span>).toString());</span><br><span class="line">    log.info(<span class="string">&quot;开始合并&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">suffix</span> <span class="operator">=</span> filename.substring(filename.lastIndexOf(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">prefix</span> <span class="operator">=</span> filename.substring(<span class="number">0</span>, filename.lastIndexOf(<span class="string">&quot;.&quot;</span>) - <span class="number">1</span>);</span><br><span class="line">    <span class="type">File</span> <span class="variable">mergeFile</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + filename);</span><br><span class="line">    <span class="type">BufferedOutputStream</span> <span class="variable">bos</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedOutputStream</span>(<span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(mergeFile));</span><br><span class="line">    <span class="comment">// 获取到所有的files</span></span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;&quot;</span>, basepath +  hash);</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt;= totalCnt; ++i)&#123;</span><br><span class="line"></span><br><span class="line">        <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + hash + <span class="string">&quot;\\&quot;</span> + prefix + <span class="string">&quot;_&quot;</span> +Integer.toString(i));</span><br><span class="line">        log.info(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>, file.length(), file.getName());</span><br><span class="line">        <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(file));</span><br><span class="line">        <span class="type">byte</span>[] buffer = <span class="keyword">new</span> <span class="title class_">byte</span>[<span class="number">1024</span>];</span><br><span class="line">        <span class="comment">// 记录每次读取的字节数</span></span><br><span class="line">        <span class="type">int</span> len;</span><br><span class="line">        <span class="comment">// 循环读取分片文件，直到读完</span></span><br><span class="line">        <span class="keyword">while</span> ((len = bis.read(buffer)) != -<span class="number">1</span>) &#123;</span><br><span class="line">            <span class="comment">// 将读取的数据写入合并后的文件</span></span><br><span class="line">            bos.write(buffer, <span class="number">0</span>, len);</span><br><span class="line">        &#125;</span><br><span class="line">        bis.close();</span><br><span class="line">    &#125;</span><br><span class="line">    bos.flush();</span><br><span class="line">    bos.close();</span><br><span class="line">    log.info(<span class="string">&quot;合并成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(<span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断这次上传的文件要从第几个分片开始上传</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/reupload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">reUpload</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">hash</span> <span class="operator">=</span> map.get(<span class="string">&quot;result&quot;</span>).toString();</span><br><span class="line">    <span class="keyword">if</span>(!uploadcache.containsKey(hash)) <span class="keyword">return</span> R.success(<span class="number">0</span>);</span><br><span class="line">    <span class="comment">// 上传下一位就好了</span></span><br><span class="line">    <span class="keyword">return</span> R.success(uploadcache.get(hash) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h3><blockquote><p>你需要先下载 md5 的包才能继续往下看， 指令为<code>npm install spark-md5</code></p></blockquote><ul><li>将文件的内容进行分片（我这里默认是 1024 KB）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里传递的参数 files 为 File格式的对象， chunkSize 表示 分片的大小（我的chunkSize 为 1024 * 1024）</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">createChunks</span>(<span class="params">files, chunkSize</span>) &#123;</span><br><span class="line">    <span class="keyword">const</span> results = []</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; files.<span class="property">size</span>; i += chunkSize)&#123;</span><br><span class="line">        results.<span class="title function_">push</span>(files.<span class="title function_">slice</span>(i, i + chunkSize))</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> results</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>上面的<strong>createChunks</strong>函数返回了 数组 ， 我们用一个变量接受它，</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> chunks = <span class="title function_">createChunks</span>(file, <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line"><span class="title function_">hash</span>(chunks) <span class="comment">// 这个函数再下面</span></span><br></pre></td></tr></table></figure><ul><li>再将文件的内容读取转换为 md5</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 这里传递的参数为 file格式的对象</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">hash</span>(<span class="params">chunks</span>)&#123;</span><br><span class="line">    <span class="keyword">const</span> spark = <span class="keyword">new</span> <span class="title class_">SparkMD5</span></span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">Promise</span>(<span class="function"><span class="params">resovle</span>=&gt;</span>&#123;</span><br><span class="line">        <span class="keyword">function</span> <span class="title function_">_read</span>(<span class="params">i</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(i &gt;= chunks.<span class="property">length</span>)&#123;</span><br><span class="line">                <span class="comment">//输出一个哈希</span></span><br><span class="line">                <span class="title function_">resovle</span>(spark.<span class="title function_">end</span>());</span><br><span class="line">                <span class="keyword">return</span> ;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">const</span> blob = chunks[i]</span><br><span class="line">            <span class="keyword">const</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span></span><br><span class="line">            reader.<span class="property">onload</span> = <span class="function"><span class="params">e</span>=&gt;</span>&#123;</span><br><span class="line">                <span class="keyword">const</span> bytes = e.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">                spark.<span class="title function_">append</span>(bytes)</span><br><span class="line">                <span class="title function_">_read</span>(i + <span class="number">1</span>)</span><br><span class="line">            &#125; </span><br><span class="line">            reader.<span class="title function_">readAsArrayBuffer</span>(blob)</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="title function_">_read</span>(<span class="number">0</span>)</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>获取上次上传文件的进度</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> reuploadcnt = <span class="keyword">await</span> <span class="title function_">reUpload</span>(reuploadobj)</span><br></pre></td></tr></table></figure><ul><li>这里就是对每一个分片进行下载（这里是单线程下载）</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = reuploadcnt; i &lt; chunks.<span class="property">length</span>; ++i)&#123;</span><br><span class="line">    <span class="comment">// const loop = async(index, i, result, filesizes)=&gt;&#123;</span></span><br><span class="line">    <span class="keyword">if</span>(stopupload.<span class="property">value</span>[index] === <span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// let file = chunks[i]</span></span><br><span class="line">    <span class="keyword">let</span> chunkcnt = i</span><br><span class="line">    <span class="keyword">let</span> md5 = result</span><br><span class="line">    <span class="keyword">const</span> formData = <span class="keyword">new</span> <span class="title class_">FormData</span>()</span><br><span class="line">    <span class="keyword">const</span> blob = chunks[i]</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;file&#x27;</span>, blob)</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;hash&#x27;</span>, result)</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;chunkcnt&#x27;</span>, i)</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;filename&#x27;</span>, files.<span class="property">name</span>)</span><br><span class="line">    formData.<span class="title function_">append</span>(<span class="string">&#x27;totalCnt&#x27;</span>, chunks.<span class="property">length</span> - <span class="number">1</span>)  </span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">post</span>(<span class="string">&#x27;/api/uploadslice&#x27;</span>, (formData),&#123;</span><br><span class="line">        <span class="attr">onUploadProgress</span>: <span class="keyword">function</span>(<span class="params">progressEvent</span>)&#123;</span><br><span class="line">            <span class="keyword">function</span> <span class="title function_">sendHeartbeat</span>(<span class="params"></span>) &#123;  </span><br><span class="line">                <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">                    <span class="keyword">if</span> (socket.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;  </span><br><span class="line">                        socket.<span class="title function_">send</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 发送空的心跳包给服务器  </span></span><br><span class="line">                        <span class="title function_">sendHeartbeat</span>(); <span class="comment">// 递归调用发送心跳包函数，以保持连接活跃  </span></span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                        <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已关闭&#x27;</span>);  </span><br><span class="line">                    &#125;  </span><br><span class="line">                &#125;, <span class="number">5000</span>); <span class="comment">// 每30秒发送一次心跳包给服务器  </span></span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">if</span>( valueUploadList.<span class="property">value</span>[index] + ( (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / filesizes) &lt;= ((i + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>) / filesizes)</span><br><span class="line">                valueUploadList.<span class="property">value</span>[index] += ( (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / filesizes)</span><br><span class="line">            <span class="keyword">else</span> </span><br><span class="line">                valueUploadList.<span class="property">value</span>[index] = ((i + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span> * <span class="number">100</span>) / filesizes</span><br><span class="line">            <span class="keyword">if</span>(stopupload.<span class="property">value</span>[index] === <span class="literal">true</span>)&#123;</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>(stopupload.<span class="property">value</span>[index] === <span class="literal">true</span>)&#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// &#125;</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>在所有文件上传完成之后开始合并操作</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> merge = &#123;</span><br><span class="line">    <span class="attr">hash</span>:  result,</span><br><span class="line">    <span class="attr">filename</span>: files.<span class="property">name</span>,</span><br><span class="line">    <span class="attr">totalCnt</span>: chunks.<span class="property">length</span> - <span class="number">1</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">const</span> finish = <span class="keyword">await</span> <span class="title function_">fileMerge</span>(merge)</span><br></pre></td></tr></table></figure><h2 id="断点下载"><a href="#断点下载" class="headerlink" title="断点下载"></a>断点下载</h2><blockquote><p>类似于断点上传， 只不过是把过程放过来</p></blockquote><h3 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h3><ul><li>判断请求的文件的大小</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/getsize&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Long&gt; <span class="title function_">getFileSize</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> map.get(<span class="string">&quot;fileName&quot;</span>).toString();</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + fileName);</span><br><span class="line">    <span class="keyword">return</span> R.success(file.length());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>判断上一次 下载到哪个分片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@PostMapping(&quot;/redownload&quot;)</span></span><br><span class="line"><span class="keyword">public</span> R&lt;Integer&gt; <span class="title function_">redownload</span><span class="params">(<span class="meta">@RequestBody</span> Map map)</span>&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">fileName</span> <span class="operator">=</span> map.get(<span class="string">&quot;fileName&quot;</span>).toString();</span><br><span class="line">    <span class="type">String</span> <span class="variable">userid</span> <span class="operator">=</span> map.get(<span class="string">&quot;userid&quot;</span>).toString();</span><br><span class="line">    String encrypted= DigestUtils.md5DigestAsHex((basepath + fileName + userid).getBytes());</span><br><span class="line">    <span class="keyword">if</span>(downloadcache.containsKey(encrypted) == <span class="literal">false</span>) <span class="keyword">return</span> R.success(<span class="number">0</span>);</span><br><span class="line">    <span class="keyword">return</span> R.success(downloadcache.get(encrypted) + <span class="number">1</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下载分片</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping(&quot;/downloadslicefile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloadSliceFile</span><span class="params">(HttpServletResponse response, HttpServletRequest request , String fileName, String extend, Long start, Long end, <span class="type">int</span> curcnt, String userid, <span class="type">int</span> totalcnt)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">contentLength</span> <span class="operator">=</span> request.getContentLength();</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125; : &#123;&#125;&quot;</span> , start, end);</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + fileName);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        result.put(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;下载的文件不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    response.reset();</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentLength((<span class="type">int</span>) file.length());</span><br><span class="line">    <span class="comment">// 请求头一定要写不让发不出来</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(file.getName(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    response.setHeader(<span class="string">&quot;Accept-Range&quot;</span>, <span class="string">&quot;bytes&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">contentRange</span> <span class="operator">=</span> String.valueOf(<span class="keyword">new</span> <span class="title class_">StringBuffer</span>(<span class="string">&quot;bytes &quot;</span>).append(start).append(<span class="string">&quot;-&quot;</span>).append(end));</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Range&quot;</span>, contentRange);</span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Length&quot;</span>, String.valueOf(end - start + <span class="number">1</span>));</span><br><span class="line">    <span class="type">RandomAccessFile</span> <span class="variable">rf</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RandomAccessFile</span>(basepath + fileName, <span class="string">&quot;r&quot;</span>);</span><br><span class="line">    rf.seek(start);</span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    <span class="type">byte</span>[] bytes = <span class="keyword">new</span> <span class="title class_">byte</span>[(<span class="type">int</span>) (end - start + <span class="number">1</span>)];</span><br><span class="line">    <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> rf.read(bytes);</span><br><span class="line">    <span class="keyword">if</span>(len != -<span class="number">1</span>) os.write(bytes ,<span class="number">0</span>, (<span class="type">int</span>) (end - start + <span class="number">1</span>));</span><br><span class="line">    rf.close();</span><br><span class="line">    os.close();</span><br><span class="line">    result.put(<span class="string">&quot;success&quot;</span>, <span class="string">&quot;文件下载成功&quot;</span>);</span><br><span class="line"></span><br><span class="line">    String encrypted= DigestUtils.md5DigestAsHex((basepath + fileName + userid).getBytes());</span><br><span class="line">    downloadcache.put(encrypted, curcnt);</span><br><span class="line">    log.info(<span class="string">&quot;&#123;&#125;: &#123;&#125;&quot;</span>, curcnt, totalcnt);</span><br><span class="line">    <span class="keyword">if</span>(curcnt == totalcnt)&#123;</span><br><span class="line">        downloadcache.remove(encrypted);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h3><ul><li>请求文件的大小</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> sizehigh = <span class="keyword">await</span> <span class="title function_">getSize</span>(getsizeobj)</span><br></pre></td></tr></table></figure><ul><li>获取下载的分片个数</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> downloadcnt = <span class="keyword">await</span> <span class="title function_">redownload</span>(redownloadobj)</span><br></pre></td></tr></table></figure><ul><li>对每一个分片进行下载</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = startsize;i &lt; sizehigh; i += len)&#123;</span><br><span class="line">    len = <span class="title class_">Math</span>.<span class="title function_">min</span>(sizehigh - i, <span class="number">1024</span> * <span class="number">1024</span>)</span><br><span class="line">    <span class="keyword">await</span> axios.<span class="title function_">get</span>(<span class="string">&#x27;/api/downloadslicefile&#x27;</span>,&#123;</span><br><span class="line">        <span class="attr">params</span>: &#123;</span><br><span class="line">            <span class="attr">fileName</span>: item.<span class="property">fileName</span>,</span><br><span class="line">            <span class="attr">extend</span>: item.<span class="property">extend</span>,</span><br><span class="line">            <span class="attr">start</span>: i,</span><br><span class="line">            <span class="attr">end</span>: i + len - <span class="number">1</span>,</span><br><span class="line">            <span class="attr">curcnt</span>: curcnt,</span><br><span class="line">            <span class="attr">userid</span>: userstore.<span class="property">userid</span>,</span><br><span class="line">            <span class="attr">totalcnt</span>: totalcnt</span><br><span class="line">        &#125;, </span><br><span class="line">        <span class="attr">headers</span>: &#123;</span><br><span class="line">            <span class="attr">range</span>: <span class="string">`bytes=<span class="subst">$&#123;i&#125;</span>-<span class="subst">$&#123;i + len - <span class="number">1</span>&#125;</span>`</span></span><br><span class="line">        &#125;,</span><br><span class="line">        <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span>,</span><br><span class="line">        <span class="title function_">onDownloadProgress</span>(<span class="params">progressEvent</span>)&#123;</span><br><span class="line">            <span class="keyword">if</span>(valueList.<span class="property">value</span>[index] + (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / sizehigh &gt; ((curcnt + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span>) / sizehigh * <span class="number">100</span>)</span><br><span class="line">                valueList.<span class="property">value</span>[index] = ((curcnt + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span>) / sizehigh * <span class="number">100</span></span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">                valueList.<span class="property">value</span>[index] += (progressEvent.<span class="property">loaded</span> * <span class="number">100</span>) / sizehigh;</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;当前进度条位： &#x27;</span>, valueList.<span class="property">value</span>[index] + <span class="string">&#x27;  正在传送 &#x27;</span> + curcnt + <span class="string">&#x27;   &#x27;</span> + ((curcnt + <span class="number">1</span>) * <span class="number">1024</span> * <span class="number">1024</span>) / sizehigh * <span class="number">100</span>);</span><br><span class="line">            <span class="keyword">if</span>(stopdownload.<span class="title function_">get</span>(index) === <span class="literal">true</span>)&#123;</span><br><span class="line">                arraymap.<span class="title function_">set</span>(index, arrayBufferArray)</span><br><span class="line">                <span class="variable language_">console</span>.<span class="title function_">log</span>(curcnt);</span><br><span class="line">                <span class="keyword">return</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;).<span class="title function_">then</span>(<span class="function"><span class="params">clip</span>=&gt;</span>&#123;</span><br><span class="line">        arrayBufferArray.<span class="title function_">push</span>(clip)</span><br><span class="line">        <span class="comment">// console.log(clip);</span></span><br><span class="line">        curcnt += <span class="number">1</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>下载完成之后 合并文件</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">concatArrayBuffer</span>(<span class="params">arrayBufferArray</span>) &#123;</span><br><span class="line">    <span class="keyword">let</span> totalLength = <span class="number">0</span>;</span><br><span class="line">    arrayBufferArray.<span class="title function_">forEach</span>(<span class="function"><span class="params">arrayBuffer</span> =&gt;</span> &#123;</span><br><span class="line">        totalLength += arrayBuffer.<span class="property">byteLength</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">const</span> result = <span class="keyword">new</span> <span class="title class_">Uint8Array</span>(totalLength);</span><br><span class="line">    <span class="keyword">let</span> offset = <span class="number">0</span>;</span><br><span class="line">    arrayBufferArray.<span class="title function_">forEach</span>(<span class="function"><span class="params">arrayBuffer</span> =&gt;</span> &#123;</span><br><span class="line">        result.<span class="title function_">set</span>(<span class="keyword">new</span> <span class="title class_">Uint8Array</span>(arrayBuffer), offset);</span><br><span class="line">        offset += arrayBuffer.<span class="property">byteLength</span>;</span><br><span class="line">    &#125;);</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(i + len === sizehigh)&#123;</span><br><span class="line">     <span class="keyword">let</span> res = <span class="title function_">concatArrayBuffer</span>(arrayBufferArray)</span><br><span class="line">     <span class="keyword">const</span> blob = <span class="keyword">await</span> <span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;<span class="attr">type</span>: item.<span class="property">extend</span>&#125;)</span><br><span class="line">     <span class="keyword">const</span> url = <span class="variable constant_">URL</span>.<span class="title function_">createObjectURL</span>(blob)</span><br><span class="line">     <span class="keyword">const</span> a = <span class="variable language_">document</span>.<span class="title function_">createElement</span>(<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line">     a.<span class="property">download</span> = item.<span class="property">fileName</span></span><br><span class="line">     a.<span class="property">href</span> = url </span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">appendChild</span>(a)</span><br><span class="line">     a.<span class="title function_">click</span>()</span><br><span class="line">     <span class="variable language_">document</span>.<span class="property">body</span>.<span class="title function_">removeChild</span>(a)    </span><br><span class="line">     <span class="title class_">ElNotification</span>(&#123;</span><br><span class="line">         <span class="attr">type</span>: <span class="string">&#x27;success&#x27;</span>,</span><br><span class="line">         <span class="attr">title</span>: <span class="string">&#x27;获得了一个文件🎉&#x27;</span>,</span><br><span class="line">         <span class="attr">message</span>: <span class="string">&#x27;下载成功🥳&#x27;</span></span><br><span class="line">     &#125;)  </span><br><span class="line">     arraymap.<span class="title function_">delete</span>(index)</span><br><span class="line">     <span class="title function_">resetValue</span>(index)</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>如果中途停止下载， 利用一个map对象存储对应index 的 已下载的数据</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(stopdownload.<span class="title function_">get</span>(index) === <span class="literal">true</span>)&#123;</span><br><span class="line">    arraymap.<span class="title function_">set</span>(index, arrayBufferArray)</span><br><span class="line">    <span class="keyword">return</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 疑难解惑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picgo和GitHub搭建的问题</title>
      <link href="/2023/10/28/Picgo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/10/28/Picgo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="报错403"><a href="#报错403" class="headerlink" title="报错403"></a>报错403</h1><p>将github 作为 图床的时候出现了问题，打开日志文档一看， 报错403， 在网上搜寻无果。</p><p>然后回想起在github 生成token的时候没有点击任何选项</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282025158.png" alt="image-20231028202525111"></p><p>将这个repo 勾选之后， 发送图片成功</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> github 图床 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
