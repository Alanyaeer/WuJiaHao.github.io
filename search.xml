<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>mysql</title>
      <link href="/2023/11/06/mysql/"/>
      <url>/2023/11/06/mysql/</url>
      
        <content type="html"><![CDATA[<h1 id="报告错误总结"><a href="#报告错误总结" class="headerlink" title="报告错误总结"></a>报告错误总结</h1><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802384.png" alt="image-20230515190512074"></p><p>​              <strong>多半是用了查询语句， 但是执行用的是executeUpdate, 要使用executeQuery</strong></p><p>对于创建文件来说， 它返回的受到影响的行数为0， 所以这时候不要用以下语句来判断是否成功</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803727.png" alt="image-20230515190629844"></p><h1 id="Mysql"><a href="#Mysql" class="headerlink" title="Mysql"></a>Mysql</h1><p>用 主机访问虚拟机（master）的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">create user &#x27;panda&#x27;@&#x27;%&#x27; identified by &#x27;Wjh3.1415926535&#x27;;</span><br><span class="line">grant all on *.* to &#x27;panda&#x27;@&#x27;%&#x27;;</span><br><span class="line">flush privileges;</span><br></pre></td></tr></table></figure><p>密码是Wjh3.1415926535, 用户名是 panda</p><p>进入数据库的指令</p><p><code>mysql -u root -p</code> ，<strong>我们的密码是（空的）（window） 123456（linux）</strong></p><p>快捷键</p><ol><li>shift+ctrl +c</li><li>shift+ctrl+r</li></ol><ul><li>字符集的一些注意点</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802388.png" alt="image-20221113225133612"></p><p><strong>基字符集</strong></p><ul><li>utf-8等等</li></ul><p><strong>这些是数据库排序规则</strong></p><ol><li>utf8_general_ci<code>不区分大小写</code></li><li>utf8_bin<code>区分大小写</code></li></ol><ul><li>删除数据库</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803966.png" alt="image-20221113225638295"></p><p><strong>SELECT {*|字段列名}FROM 数据表名 WHERE 查询条件</strong></p><ul><li>你可以用 *来替代所有字段列名</li><li>或者自定义字段列名</li><li>|   代表或者</li></ul><p><strong>LIMIT + 数字</strong>表示打印的个数</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    customer_number</span><br><span class="line">FROM</span><br><span class="line">    orders</span><br><span class="line">GROUP BY customer_number</span><br><span class="line">ORDER BY COUNT(*) DESC</span><br><span class="line">LIMIT 1</span><br><span class="line"># z</span><br></pre></td></tr></table></figure><h2 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802396.png" alt="image-20221113225844499"></p><ul><li>查询</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803549.png" alt="image-20221113231328062"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># t1代表的是表的名字，NAME是这个表定义的名称</span><br><span class="line">SELECT * FROM t1 WHERE NAME = &#x27;tom&#x27;</span><br><span class="line">s</span><br></pre></td></tr></table></figure><h2 id="显示数据库"><a href="#显示数据库" class="headerlink" title="显示数据库"></a>显示数据库</h2><p><code>SHOW DATABASES</code></p><ul><li>注意这里要写上s</li></ul><h2 id="显示数据库创建语句"><a href="#显示数据库创建语句" class="headerlink" title="显示数据库创建语句"></a>显示数据库创建语句</h2><p><code>SHOW CREATE DATABASE 名称</code></p><ul><li>名称尽量带上反引号，否则编译器容易误解</li><li>如果名称与关键字重合那就必须带上双引号</li></ul><p><code>SHOW CREATE DATABASE</code>  </p><h2 id="数据库删除语句（慎用）"><a href="#数据库删除语句（慎用）" class="headerlink" title="数据库删除语句（慎用）"></a>数据库删除语句（慎用）</h2><p><code>DROP DATABASE 名称</code></p><h2 id="数据库的备份"><a href="#数据库的备份" class="headerlink" title="数据库的备份"></a>数据库的备份</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802090.png" alt="image-20221115233305552"></p><ul><li>必须在dos操作系统下执行</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqldump -u root -p -B wjh_db05 &gt; d:\\pr\\bak1.sql（会自动创建文件）</span><br></pre></td></tr></table></figure><ul><li>恢复数据(方法一)</li></ul><p>要先进入mysql命令行才能够执行</p><p><code>mysql -u root -p</code></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">source d:\\bak1.sql</span><br></pre></td></tr></table></figure><ul><li>恢复方法二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">直接手动复制数据库的数据赋值到文件中,放到查询编译器中，执行</span><br></pre></td></tr></table></figure><h2 id="仅仅备份数据库中的表"><a href="#仅仅备份数据库中的表" class="headerlink" title="仅仅备份数据库中的表"></a>仅仅备份数据库中的表</h2><p><code>mysqldump -u root -p 数据库 然后表的名称</code></p><p><strong>一定要熟悉以上的语法</strong></p><h2 id="表"><a href="#表" class="headerlink" title="表"></a>表</h2><h3 id="创建表"><a href="#创建表" class="headerlink" title="创建表"></a><strong>创建表</strong></h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE table name&#123;</span><br><span class="line"> field1 datatype,</span><br><span class="line"> field2 datatype</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803580.png" alt="image-20221116090408023"></p><ol><li>character set 如果没有指定字符集，就以创建数据库的规则为准</li><li>collate 同上</li><li>engine 同上</li></ol><p>创建方式1： 用图形化创建表</p><p>创建方式2： 用指令创建表</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `user` (</span><br><span class="line"> id INT,</span><br><span class="line"> `name` VARCHAR(255),</span><br><span class="line"> `password` VARCHAR(255),</span><br><span class="line"> `birthday` DATE)</span><br><span class="line"> CHARACTER SET utf8 COLLATE utf8_bin ENGINE INNODB</span><br></pre></td></tr></table></figure><ul><li><strong>后面的类型可以不写</strong></li></ul><h3 id="修改表"><a href="#修改表" class="headerlink" title="修改表"></a>修改表</h3><ol><li>增加一个行叫做image</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">  ADD image VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">  AFTER RESUME</span><br></pre></td></tr></table></figure><ol start="2"><li>修改job列 使其长度为60</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">  MODIFY job VARCHAR(60) NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line">  AFTER RESUME</span><br></pre></td></tr></table></figure><ol start="3"><li>删除sex这一行</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE emp</span><br><span class="line">  DROP sex</span><br></pre></td></tr></table></figure><ol start="4"><li>表名改成 employee</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">RENAME TABLE emp T10 employee （第一个是数据库，第二个是要修改的原表名称，第三个是修改后的表名</span><br></pre></td></tr></table></figure><ol start="5"><li>修改表的字符集为utf8</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employee CHARACTER SET utf8</span><br></pre></td></tr></table></figure><ol start="6"><li>列名name改成user_name</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ALTER TABLE employee </span><br><span class="line"> CHANGE `name` `user_name` VARCHAR(64) NOT NULL DEFAULT &#x27;&#x27;</span><br></pre></td></tr></table></figure><h2 id="MySQL的常用数据类型"><a href="#MySQL的常用数据类型" class="headerlink" title="MySQL的常用数据类型"></a>MySQL的常用数据类型</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804568.png" alt="image-20221116092017426"></p><ol><li>数值类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802392.png" alt="image-20221116092456448"></p><ol start="2"><li>文本类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804791.png" alt="image-20221116092635015"></p><ol start="3"><li>二进制数据类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804504.png" alt="image-20221116092747860"></p><ol start="4"><li>日期类型</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802448.png" alt="image-20221116092833735"></p><p>​           datetime YYYY-MM-DD HH:MM:SS</p><ol start="5"><li><p>时间戳</p><p><strong>timestamp</strong></p></li></ol><h3 id="列类型"><a href="#列类型" class="headerlink" title="列类型"></a>列类型</h3><h4 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h4><ol><li>使用规则：在能够满足需求的情况下，尽量选择小的数据类型</li><li>必须要在数据范围内的数据才能够被存入到数据中</li></ol><h4 id="bit"><a href="#bit" class="headerlink" title="bit"></a>bit</h4><ol><li>打印出来是以二进制的形式输出</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t05(num BIT(8));</span><br><span class="line">INSERT INTO t05 VALUES(254);</span><br><span class="line">SELECT* FROM t05; </span><br></pre></td></tr></table></figure><h4 id="数值类型"><a href="#数值类型" class="headerlink" title="数值类型"></a>数值类型</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t06(</span><br><span class="line"> nums1 FLOAT,</span><br><span class="line"> nums2 DOUBLE,</span><br><span class="line"> nums3 DECIMAL(30,20));</span><br><span class="line">INSERT INTO t06 VALUES(88.661616,88.6151515115151,88.5555555555555);</span><br><span class="line">SELECT *FROM t06;</span><br></pre></td></tr></table></figure><p>输出结果为</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804479.png" alt="image-20221116121209785"></p><ul><li><p>DECIMAL的注意事项</p></li><li><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221116121243929.png" alt="image-20221116121243929"></p></li><li><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802145.png" alt="image-20221116121341610"></p></li></ul><h4 id="字符串类型"><a href="#字符串类型" class="headerlink" title="字符串类型"></a>字符串类型</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804303.png" alt="image-20221118120951402"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802185.png" alt="image-20221116121735280"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802381.png" alt="image-20221116121843219"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t10(</span><br><span class="line"> `name` VARCHAR(32766))CHARSET gbk;</span><br></pre></td></tr></table></figure><ul><li><input checked="" disabled="" type="checkbox"> 在数据范围内</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t10(</span><br><span class="line"> `name` VARCHAR(32767))CHARSET gbk;</span><br></pre></td></tr></table></figure><ul><li><input disabled="" type="checkbox"> 超过了gbk格式的数据范围</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221116122220141.png" alt="image-20221116122220141"></p><p><strong>提示输入数值过大</strong></p><blockquote><p>问题1：为什么这里要减去三个字节</p><p>回答： 因为要用1~3的字节去记录大小</p><p>问题2：这里的size是代表字符还是字节</p><p>回答：是字符</p></blockquote><ul><li>细节</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804984.png" alt="image-20221118121154289"></p><p><strong>注意这里面的4是字符而不是字节</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t11(</span><br><span class="line"> `name` CHAR(4));</span><br><span class="line">INSERT INTO t11 VALUES(&#x27;abs&#x27;);</span><br><span class="line">SELECT * FROM t11;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802478.png" alt="image-20221118122106130"></p><ul><li>varchar是一个可变长的字符，不会造成空间的浪费，而CHAR只能根据最开始分配的空间来给内存</li><li>但是char的查询速度快于varchar，如果数据的定长的话，我们就尽量去使用char</li><li>如果varchar不够用，可以使用mediumtext或者longtext，或者可以写text</li></ul><p>总 结</p><ol><li>空间大小上： <code>char &gt; varchar</code></li><li>速度快慢上：<code>char &gt; varchar</code></li><li>如果文本过大就选择text</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061802520.png" alt="image-20221118122643836"></p><h4 id="日期"><a href="#日期" class="headerlink" title="日期"></a>日期</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804913.png" alt="image-20221119143143769"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t14(</span><br><span class="line"> birthday DATE , -- 生日</span><br><span class="line"> jobtime DATETIME ,-- 记录年月日 时分秒</span><br><span class="line"> login_time TIMESTAMP </span><br><span class="line">  NOT NULL DEFAULT CURRENT_TIMESTAMP </span><br><span class="line">  ON UPDATE CURRENT_TIMESTAMP);-- 登录时间</span><br><span class="line">SELECT *FROM t14;</span><br><span class="line">INSERT INTO t14(birthday,jobtime)</span><br><span class="line"> VALUES(&#x27;2022-11-11&#x27;,&#x27;2022-11-11 10:10:10&#x27;);</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061804550.png" alt="image-20221119143948153"></p><p><strong>不用输入时间自动跳出来登陆时间</strong></p><p>需要输入 </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">NO NULL DEFAULT CURRENT_TIMESTAMP ON UPDATE CURRENT_TIMESTAMP</span><br></pre></td></tr></table></figure><h3 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE `emp`(</span><br><span class="line"> id INT,</span><br><span class="line"> `name` VARCHAR(32),</span><br><span class="line"> sex CHAR(1),</span><br><span class="line"> birthday DATE,</span><br><span class="line"> entry_date DATETIME,</span><br><span class="line"> job VARCHAR(32),</span><br><span class="line"> salary DOUBLE,</span><br><span class="line"> `resume` TEXT) CHARSET utf8 COLLATE utf8_bin ENGINE INNODB;</span><br><span class="line"># 添加的时间</span><br><span class="line">INSERT INTO `emp`</span><br><span class="line"> VALUES(100,&#x27;小妖怪&#x27;,&#x27;男&#x27;,&#x27;2000-11-11&#x27;,</span><br><span class="line"> &#x27;2010-11-10 11:11:11&#x27;,&#x27;巡山的&#x27;,3000,&#x27;大王叫我来巡山&#x27;);</span><br><span class="line">SELECT *FROM `emp`</span><br><span class="line"> </span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221119144705934.png" alt="image-20221119144705934"></p><h2 id="CRUD"><a href="#CRUD" class="headerlink" title="CRUD"></a>CRUD</h2><h3 id="insert-语句"><a href="#insert-语句" class="headerlink" title="insert 语句"></a>insert 语句</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221119164904712.png" alt="image-20221119164904712"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 注意写上字符集以及校对规则和引擎</span><br><span class="line">CREATE TABLE `good`(</span><br><span class="line"> id INT,</span><br><span class="line"> goods_name VARCHAR(15),</span><br><span class="line"> price DOUBLE)CHARSET utf8 COLLATE utf8_bin ENGINE INNODB;</span><br><span class="line">INSERT INTO `good` (id,goods_name,price)</span><br><span class="line"> VALUES(10,&#x27;华为手机&#x27;,2000);</span><br><span class="line">INSERT INTO `good` (id,goods_name,price)</span><br><span class="line"> VALUES(20,&#x27;苹果手机&#x27;,3000);</span><br><span class="line">SELECT* FROM good;</span><br><span class="line"></span><br><span class="line">#上诉的insert语句也可以简化写为（但是必须和你写的表的顺序一致）</span><br><span class="line">INSERT INTO `good` </span><br><span class="line"> VALUES(20,&#x27;苹果手机&#x27;,3000);</span><br></pre></td></tr></table></figure><ul><li>注意点</li></ul><ol><li><blockquote><p>插入的数据应当和字段类型相同。</p></blockquote></li></ol><p>错误示范：</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221119170335962.png" alt="image-20221119170335962"></p><p>同时我们用单引号括起来的是一个数字，那么它会进行转型，这种时候就是正确的</p><ol start="2"><li><blockquote><p>数据的长度应该在列的范围内</p></blockquote></li></ol><p>错误示范：</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803671.png" alt="image-20221119170536712"></p><ol start="3"><li><blockquote><p>在values中列出的数据位置必须与被加入的列的排列位置相对应</p></blockquote></li><li><blockquote><p>字符和日期形数据应该包含在单引号中</p></blockquote></li><li><blockquote><p>列可以插入空值（前提是该字段允许为空），insert into table value (null)</p></blockquote></li><li><blockquote><p> insert into tab_name(列名..)</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">INSERT INTO `goods` v（填入内容） （填入内容） （填入内容）</span><br></pre></td></tr></table></figure><ol start="7"><li><blockquote><p>如果是给表中的所有字段添加数据，可以不写前面的字段名称,但是不能少一条字段</p></blockquote></li><li><blockquote><p>默认值，当不给某个字段值时，如果有默认值就会添加默认值，否则报错</p></blockquote></li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 这个时候就是可以的</span><br><span class="line">CREATE TABLE &#x27;goods&#x27;(</span><br><span class="line">  id INT,</span><br><span class="line">     &#x27;label&#x27; VARCHAR(10),</span><br><span class="line">     &#x27;price&#x27; DOUBLE </span><br><span class="line"> )</span><br><span class="line">INSERT INTO `goods`(id,goods_name)</span><br><span class="line">  VALUES(80,&#x27;格力手机&#x27;);</span><br><span class="line"># 当表的创建格式为以下的情况的时候,编译器就会报错</span><br><span class="line">CREATE TABLE &#x27;goods&#x27;(</span><br><span class="line">  id INT,</span><br><span class="line">     &#x27;label&#x27; VARCHAR(10),</span><br><span class="line">     &#x27;price&#x27; DOUBLE NOT NULL DEFAULT &#x27;&#x27;</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h3 id="delete语句"><a href="#delete语句" class="headerlink" title="delete语句"></a>delete语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">delete from xxx(the name of list) where user_name = &quot;yyy&quot;</span><br><span class="line"># 从表名为 xxx 的表中 删除掉名字为 yyy 的 的那一列</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"># 删除表中的名称为yy的user_name</span><br><span class="line">DELETE FROM xxx</span><br><span class="line">  WHERE user_name = &#x27;yyy&#x27;;</span><br><span class="line"># 删除表中为user_name的数据</span><br><span class="line">DELETE FROM XXX</span><br><span class="line"></span><br><span class="line"># 删除表中邮箱相同的,并且只保留它的id最小值</span><br><span class="line">DELETE p1 from </span><br><span class="line">        Person p1,Person p2</span><br><span class="line">        where </span><br><span class="line">        p1.email=p2.email AND p1.id&gt;p2.id</span><br><span class="line">        </span><br><span class="line">DELETE </span><br><span class="line">FROM</span><br><span class="line"> Person </span><br><span class="line">WHERE</span><br><span class="line"> id NOT IN (SELECT * FROM ( SELECT min( id ) AS id FROM Person GROUP BY email ) t)</span><br><span class="line">    </span><br><span class="line"># delete不能删除某一列的数据</span><br><span class="line"># 如果需要删掉某一行的一个字段，我们需要利用update进行替换</span><br><span class="line">UPDATE employee SET job = &#x27;&#x27; WHERE user_name = &#x27;老妖怪&#x27;</span><br><span class="line"></span><br><span class="line"># 删除表是用drop而不是delete</span><br></pre></td></tr></table></figure><ul><li>因为delete语句不能删除某一列的值（可使用update 设为null)</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE xxx(表名称) SET x = &#x27;&#x27; WHERE user_name = &#x27;老妖怪&#x27; </span><br></pre></td></tr></table></figure><h3 id="update语句"><a href="#update语句" class="headerlink" title="update语句"></a>update语句</h3><ol><li>将所有的员工薪水修改为5000</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATuE employee SET salary = 5000</span><br></pre></td></tr></table></figure><ol start="2"><li>将姓名为小妖怪的员工修改为3000</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employee set salary = 3000 where user_name = &#x27;小妖怪&#x27; </span><br></pre></td></tr></table></figure><ol start="3"><li>将老妖怪的薪水增加3000</li></ol><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">UPDATE employee set salary = salary + 3000 where user_name = &#x27;老妖怪&#x27; </span><br></pre></td></tr></table></figure><ul><li>set可以根据需要修改多个字段的值</li></ul><p><code>set xxx = xxxx yyy = yyyy</code></p><h4 id="CASE语句"><a href="#CASE语句" class="headerlink" title="CASE语句"></a>CASE语句</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 将性别为男的改成女的，女的改成男的</span><br><span class="line">UPDATE salary</span><br><span class="line">SET</span><br><span class="line">    sex = CASE sex</span><br><span class="line">        WHEN &#x27;m&#x27; THEN &#x27;f&#x27;</span><br><span class="line">        ELSE &#x27;m&#x27;</span><br><span class="line">    END;</span><br></pre></td></tr></table></figure><h3 id="select-语句"><a href="#select-语句" class="headerlink" title="select 语句"></a>select 语句</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT  *FROM `student`;</span><br><span class="line"># 去重查询（必须查出来的每一个列都相同）</span><br><span class="line">select DISTINCT english from student</span><br><span class="line"></span><br><span class="line">#如果两个人的英语成select DISTINCT english from student绩相同但是名字不一样</span><br><span class="line">select DISTINCT english name from student</span><br><span class="line">#这个时候，就不会去重</span><br></pre></td></tr></table></figure><h4 id="案列"><a href="#案列" class="headerlink" title="案列"></a>案列</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">SELECT `name` (chinese+math+english)from student</span><br><span class="line"># 计算学术三个科目的总分</span><br><span class="line">SELECT `name` as &#x27;名字&#x27;,(chinese+math+english) as &#x27;总分&#x27;</span><br><span class="line">from student</span><br><span class="line"># as可以替换名字</span><br></pre></td></tr></table></figure><h4 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h4><p>   <strong>自己到力扣做题就懂了</strong></p><ul><li><strong>如果想要离散的空间查询需要用到IN</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select * from student where math in(89,90,91)</span><br><span class="line"># 代表着查询数学成绩为 89, 90 ,91的学生</span><br></pre></td></tr></table></figure><ul><li>模糊匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">select *from student where math like &#x27;韩%&#x27;</span><br><span class="line"># 一定要加上%</span><br><span class="line"></span><br><span class="line"># 需要注意的是这里没有讲清楚实际上 :</span><br><span class="line">#如果这里写的是 %韩% 的话那么代表查找存在韩的数据</span><br><span class="line"># 如果是韩% 代表查找以韩开头的数据</span><br><span class="line"># 如果是%韩 , 代表查找 以韩为结尾d</span><br></pre></td></tr></table></figure><h4 id="排序"><a href="#排序" class="headerlink" title="排序"></a>排序</h4><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803693.png" alt="image-20221120094701115"></p> <figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">select * from student </span><br><span class="line">  order by math(默认升序)</span><br><span class="line">select * from student </span><br><span class="line">  order by math asc(升序) // 默认为升序</span><br><span class="line">select * from student </span><br><span class="line">  order by math desc(减序)</span><br><span class="line"></span><br><span class="line"># 排序的组合操作</span><br><span class="line">#如果我们想要部门按照部门号升序，然后按照工资降序</span><br><span class="line">select *from emp </span><br><span class="line"> order by deptno asc, sal desc </span><br></pre></td></tr></table></figure><h2 id="函数-与select配合的"><a href="#函数-与select配合的" class="headerlink" title="函数(与select配合的)"></a>函数(与select配合的)</h2><h3 id="count"><a href="#count" class="headerlink" title="count"></a>count</h3><blockquote><p>查询的结果有多少行</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select count(*)from student where math&gt;90</span><br><span class="line"># 统计数学大于90的学生</span><br></pre></td></tr></table></figure><ul><li>count(*) 返回满足条件的行数</li><li>count(列):统计满足条件某列有多少个，<strong>但是会排除为null的情况</strong></li></ul><h3 id="sum"><a href="#sum" class="headerlink" title="sum"></a>sum</h3><blockquote><p>返回满足where条件的行的和 一般使用在数值列中（注意他只能对数值起作用）</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select sum(math) from student;</span><br><span class="line"># 统计一个班所有人的数学总成绩</span><br></pre></td></tr></table></figure><h3 id="avg"><a href="#avg" class="headerlink" title="avg"></a>avg</h3><blockquote><p>求平均值，同上对数值起作用</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select avg(math) from student</span><br></pre></td></tr></table></figure><h3 id="max-min"><a href="#max-min" class="headerlink" title="max&#x2F;min"></a>max&#x2F;min</h3><blockquote><p>求最大值或者最小值</p></blockquote><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select max(math) from student</span><br><span class="line">select min(math) from student</span><br></pre></td></tr></table></figure><h3 id="group"><a href="#group" class="headerlink" title="group"></a>group</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221120100654899.png" alt="image-20221120100654899"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal),max(sal), deptno from employee group by deptno</span><br><span class="line"># 按照部门分组查询平均工资和最高工资</span><br><span class="line"># 需要注意是，一个部门有很多人，每个人的工资不一样</span><br></pre></td></tr></table></figure><p><strong>最后的输出结果为</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121194906997.png" alt="image-20221121194906997"></p><h3 id="having（和group共同使用）"><a href="#having（和group共同使用）" class="headerlink" title="having（和group共同使用）"></a>having（和group共同使用）</h3><p>相当于where条件筛选，他和group是好兄弟</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">select avg(sal) as avg_sal,deptno</span><br><span class="line"> from emp group by deptno</span><br><span class="line"> having avg_sal&lt;3000</span><br><span class="line"># 筛选平均工资小于3000的部门9</span><br><span class="line"></span><br><span class="line"># 筛选至少合作过三次的导演</span><br><span class="line">SELECT actor_id, director_id FROM ActorDirector </span><br><span class="line">    GROUP BY actor_id, director_id</span><br><span class="line">    HAVING COUNT(*) &gt;= 3;</span><br><span class="line"># GROUP BY 就是分组，这样子写的话，就是把一对导演和演员分成一组</span><br></pre></td></tr></table></figure><h3 id="字符串相关函数"><a href="#字符串相关函数" class="headerlink" title="字符串相关函数"></a>字符串相关函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803507.png" alt="image-20221121195045357"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">select charset(ename) from emp;</span><br><span class="line">返回charset（name）的表</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select concat(ename,&#x27;工作是&#x27;,job) from emp;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121195537204.png" alt="image-20221121195537204"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803104.png" alt="image-20221121195659676"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803107.png" alt="image-20221121200009584"></p><ul><li>练习 以首字母小写的方式显示所有员工emp表的姓名</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 方法一</span><br><span class="line">select CONCAT(Lcase(SUBSTRING(ename,1,1)),SUBSTRING(ename,2)) as new_name</span><br><span class="line"> from emp;</span><br><span class="line">## 注意这里的下标从0开始</span><br><span class="line"></span><br><span class="line"># 方法二</span><br><span class="line">select concat(lcase(Left(ename,1)),substring(ename,2)) as new_name;</span><br></pre></td></tr></table></figure><h3 id="数学函数"><a href="#数学函数" class="headerlink" title="数学函数"></a>数学函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803112.png" alt="image-20221121200659389"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121200914705.png" alt="image-20221121200914705"></p><h3 id="时间函数"><a href="#时间函数" class="headerlink" title="时间函数"></a>时间函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803736.png" alt="image-20221121201227293"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE mes(</span><br><span class="line"> id INT,</span><br><span class="line"> content VARCHAR(30),</span><br><span class="line"> send_time DATETIME);</span><br><span class="line">INSERT INTO mes</span><br><span class="line"> VALUES(1,&#x27;北京新闻&#x27;,CURRENT_TIMESTAMP);</span><br><span class="line">SELECT* FROM mes;</span><br><span class="line"></span><br><span class="line"># 计算时间差的时候其实除了使用DATEDIFF还可以 使用between xxx and xxx（时间用&#x27;&#x27;b）</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121201726906.png" alt="image-20221121201726906"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803151.png" alt="image-20221121201840084"></p><ul><li>请写出以上的所有mysql语句</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121202025586.png" alt="image-20221121202025586"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#如果改成20min之内就是</span><br><span class="line">select * from mes</span><br><span class="line">where date_add(send_time,INTERVAL 20 MINUTE)&gt;=NOW();</span><br></pre></td></tr></table></figure><ul><li>year&#x2F;month&#x2F;date（）</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121202816540.png" alt="image-20221121202816540"></p><p><strong>分别返回年&#x2F;月&#x2F;日</strong></p><ul><li>unix_timestamp返回的是1970-1-1到现在的<strong>秒数</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">select unix_timestamp(now()) from xxx</span><br></pre></td></tr></table></figure><ul><li>from_unixtime</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># &#x27;%Y-%m-%d&#x27;(年月日的格式)</span><br><span class="line">select from_unixtime(1618483484,%Y-%m-%d) from dual</span><br><span class="line"># &#x27;%Y-%m-%d %H:%i:%s&#x27;(int转换位年月日的格式)</span><br></pre></td></tr></table></figure><h3 id="加密函数"><a href="#加密函数" class="headerlink" title="加密函数"></a>加密函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803540.png" alt="image-20221121203640271"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">select user() from dual;</span><br><span class="line"># 返回的是用户ip地址</span><br><span class="line">select database()</span><br><span class="line"># 查询当前使用数据库名称</span><br><span class="line">select MD5(&#x27;HSP&#x27;)from dual </span><br><span class="line"># 在数据库中存放的是加密后的密码（长度是32位）</span><br><span class="line">select password(&#x27;hsp&#x27;)from dual</span><br><span class="line"># 加密函数，mysql数据库的用户密码就是password函数加密</span><br></pre></td></tr></table></figure><h3 id="流程控制函数"><a href="#流程控制函数" class="headerlink" title="流程控制函数"></a>流程控制函数</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803664.png" alt="image-20221121204649874"></p><p><strong>多分支的任务需求</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221121205703208.png" alt="image-20221121205703208"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 如果第一个exp1为真就返回exp2，否则返回expr3</span><br><span class="line">select if(TRUE,&#x27;北京&#x27;,&#x27;上海&#x27;)from dual;</span><br><span class="line">#输出                         北京</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 看上表规则</span><br><span class="line">select if(NULL,&#x27;北京&#x27;，&#x27;上海&#x27;)</span><br><span class="line">#输出                         上海</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 多分支</span><br><span class="line"># 判断是否为空要使用is null/is not null</span><br><span class="line">select  ename  IF(comm is null，0.0,comm);</span><br><span class="line">#或者写出</span><br><span class="line">select  ename  IFNULL(comm，0.0);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">#多分支</span><br><span class="line">select ename, (select case</span><br><span class="line">               when job = &#x27;cherk&#x27; then &#x27;职员&#x27;</span><br><span class="line">               when job = &#x27;manager&#x27; then &#x27;经理&#x27;</span><br><span class="line">               when job = &#x27;salesman&#x27; then &#x27;销售人员&#x27;</span><br><span class="line">               when job end) as &#x27;job&#x27;</span><br><span class="line">               from emp</span><br></pre></td></tr></table></figure><ul><li>模糊匹配</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">select ename from list ename Like &quot;__0%&quot;</span><br><span class="line"># 查询ename第三个数字是0的表</span><br><span class="line">select ename from list ename like &quot;s%&quot;</span><br><span class="line"># 查询ename以s作为开头的ename</span><br></pre></td></tr></table></figure><ul><li>分页查询</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># grammer select * from * limit xxxx</span><br><span class="line">select *from emp order by empno</span><br><span class="line">select * from emp</span><br><span class="line">  order by empno </span><br><span class="line">  limit 0, 3;</span><br><span class="line">select * from emp </span><br><span class="line">  order by empno </span><br><span class="line">  limit 3, 3;</span><br><span class="line">select * from emp</span><br><span class="line">  order by empno</span><br><span class="line">  limit 6,</span><br></pre></td></tr></table></figure><h2 id="多表查询"><a href="#多表查询" class="headerlink" title="多表查询"></a>多表查询</h2><ul><li><p>多表查询的时候，<strong>就是列拼接在一起，然后相乘得到行数</strong></p></li><li><p>当有<strong>两个表相同的字段</strong>我们需要做出区分</p></li><li><p>自连接</p></li></ul><p><strong>问题</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221125184303704.png" alt="image-20221125184303704"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 显示员工和他上级的名字</span><br><span class="line"># 把同一张表当作两张表使用</span><br><span class="line"># 需要给表取别名，表名，表别名</span><br><span class="line"># 列名不明确，可以指定列的别名</span><br><span class="line">select worker.ename as &#x27;职员表&#x27;,boss.ename As &#x27;上级表&#x27;</span><br><span class="line">    from emp worker, emp boss# 注意这个可以不用加上as </span><br><span class="line">                where worker.mgr = boss.empno;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="mysql子查询"><a href="#mysql子查询" class="headerlink" title="mysql子查询"></a>mysql子查询</h2><h3 id="单行和多行的子查询"><a href="#单行和多行的子查询" class="headerlink" title="单行和多行的子查询"></a>单行和多行的子查询</h3><ul><li>单行子查询：返回单行</li><li>多行子查询：返回多行<ul><li>all ： <strong>所有的条件</strong></li><li>any： <strong>存在一个条件</strong></li></ul></li></ul><p><strong>问题</strong>1</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803218.png" alt="image-20221125185534231"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 子条件</span><br><span class="line">select deptno </span><br><span class="line">  from emp</span><br><span class="line">  where ename = &#x27;SMITH&#x27;</span><br><span class="line"># 然后把他嵌套进去</span><br><span class="line">select* from emp </span><br><span class="line">  where deptno =(</span><br><span class="line">            select deptno </span><br><span class="line">   from emp</span><br><span class="line">   where ename = &#x27;SMITH&#x27;</span><br><span class="line">        ) </span><br></pre></td></tr></table></figure><p><strong>问题2</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 薪水大于所有查询子条件的元素 </span><br><span class="line">select ename,sal,deptno </span><br><span class="line">  from emp</span><br><span class="line">  where sal&gt;ALL(</span><br><span class="line">         select sal</span><br><span class="line">              from emp</span><br><span class="line">           where deptno = 30</span><br><span class="line">        )</span><br><span class="line"> # 方法二</span><br><span class="line">select ename,sal,deptno </span><br><span class="line">  from emp</span><br><span class="line">  where sal(</span><br><span class="line">         select MAX(sal)</span><br><span class="line">              from emp</span><br><span class="line">           where deptno = 30</span><br><span class="line">        )</span><br><span class="line">#  求薪水最小的就反过来</span><br></pre></td></tr></table></figure><ul><li>any</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">select sal , empno </span><br><span class="line"> from emp</span><br><span class="line"> where sal &gt; any(</span><br><span class="line">     select sal </span><br><span class="line">         from emp</span><br><span class="line">         where dep = 30;</span><br><span class="line">    )</span><br><span class="line">当前元素比dep= 30的任一一个元素的val要大</span><br><span class="line">select sal ,empno</span><br><span class="line"> from emp</span><br><span class="line"> where sal &gt; (</span><br><span class="line">     select min(sal) </span><br><span class="line">         from emp</span><br><span class="line">         where dep = 30;</span><br><span class="line">    );</span><br></pre></td></tr></table></figure><h3 id="子查询的临时表"><a href="#子查询的临时表" class="headerlink" title="子查询的临时表"></a>子查询的临时表</h3><p>任务：我们需要查询每一个商品类别中最高价格的商品信息</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"># 每一个商品种类最高价格的查询</span><br><span class="line">select cat_id, MAX(shop_price)</span><br><span class="line">  from ecs_goods</span><br><span class="line">  Group BY cat_id</span><br><span class="line"># 实现</span><br><span class="line">select goods_id ecs_goods.cat_id, goods_name,shop_price</span><br><span class="line">  from(</span><br><span class="line">          select cat_id ,MAX(shop_price) as max_price</span><br><span class="line">             from ecs_goods</span><br><span class="line">             group by cat_id</span><br><span class="line">        )temp# 这个就被叫做临时表</span><br><span class="line">        , ecs_goods</span><br><span class="line">        where temp.cat_id = ecs_goods.cat_id</span><br><span class="line">        AND temp.max_price = ecs_goods.shop_price </span><br><span class="line"></span><br><span class="line"># 从员工表中找到一个工资比经理高的员工</span><br><span class="line"> select a.Name as Employee </span><br><span class="line"> from Employee a, (select Salary,Id from Employee) b</span><br><span class="line"> where a.ManagerId=b.Id and a.Salary &gt; b.Salary </span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"> # 注意在写完临时表后必须给临时表命名命名格式是 在括号后面直接写 表的名字，或者是写上as 表名</span><br><span class="line"> select  k.c as employee </span><br><span class="line">                from (</span><br><span class="line">                    select a.name as c from employee as a,employee as b </span><br><span class="line">                    where a.managerId = b.id and a.salary&gt;b.salary</span><br><span class="line">                )as `k`</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="多列子查询"><a href="#多列子查询" class="headerlink" title="多列子查询"></a>多列子查询</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#子表</span><br><span class="line">select deptno, job</span><br><span class="line">  from emp</span><br><span class="line">  where ename = &#x27;SMITH&#x27;</span><br><span class="line">select *from emp </span><br><span class="line">  //类似于python的列表， 可以进行多段匹配</span><br><span class="line">  where(deptno,job)=(</span><br><span class="line">            select deptno, job</span><br><span class="line">   from emp</span><br><span class="line">   where ename = &#x27;SMITH&#x27;</span><br><span class="line">        )AND ename !=&#x27;SMITH&#x27;;</span><br></pre></td></tr></table></figure><ul><li>练习一:<strong>查找每一个部门工资高于本部门平均工资的人的资料</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 找到每一个部门,的平均工资</span><br><span class="line">select deptno AVG(sal) as avg_sal</span><br><span class="line">  from emp</span><br><span class="line">  group by deptno</span><br><span class="line">  </span><br><span class="line">#  将该表作为一个临时表</span><br><span class="line">select ename, sal, temp.avg_sal,emp.deptno from emp,(</span><br><span class="line">  select deptno AVG(sal) as avg_sal</span><br><span class="line">  from emp</span><br><span class="line">  group by deptno </span><br><span class="line">  )temp where emp.deptno = temp.deptno AND emp.sal&gt;temp.avg_sal;</span><br></pre></td></tr></table></figure><ul><li>练习二: <strong>查找每一个部门工资最高的人的详细资料</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 弄出一个子查询(每一个部门最高工资的人的)</span><br><span class="line">select dentno, MAX(sal) as max_sal</span><br><span class="line">      from emp</span><br><span class="line">                        group by deptno</span><br><span class="line">                      </span><br><span class="line">                      </span><br><span class="line"># 然后当作临时表进行查询</span><br><span class="line">select ename,emp.deptno,max_sal</span><br><span class="line">   from emp ,(</span><br><span class="line">                select dentno, MAX(sal) as max_sal</span><br><span class="line">                from emp</span><br><span class="line">                group by deptno</span><br><span class="line">            )temp where emp.deptno = temp.deptno AND emp.sal = temp.max_sal</span><br></pre></td></tr></table></figure><ul><li>练习三: <strong>查询每一个部门的信息,包括部门名,编号,地址和人员数量</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">--1. 部门名 来自 dept表</span><br><span class="line">select count(*),deptno</span><br><span class="line">  from emp</span><br><span class="line">  group by deptno</span><br><span class="line"></span><br><span class="line">select dname, dept, deptno, loc ,tmp.per_num as&#x27;人数&#x27;</span><br><span class="line">  from  (</span><br><span class="line">            select count(*) as per_num,deptno</span><br><span class="line">            from emp</span><br><span class="line">            group by deptno</span><br><span class="line">        ) tmp, dept</span><br><span class="line">        where tmp.deptno = dept.deptno</span><br><span class="line"></span><br><span class="line"># select 也可以改写为tmp.*,这样代表tmp的所有字段</span><br><span class="line">select tmp.*, dname,loc</span><br><span class="line">  from dept,(</span><br><span class="line">            select count(*) as per_num,deptno</span><br><span class="line">            from emp</span><br><span class="line">            group by deptno</span><br><span class="line">        ) tmp</span><br><span class="line">        where tmp.deptno = dept.deptno</span><br><span class="line">     </span><br></pre></td></tr></table></figure><h2 id="表的复制"><a href="#表的复制" class="headerlink" title="表的复制"></a>表的复制</h2><p>目的:</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221126081534874.png" alt="image-20221126081534874"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 复制一个表的数据到另一个表</span><br><span class="line">insert into my_tab01</span><br><span class="line">  (id,`name`,sal,job,deptno)</span><br><span class="line">  select empno,ename,sal,job,deptno from emp&#x27;</span><br><span class="line"># 自我复制</span><br><span class="line">insert into my_tab02</span><br><span class="line">  select * from my_tab02</span><br><span class="line">  </span><br></pre></td></tr></table></figure><ul><li>题目如何去掉一个表的重复记录</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"> # 把表的结构复制到emp表中,这样就不用重复打那么多字了(注意是表的结构)</span><br><span class="line"> create table my_tab02 like emp;</span><br><span class="line"> </span><br><span class="line"># 构造重复行 </span><br><span class="line"> insert into my_tab02</span><br><span class="line">  select * from my_tab02</span><br><span class="line"> # 现在就有很多重复的行,那如何去重呢</span><br><span class="line"> </span><br><span class="line"> # 方法就是创建一个临时表,</span><br><span class="line"> # 挑选这个表的distinct * from,插入到另一个表中</span><br><span class="line"> # 然后删除原表,新表改成原表的名字</span><br><span class="line"> </span><br><span class="line">create table my_tmp like my_tab02</span><br><span class="line">insert into my_tmp </span><br><span class="line">  select distinct * from my_tab02;</span><br><span class="line">delect from my_tab02;</span><br><span class="line">insert into my_tab02 </span><br><span class="line">   select * from my_tmp;</span><br><span class="line">   </span><br><span class="line"># 或者我们也可以写成这样，来修改名字</span><br><span class="line"># [old] rename to [new]</span><br><span class="line">alter table my_tab02 rename to my_tmp</span><br></pre></td></tr></table></figure><h2 id="合并查询"><a href="#合并查询" class="headerlink" title="合并查询"></a>合并查询</h2><ul><li><code>union all将两个查询结果合并，不会去重</code></li><li><code>union就是两个结 果合并，回去重，事实上很像or</code></li></ul><h2 id="表的外连接"><a href="#表的外连接" class="headerlink" title="表的外连接"></a>表的外连接</h2><ul><li>如果要搞一个表的相同两个集合</li></ul><h4 id="表的自连接"><a href="#表的自连接" class="headerlink" title="表的自连接"></a>表的自连接</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">method1 :</span><br><span class="line">select </span><br><span class="line"> *</span><br><span class="line"> from emp.worker , emp.boss</span><br><span class="line"> where worker.mg</span><br><span class="line">SELECT</span><br><span class="line">     a.NAME AS Employee</span><br><span class="line">FROM Employee AS a JOIN Employee AS b</span><br><span class="line">     ON a.ManagerId = b.Id</span><br><span class="line">     AND a.Salary &gt; b.Salary</span><br><span class="line">相当于from两个表连接在一起      </span><br><span class="line">     </span><br></pre></td></tr></table></figure><p>问题<img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221127080047582.png" alt="image-20221127080047582"></p><p>发现两个表合并不能很好的实现</p><p>引出我们的外连接</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221127080338884.png"></p><p>引出我们的外连接问题<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803063.png" alt="image-20221127080727053"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 即便左表没有和右表连接的地方，也会出现左表,且左表为null</span><br><span class="line">select &#x27;name&#x27; stu.id,</span><br><span class="line">  from stu LEFT JOIN exam</span><br><span class="line">  ON stu.i d = exam.id</span><br><span class="line">  </span><br><span class="line"># 左连接如下写法</span><br><span class="line">select &#x27;name&#x27; stu.id,</span><br><span class="line">  from stu RIGHT JOIN exam</span><br><span class="line">  ON stu.id = exam.id</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221127080923568.png" alt="image-20221127080923568"></p><p>问题<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803169.png" alt="image-20221127081333443"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">select eptno.id,ename,work </span><br><span class="line">  from company left join emp</span><br><span class="line">  ON where company.id = emp.id</span><br></pre></td></tr></table></figure><h2 id="mysql的约束"><a href="#mysql的约束" class="headerlink" title="mysql的约束"></a>mysql的约束</h2><ul><li><p>查看约束</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#使用dec+表名</span><br><span class="line">dec t17</span><br><span class="line"># 就会显示约束的情况</span><br></pre></td></tr></table></figure></li></ul><h3 id="主键"><a href="#主键" class="headerlink" title="主键"></a>主键</h3><ul><li>主键列的值是不可以重复的</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 在字段后面添加primary key就是把一个字段变成主键</span><br><span class="line">create table t17(</span><br><span class="line">  id int primary key,</span><br><span class="line">  `name` varchar(32),</span><br><span class="line">  emain varchar(32));</span><br><span class="line">        </span><br></pre></td></tr></table></figure><ul><li>主键插入的元素不可以为<strong>null</strong></li><li>一个表只能有一个主键，但可以<strong>复合主键</strong></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 只有当id和name都和表中的一个数据相同的时候，才不能插入</span><br><span class="line">create table t17(</span><br><span class="line">  id int,</span><br><span class="line">  `name` varchar(32),</span><br><span class="line">  emain varchar(32)</span><br><span class="line">  primary key(id,`name`));--这就是复合主键</span><br></pre></td></tr></table></figure><ul><li>定义主键的方式二</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table t19(</span><br><span class="line">  id int,</span><br><span class="line">     `name` varchar(32),</span><br><span class="line">     emain varchar(32),</span><br><span class="line">     primary key(`name`)--把定义写在后面</span><br><span class="line"> )</span><br></pre></td></tr></table></figure><h3 id="unique"><a href="#unique" class="headerlink" title="unique"></a>unique</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create table t19(</span><br><span class="line">    id int unique,--id不可以重复</span><br><span class="line">    `name` varchar(32),</span><br><span class="line">    ename varchar(32),</span><br><span class="line">)</span><br></pre></td></tr></table></figure><ul><li>如果unique没有增加not null约束，那么你就可以添加null的元素，<strong>而且null可以填写多个</strong>（当然非null不能填写多个）</li><li>一张表中可以有<strong>多个unique字段</strong></li><li>primary key和unique的区别在于，<strong>primary key在一个表中只能存在一次，但是unique可以有多个</strong>，其他的特征都是相同的</li></ul><h2 id="表的外键"><a href="#表的外键" class="headerlink" title="表的外键"></a>表的外键</h2><blockquote><p>如果我们要求每一个学生所在的班级编号是存在的班级编号，我们就可以把class_id做成外键约束</p></blockquote><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221129233418189.png" alt="image-20221129233418189"></p><ul><li>相互约束的表格，必须得先删除左边的表，才能删除右边的表</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"># 创建主表</span><br><span class="line">CREATE TABLE my_class(</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">     `name` VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;);</span><br><span class="line"> </span><br><span class="line"># 创建从表</span><br><span class="line">CREATE TABLE my_stu(</span><br><span class="line">  id INT PRIMARY KEY,</span><br><span class="line">     `name`  VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line">     class_id INT,</span><br><span class="line">     # 制定外键关系</span><br><span class="line">     FOREIGN KEY(class_id) REFERENCES my_class(id))</span><br><span class="line">  )</span><br><span class="line">  // 第一个是key（从表的属性）re（主表（属性））</span><br><span class="line">  </span><br><span class="line">INSERT INTO my_class</span><br><span class="line"> VALUES(100,&#x27;java&#x27;),(200,&#x27;web&#x27;);   </span><br><span class="line">    #成功插入</span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"> VALUES(1,&#x27;tom&#x27;,100),(2,&#x27;jack&#x27;,200);</span><br><span class="line"> #成功插入</span><br><span class="line">INSERT INTO my_stu</span><br><span class="line"> VALUES(3,&#x27;hsp&#x27;,300);</span><br><span class="line"> #插入失败</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803973.png" alt="image-20221130115600150"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 4</span><br><span class="line">insert into my_stu</span><br><span class="line">  values(5, &#x27;king&#x27;, NULL);</span><br><span class="line"># 注意这是不会报错的</span><br><span class="line"># 5</span><br><span class="line">delete from my_class</span><br><span class="line">  where id == 5;</span><br><span class="line"># 外键约束失败了， 数据不能随意删除</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="check"><a href="#check" class="headerlink" title="check"></a>check</h2><ul><li><p>mysql15.7,只做语法校验，不会生效</p><p>oracle ,sql server便会生效</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table t23(</span><br><span class="line">  id int primary key,</span><br><span class="line">  `name` varchar(32),</span><br><span class="line">  sex varchar(6) check(sex in(&#x27;man&#x27;,&#x27;woman&#x27;))),</span><br><span class="line">  sal double check(sal&gt;1000 AND sal&lt;2000)</span><br><span class="line">  );</span><br></pre></td></tr></table></figure><h2 id="ENUM"><a href="#ENUM" class="headerlink" title="ENUM"></a>ENUM</h2><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sex enum(&#x27;男&#x27;,&#x27;女&#x27;)not null</span><br><span class="line"># 表示sex只可能是男生或者女生</span><br></pre></td></tr></table></figure><h2 id="自增长"><a href="#自增长" class="headerlink" title="自增长"></a>自增长</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803037.png" alt="image-20221204221806824"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t24</span><br><span class="line"> (id INT PRIMARY KEY AUTO_INCREMENT,</span><br><span class="line"> email VARCHAR(32) NOT NULL DEFAULT &#x27;&#x27;,</span><br><span class="line"> `name` VARCHAR(32)NOT NULL DEFAULT &#x27;&#x27;);</span><br><span class="line">DESC t24</span><br><span class="line">INSERT INTO t24 </span><br><span class="line"> VALUES(NULL,&#x27;jack@qq.com&#x27;,&#x27;jack&#x27;);</span><br><span class="line"> </span><br><span class="line"># 方法二</span><br><span class="line"># 注意这里必要写参量</span><br><span class="line">insert into t24</span><br><span class="line"> (email, &#x27;name&#x27;) values(&#x27;jack@qq.com&#x27;, &#x27;jack&#x27;);</span><br><span class="line">SELECT* FROM t24</span><br><span class="line"># 出现null的时候会自动变成1</span><br></pre></td></tr></table></figure><ul><li><p>细节</p><ol><li><p>一般来说自增长需要和primary key配合使用</p></li><li><p>自增长也可以单独使用（但是需要配合一个unique）</p></li><li><p>自增长修饰的字段为整数形的（虽然小数也可以但是非常非常少这样使用）</p></li><li><p>自增长默认从1开始，你也可以通过如下命令修改</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">alter table t24 auto_increment = 100</span><br><span class="line"># 下次开始的时候就是从100开始</span><br></pre></td></tr></table></figure></li><li><p>如果你添加数据时，<strong>给自增长字段指定的有值，则以指定的值为准，如果指定了自增长，一般来说，就按照自增长的规则来添加数据</strong></p></li></ol></li></ul><h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a>索引</h2><h3 id="索引优化速度"><a href="#索引优化速度" class="headerlink" title="索引优化速度"></a>索引优化速度</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20221204223135245.png" alt="image-20221204223135245"></p><ul><li><p>当表的元素特别多的时候，在没有创建索引时，我们的查询一条记录会非常慢</p></li><li><p>创建索引</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># create index 索引的名称 on 表名 (列名)</span><br><span class="line">create index empno_index on emp (empno)</span><br><span class="line"># 创建索引之后，在select贼快,但是在创建索引的过程中需要一些时间，并且内存会变大</span><br><span class="line">select * from emp where ename = &#x27;axJxC&#x27;;</span><br></pre></td></tr></table></figure><h3 id="索引机制"><a href="#索引机制" class="headerlink" title="索引机制"></a>索引机制</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803256.png" alt="image-20221204224422620"></p><ul><li><p>索引的原理</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803286.png" alt="image-20221204224635635"></p></li></ul><p> 使用索引后，就会形成一个数据结构，比如二叉树。这个有序的二叉树就会存储这些数据</p><ul><li><p>坏处</p><ol><li><p>占用<strong>磁盘空间</strong></p></li><li><p>会对<strong>update delete insert造成一定的影响</strong></p></li></ol></li></ul><p>但是因为<strong>select在业务开发中的使用次数多于update delete insert之和</strong>,所以这个东西还是特别使用的</p><h3 id="索引的类型"><a href="#索引的类型" class="headerlink" title="索引的类型"></a>索引的类型</h3><ul><li><p>查询一个表是否有索引</p></li><li><p>添加唯一索引</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">create unique index id_index on t25(id);</span><br></pre></td></tr></table></figure><ul><li>删除索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 删除索引</span><br><span class="line">drop index id_index on t25</span><br><span class="line"></span><br><span class="line"># 删除主键索引</span><br><span class="line">alter table drop primary key </span><br></pre></td></tr></table></figure><ul><li>查询索引</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 方式1</span><br><span class="line">show index from 表名</span><br><span class="line"></span><br><span class="line"># 方式二</span><br><span class="line">show indexes from 表名</span><br><span class="line"></span><br><span class="line"># 方式三</span><br><span class="line">DESC b</span><br></pre></td></tr></table></figure><h4 id="主键索引"><a href="#主键索引" class="headerlink" title="主键索引"></a>主键索引</h4><p> 主键就是<strong>一种索引</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table t11(</span><br><span class="line">id int primary key,-- 主键，同时也是索引</span><br><span class="line">name varchar(32))</span><br><span class="line">);</span><br><span class="line">create table t12(</span><br><span class="line">id int unique,-- 主键，同时也是索引</span><br><span class="line">name varchar(32))</span><br><span class="line">);</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="普通索引"><a href="#普通索引" class="headerlink" title="普通索引"></a>普通索引</h4><ul><li>这是一种最常用的索引。</li></ul><h4 id="唯一索引"><a href="#唯一索引" class="headerlink" title="唯一索引"></a>唯一索引</h4><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">CREATE TABLE t25(</span><br><span class="line"> id INT,</span><br><span class="line"> `name` VARCHAR(32));</span><br><span class="line">INSERT INTO t25</span><br><span class="line"> VALUES(20,&quot;java&quot;);</span><br><span class="line">SHOW  INDEXES FROM t25 </span><br><span class="line"># 如果某列值是不重复，那么优先考虑唯一索引，否则考虑普通索引</span><br><span class="line">CREATE UNIQUE INDEX id_index ON t25(id);</span><br><span class="line"></span><br><span class="line"># 添加索引方式2</span><br><span class="line">alter table t25 add index id_index (id)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 添加主键索引</span><br><span class="line">alter table t26 add primary key (id)</span><br></pre></td></tr></table></figure><h4 id="全文索引"><a href="#全文索引" class="headerlink" title="全文索引"></a>全文索引</h4><ul><li>我们常用solr和elasticsearch（ES）。</li></ul><h2 id="mysql事务"><a href="#mysql事务" class="headerlink" title="mysql事务"></a>mysql事务</h2><ul><li>事务的理解</li></ul><p>现在需要把多个数据视为一个整体。将多个dml（delete，update，insert）当做一个整体，要么全部成功，要么全部失败</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103115023554.png" alt="image-20230103115023554"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">create table t27&#123;</span><br><span class="line"> id int,</span><br><span class="line"> `name` varchar(32)</span><br><span class="line">&#125;</span><br><span class="line">start transaction </span><br><span class="line">savepoint a</span><br><span class="line">insert into t27 values(200,&#x27;javk&#x27;);</span><br><span class="line">rollback a</span><br><span class="line"># commit 就会真的生效了，还会把所有的回滚机制回退。 </span><br><span class="line">commit </span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803202.png" alt="image-20230506232037664"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">start transaction  也可以写成 set autocommit = off;</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803366.png" alt="image-20230103120031423"></p><ul><li>默认情况下会自动提交事务，但是不会保持。</li><li>必须使用innODB引擎才能使用支持事务</li></ul><h3 id="mysql事务隔离级别"><a href="#mysql事务隔离级别" class="headerlink" title="mysql事务隔离级别"></a>mysql事务隔离级别</h3><p> <img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103120900930.png" alt="image-20230103120900930"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803816.png" alt="image-20230103120909327"></p><ul><li>更好理解的方式</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230507141313883.png" alt="image-20230507141313883"></p><ul><li>知乎的一篇博客（讲的也可以）</li></ul><p><a href="https://zhuanlan.zhihu.com/p/150107974">大白话讲解脏写、脏读、不可重复读和幻读 - 知乎 (zhihu.com)</a></p><h3 id="隔离级别的详细说明"><a href="#隔离级别的详细说明" class="headerlink" title="隔离级别的详细说明"></a>隔离级别的详细说明</h3><ul><li>脏读就是在没有<strong>commit</strong>的时候，一个事务被修改了，另一端也可以被查询到</li><li>不可重复读和幻读是，你commit了，当这个事务在commit之前被修改了，那么另一端就可以看到</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103121208049.png" alt="image-20230103121208049"></p><ul><li>可串行化在<strong>事物没有提交</strong>的时候， 就会卡住不会动</li></ul><h3 id="查看mysql的隔离级别"><a href="#查看mysql的隔离级别" class="headerlink" title="查看mysql的隔离级别"></a>查看mysql的隔离级别</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 查看隔离级别</span><br><span class="line">select @@tx_isolation</span><br><span class="line"></span><br><span class="line">+-----------------+</span><br><span class="line">| @@tx_isolation  |</span><br><span class="line">+-----------------+</span><br><span class="line">| REPEATABLE-READ |</span><br><span class="line">+-----------------+</span><br><span class="line">1 row in set (0.00 sec)</span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803598.png" alt="image-20230103145804494"></p><ul><li>查看系统隔离级别</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 查看系统隔离级别</span><br><span class="line">suselect @@global.tx_isolation</span><br></pre></td></tr></table></figure><h3 id="修改一个控制台的隔离级别设置"><a href="#修改一个控制台的隔离级别设置" class="headerlink" title="修改一个控制台的隔离级别设置"></a>修改一个控制台的隔离级别设置</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set session transaction isolation level 隔离级别</span><br><span class="line"># 被设置为读未提交的隔离级别</span><br><span class="line">比如：set session transaction isolation level read uncommitted</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li>修改系统隔离级别</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 设置系统当前隔离级别</span><br><span class="line">set global transaction isolation level 隔离级别</span><br></pre></td></tr></table></figure><ul><li><strong>mysql默认的事务隔离级别是repeatable read，一般情况下，没有特殊要求，没有必要修改</strong></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803898.png" alt="image-20230103160128015"></p><h2 id="mysql表的类型和存储引擎"><a href="#mysql表的类型和存储引擎" class="headerlink" title="mysql表的类型和存储引擎"></a>mysql表的类型和存储引擎</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103162842363.png" alt="image-20230103162842363"></p><ul><li>事务安全型比如说是InnoDB</li><li>非事务安全性就是其他的引擎</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803217.png" alt="image-20230103163129815"></p><ul><li><p>表锁的级别高一些， 锁的更多</p></li><li><p>细节说明：</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103163509171.png" alt="image-20230103163509171"></p><h2 id="myisam引擎"><a href="#myisam引擎" class="headerlink" title="myisam引擎"></a>myisam引擎</h2><p><strong>速度快，不支持外键，和事务</strong></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">create table t28(</span><br><span class="line">  id int,</span><br><span class="line">  `name` varchar(32))engine myisam;</span><br><span class="line">start transaction;</span><br><span class="line">savepoint t1;</span><br><span class="line">insert into t28 values(1,&#x27;jack&#x27;);</span><br><span class="line">select* from t28;</span><br><span class="line"># 这里就会报错。因为myisam引擎不支持回滚。</span><br><span class="line">rollback to t28</span><br></pre></td></tr></table></figure><h2 id="memory引擎"><a href="#memory引擎" class="headerlink" title="memory引擎"></a>memory引擎</h2><p>数据存储在内存中</p><p>执行速度很快，<strong>但是关闭数据库的时候，就会出现删除记录，但是会保留结构。</strong>， 但是<strong>表的结构还是存在</strong>的</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create table t28(</span><br><span class="line">  id int,</span><br><span class="line">  `name` varchar(32))engine memory;</span><br><span class="line">insert int t29(</span><br><span class="line">   (1,&#x27;tom&#x27;),(2,&#x27;jack&#x27;),(3,&#x27;hsp&#x27;) );</span><br><span class="line">select* from t29</span><br></pre></td></tr></table></figure><ul><li><p>三种引擎的抉择</p><p>当你<strong>不需要进行事务处理的时候</strong>就优先选择<strong>myisam</strong>.</p><p>否则就选择innoDB，如果<strong>代表用户的状态</strong>的时候，用户的状态频繁改动，我们就可以选择memory引擎（<strong>比如用户在线的状态</strong>）。</p></li><li><p>修改存储引擎</p></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 将表的存储引擎修改为innoDB</span><br><span class="line">alter table `t29` engine = innoDB</span><br></pre></td></tr></table></figure><h2 id="视图原理"><a href="#视图原理" class="headerlink" title="视图原理"></a>视图原理</h2><ul><li><p><strong>视图和对应的真实表</strong>的关系</p></li><li><p>视图的总结</p><ul><li>视图是根据基本来创建的，视图是虚拟的表</li><li>视图也有列，数据来自基表的映射（相当于一个指针）。</li><li>通过视图可以修改<strong>基表的数据</strong></li><li>基表的改变，也会影响到视图的数据</li></ul><p>而且基表不能直接查看，只能通过这个视图来访问</p></li></ul><h3 id="视图的基本使用"><a href="#视图的基本使用" class="headerlink" title="视图的基本使用"></a>视图的基本使用</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103170610014.png" alt="image-20230103170610014"></p><ul><li>查看视图的view语句</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">create VIEW emp_view01</span><br><span class="line">  AS</span><br><span class="line">  SELECT empno, ename,job,deptno from emp;</span><br><span class="line"># 查看视图</span><br><span class="line">DESC emp_view01;</span><br></pre></td></tr></table></figure><ul><li><p>查看创建视图的指令</p></li><li><p>修改视图</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">update emp_view01</span><br><span class="line">  set job = &quot;MANAGER&quot;</span><br><span class="line">  WHERE empno = 7369;</span><br><span class="line"># 发现基表也发生了变化，而且该表基表，视图也会发生改变</span><br></pre></td></tr></table></figure></li></ul><h3 id="视图最佳实践"><a href="#视图最佳实践" class="headerlink" title="视图最佳实践"></a>视图最佳实践</h3><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803634.png" alt="image-20230103171706923"></p><ul><li>这样就可以创建一个视图，然后以后可以直接拿来反复用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">create view `view_032`</span><br><span class="line">  as</span><br><span class="line">  select empno, ename, dname,grade </span><br><span class="line">  from emp, dept,salgrade</span><br><span class="line">  where emp.deptno = dept.deptno AND</span><br><span class="line">  (sal Between losal AND hisal)</span><br></pre></td></tr></table></figure><ul><li>映射到多张表的方法，就是映射到多个表格之间的笛卡尔积。</li></ul><h2 id="mysql数据库"><a href="#mysql数据库" class="headerlink" title="mysql数据库"></a>mysql数据库</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103172856098.png" alt="image-20230103172856098"></p><ul><li>当我们做项目开发时，可以根据不同的开发人员，赋给他相应的mysql操作权限</li><li>所以，mysql数据库管理人员，根据需要创建不同的用户名，赋给相应的权限，供人员使用</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 创建一个hsp_edu的用户，他可以获得管理数据库的部分权限</span><br><span class="line">CREATE USER &#x27;hsp_edu&#x27;@&#x27;%&#x27; IDENTIFIED BY &#x27;123&#x27;;</span><br><span class="line"># 删除用户</span><br><span class="line">DROP user `名称`@`localhost`;</span><br></pre></td></tr></table></figure><ul><li>登陆</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230103174126035.png" alt="image-20230103174126035"></p><p>点击那个绿色的充电器符号，然后就可以改变你的身份为wjh</p><ul><li>修改密码</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">set password for `wjh`@`localhost` = password(&#x27;123456&#x27;);</span><br></pre></td></tr></table></figure><h3 id="给用户授权"><a href="#给用户授权" class="headerlink" title="给用户授权"></a>给用户授权</h3><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">grant 权限列表 on 库.对象名 to `用户名`@`登录位置`</span><br><span class="line"># 直接赋给一个用户全部权限</span><br><span class="line">grant all on *.* to `用户名`@`登录位置`</span><br></pre></td></tr></table></figure><ul><li>练习题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803679.png" alt="image-20230103175025671"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 1</span><br><span class="line">create user `wjh`@`localhost` indentified by &#x27;123456&#x27;;</span><br><span class="line"># 2</span><br><span class="line"> # 使用root 用户创建testdb,表为news</span><br><span class="line">create database testdb</span><br><span class="line">create table news(</span><br><span class="line">  id int,</span><br><span class="line">  content varchar(32));</span><br><span class="line"># 添加一个测试数据</span><br><span class="line">insert into news values(100,&#x27;数据库&#x27;);</span><br><span class="line">grant select ,insert </span><br><span class="line"> on testdb.news</span><br><span class="line"> to `wjh`@`localhost`</span><br><span class="line"># 但是在wjh的用户，就不能更改这个用户的数据</span><br></pre></td></tr></table></figure><ul><li></li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 表示xxx用户在192.168.1.* 的ip可以登录mysql</span><br><span class="line">create user `smith`@`192.168.1.%`</span><br><span class="line"></span><br><span class="line"># 在删除用户的时候，如果host不是%，需要明确制定，用户@host值</span><br><span class="line">drop user jack-- 默认就是drop user `jack`@`%`</span><br><span class="line">drop user `smith`@`192.168.1.%`表示xxx用户在192.168.1.*d</span><br></pre></td></tr></table></figure><h1 id="练习题"><a href="#练习题" class="headerlink" title="练习题"></a>练习题</h1><ul><li>查找第n高的数据·</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">select DISTINCT</span><br><span class="line"> salary as xx</span><br><span class="line">from</span><br><span class="line"> employee</span><br><span class="line">order by salary desc</span><br><span class="line">limit 1 offset 1</span><br><span class="line">// offset代表跳过多少个元素</span><br><span class="line">// 但是会遇到会空的情况， 我们可以利用子表查询,当为空的时候，就会返回一个null</span><br><span class="line">SELECT</span><br><span class="line">    (SELECT DISTINCT</span><br><span class="line">            Salary</span><br><span class="line">        FROM</span><br><span class="line">            Employee</span><br><span class="line">        ORDER BY Salary DESC</span><br><span class="line">        LIMIT 1 OFFSET 1) AS SecondHighestSalary</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p> 我们还可以使用ifnull函数</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803774.png" alt="image-20230504121726459"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">SELECT</span><br><span class="line">    IFNULL(</span><br><span class="line">      (SELECT DISTINCT Salary</span><br><span class="line">       FROM Employee</span><br><span class="line">       ORDER BY Salary DESC</span><br><span class="line">        LIMIT 1 OFFSET 1),</span><br><span class="line">    NULL) AS SecondHighestSalary</span><br></pre></td></tr></table></figure><ul><li>求第N高的薪水</li></ul><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 先让N减去1</span><br><span class="line">set N := N - 1;</span><br><span class="line"></span><br><span class="line">select </span><br><span class="line">  distinct salary</span><br><span class="line">from </span><br><span class="line">  Employee</span><br><span class="line">order by </span><br><span class="line">  salary desc</span><br><span class="line">limit 1 offset N</span><br><span class="line"></span><br><span class="line"># distinct 和 group by一个元素都可以起到去重的效果。</span><br><span class="line"></span><br><span class="line"># 子查询实现</span><br><span class="line">    select </span><br><span class="line">      distinct salary</span><br><span class="line">      from employee e </span><br><span class="line">      where </span><br><span class="line">      (select count(distinct salary) from employee where salary &gt; e.salary) = N</span><br></pre></td></tr></table></figure><h1 id="Java-基础知识补充"><a href="#Java-基础知识补充" class="headerlink" title="Java - 基础知识补充"></a>Java - 基础知识补充</h1><p><strong>Properties的作用</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230517133747245.png" alt="image-20230517133747245"></p><h1 id="java-jdbc"><a href="#java-jdbc" class="headerlink" title="java - jdbc"></a>java - jdbc</h1><p>导入 mysql - jdbc 的jar文件</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230528222459750.png" alt="image-20230528222459750"></p><h2 id="jdbc概述"><a href="#jdbc概述" class="headerlink" title="jdbc概述"></a>jdbc概述</h2><p>该图展现了java连接数据库的模式</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803385.png" alt="image-20230513130330541"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803717.png" alt="image-20230513130431706"></p><h3 id="jdbc-编写的步骤"><a href="#jdbc-编写的步骤" class="headerlink" title="jdbc 编写的步骤"></a>jdbc 编写的步骤</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513174544652.png" alt="image-20230513174544652"></p><ul><li>连接</li></ul><p><code>jdbc:mysql://localhost::3306/hsp_db02</code></p><p>”jdbc:mysql”是固定的，代表的是协议</p><ul><li><p>3306 代表监听的端口</p></li><li><p>hsp_db02 代表你要连接的数据库</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513183647741.png" alt="image-20230513183647741"></p><ul><li>第一个jdbc代码</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjh.jdbc;</span><br><span class="line"><span class="keyword">import</span> com.mysql.jdbc.Driver;</span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"><span class="keyword">import</span> java.sql.Statement;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> 这是第一个jdbc程序</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">jdbc01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">        <span class="comment">// 1. 注册驱动</span></span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Driver</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 2。得到链接</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="comment">// 将用户名和密码放入到Properties 对象</span></span><br><span class="line">        <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">        properties.setProperty(<span class="string">&quot;user&quot;</span>, <span class="string">&quot;root&quot;</span>);</span><br><span class="line">        properties.setProperty(<span class="string">&quot;password&quot;</span>, <span class="string">&quot;&quot;</span>);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connect</span> <span class="operator">=</span> driver.connect(url, properties);</span><br><span class="line">        <span class="comment">// 3；执行sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;insert into actor values(null, &#x27;刘德华&#x27;, &#x27;男&#x27;, &#x27;1970-11-11&#x27;, &#x27;110&#x27;)&quot;</span>;</span><br><span class="line">        <span class="comment">// 用于执行静态sql语句并返回其生成对象</span></span><br><span class="line">        <span class="type">Statement</span> <span class="variable">statement</span> <span class="operator">=</span> connect.createStatement();</span><br><span class="line">        <span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> statement.executeUpdate(sql); <span class="comment">// dml语句 返回的就是影响的行数,只有在dml的时候才会返回影响的行数，如果是创建的话，就不会</span></span><br><span class="line"></span><br><span class="line">        System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span>:<span class="string">&quot;失败&quot;</span>);</span><br><span class="line">        <span class="comment">// 4.关闭连接资源</span></span><br><span class="line">        statement.close();</span><br><span class="line">        connect.close();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>上面代码需要注意的点 ： 要在url里面结尾加上<code>?useUnicode=true&amp;characterEncoding=utf8</code></p></li><li><p>可以通过修改<code>sql</code>,换成<code>delete</code> ， <code>update</code> 等语句</p></li><li><p>通过反射类来加载， 可以减少依赖性</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line"><span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver)aClass.newInstance();</span><br></pre></td></tr></table></figure><ul><li>利用DriverManager.registerDriver方法我们可以更好的打开数据库数据，而不像之前那样搞键值对</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">Driver</span> <span class="variable">driver</span> <span class="operator">=</span> (Driver)aClass.newInstance();</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passwd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, passwd);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><ul><li>进一步的， 我们发现， 其实可以不需要注册驱动(这是因为底层有一个静态代码块，自动帮你写了) （这个方式获取链接是最重要）</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect03</span><span class="params">()</span> <span class="keyword">throws</span> ClassNotFoundException, InstantiationException, IllegalAccessException, SQLException&#123;</span><br><span class="line">        Class&lt;?&gt; aClass = Class.forName(<span class="string">&quot;com.mysql.jdbc.Driver&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> <span class="string">&quot;jdbc:mysql://localhost:3306/hsp_db02?useUnicode=true&amp;characterEncoding=utf8&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> <span class="string">&quot;root&quot;</span>;</span><br><span class="line">        <span class="type">String</span> <span class="variable">passwd</span> <span class="operator">=</span> <span class="string">&quot;&quot;</span>;</span><br><span class="line">        DriverManager.registerDriver(driver);</span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, passwd);</span><br><span class="line">        System.out.println(<span class="string">&quot;第三种方式=&quot;</span> + connection</span><br><span class="line">                          );</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513203223293.png" alt="image-20230513203223293"></p><ul><li><p>然后因为jdbc的优化， &#x2F;META-INF &#x2F; service&#x2F;java.sql.Driver 里面有注册，所以反射的那一段都可以不要， 但是建议还是选择方法4.</p></li><li><p>进一步的优化方法4：我们可以自定义密码用户名(用户自己配置密码 用户名 driver)</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230513205019188.png" alt="image-20230513205019188"></p><p>​  现在src目录下创建一个<code>mysql.properties</code>文件， 然后输入这些内容进去</p><p>​  <img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803806.png" alt="image-20230513205146810"></p><blockquote><p>注意这里不要添加空格和双引号</p></blockquote><p>​     然后函数写法如下。</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">connect05</span><span class="params">()</span> <span class="keyword">throws</span> IOException, ClassNotFoundException, SQLException &#123;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">    properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line">    Class.forName(driver);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">    System.out.println(<span class="string">&quot;方式5 &quot;</span> + connection);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Resultset"><a href="#Resultset" class="headerlink" title="Resultset"></a>Resultset</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515191339770.png" alt="image-20230515191339770"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803955.png" alt="image-20230515191514606"></p><ul><li>对于executeQuery（）来说， 结尾关闭的文件还有<code>resultSet.close()</code>;</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803949.png" alt="image-20230515192159401"></p><p>  <strong>遍历的方式1</strong></p><p>底层的源码如下</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803207.png" alt="image-20230515192737325"></p><h2 id="statement-mysql注入"><a href="#statement-mysql注入" class="headerlink" title="statement&#x2F; mysql注入"></a>statement&#x2F; mysql注入</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803789.png" alt="image-20230515193007310"></p><ul><li><p>statement存在一个sql注入问题。</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803850.png" alt="image-20230515193515020"></p></li><li><p>sql注入黑客的原理， 因为可以把最后一位变得永远是真，然后把所有数据都偷出来</p></li></ul><p><strong>输入数据</strong></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515195415652.png" alt="image-20230515195415652"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515195351292.png" alt="image-20230515195351292"></p><h2 id="PreparedStatement"><a href="#PreparedStatement" class="headerlink" title="PreparedStatement_"></a>PreparedStatement_</h2><ul><li>层次结构图</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803847.png" alt="image-20230515195556552"></p><ul><li>使用它的好处</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230515195832526.png" alt="image-20230515195832526"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803209.png" alt="image-20230515200959087"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">Scanner</span> <span class="variable">scanner</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入用户的名字&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">admin_name</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line">      System.out.println(<span class="string">&quot;请输入用户的密码&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">admin_pwd</span> <span class="operator">=</span> scanner.nextLine();</span><br><span class="line"><span class="comment">// 导入数据</span></span><br><span class="line">      <span class="type">Properties</span> <span class="variable">properties</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Properties</span>();</span><br><span class="line">      properties.load(<span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;src\\mysql.properties&quot;</span>));</span><br><span class="line">      <span class="type">String</span> <span class="variable">user</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;user&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">password</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;password&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">driver</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;driver&quot;</span>);</span><br><span class="line">      <span class="type">String</span> <span class="variable">url</span> <span class="operator">=</span> properties.getProperty(<span class="string">&quot;url&quot;</span>);</span><br><span class="line"><span class="comment">// 反射机制， 注册数据</span></span><br><span class="line">      Class.forName(driver);</span><br><span class="line"><span class="comment">// 执行sql语句</span></span><br><span class="line">      <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT name, pwd from admin where name =? and pwd =?&quot;</span>;</span><br><span class="line">      <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line">      <span class="comment">// ? 代表占位符</span></span><br><span class="line">      <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">      preparedStatement.setString(<span class="number">1</span>, admin_name);</span><br><span class="line">      preparedStatement.setString(<span class="number">2</span>, admin_pwd);</span><br><span class="line"><span class="comment">// 这里现在不用填入sql了（statement的时候要）</span></span><br><span class="line">      <span class="type">ResultSet</span> <span class="variable">resultSet</span> <span class="operator">=</span> preparedStatement.executeQuery();</span><br><span class="line">      <span class="keyword">if</span>(resultSet.next())&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;登录成功&quot;</span>);</span><br><span class="line">      &#125; </span><br><span class="line">      <span class="keyword">else</span>&#123;</span><br><span class="line">          System.out.println(<span class="string">&quot;登录失败&quot;</span>);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><ul><li><p>在使用了preparedStatement的时候就不要在execute的时候这一行使用的括号中写sql</p></li><li><p>dml语句</p></li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update admin set pwd = ? where name = ?&quot;</span>;</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> DriverManager.getConnection(url, user, password);</span><br><span class="line"><span class="comment">// ? 代表占位符</span></span><br><span class="line"><span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> connection.prepareStatement(sql);</span><br><span class="line">preparedStatement.setString(<span class="number">2</span>, admin_name);</span><br><span class="line">preparedStatement.setString(<span class="number">1</span>, admin_pwd);</span><br><span class="line"><span class="type">int</span> <span class="variable">rows</span> <span class="operator">=</span> preparedStatement.executeUpdate();</span><br><span class="line">System.out.println(rows &gt; <span class="number">0</span> ? <span class="string">&quot;成功&quot;</span>: <span class="string">&quot;失败&quot;</span>);</span><br></pre></td></tr></table></figure><h2 id="jdbc-api的复习"><a href="#jdbc-api的复习" class="headerlink" title="jdbc api的复习"></a>jdbc api的复习</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803535.png" alt="image-20230516203905276"></p><ul><li><p>补充 setObject <strong>（占位符的索引，占位符的值）</strong></p></li><li><p>ResultSet（结果集）</p><ul><li><strong>next（）</strong>向下移动一行 （一开始返回的是第一行的前面一个元素）</li><li><strong>previous（）</strong>向上移动一行</li><li><strong>getInt（）</strong>还可以通过字符来进行索引resultset.getInt(“id”) 通过列名来获取值</li></ul></li></ul><h2 id="封装JDBCUtil"><a href="#封装JDBCUtil" class="headerlink" title="封装JDBCUtil"></a>封装JDBCUtil</h2><p><code>Alt + Insert</code>: 可以快速调用常用指令</p><p><code>alt + Enter</code>可以try-catch包括住</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803595.png" alt="image-20230516205106115"></p><ul><li>注意方法才可以抛出， 代码块里面必须使用try-catch</li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230516205616966.png" alt="image-20230516205616966"></p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">package com.wjh.jdbc.utils;</span><br><span class="line"></span><br><span class="line">import java.io.FileInputStream;</span><br><span class="line">import java.io.IOException;</span><br><span class="line">import java.sql.*;</span><br><span class="line">import java.util.Properties;</span><br><span class="line"></span><br><span class="line">public class JDBCUtils &#123;</span><br><span class="line">    private static String user;</span><br><span class="line">    private static String password;</span><br><span class="line">    private static String url;</span><br><span class="line">    private static String driver;</span><br><span class="line">    // 在static 代码块去初始化</span><br><span class="line">    static &#123;</span><br><span class="line">        try&#123;</span><br><span class="line">            Properties properties = new Properties();</span><br><span class="line">            properties.load(new FileInputStream(&quot;src\\mysql.properties&quot;));</span><br><span class="line">            user = properties.getProperty(&quot;user&quot;);</span><br><span class="line">            password = properties.getProperty(&quot;password&quot;);</span><br><span class="line">            url = properties.getProperty(&quot;url&quot;);</span><br><span class="line">            driver = properties.getProperty(&quot;driver&quot;);</span><br><span class="line">        &#125;catch(IOException e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static Connection getConnection()&#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            return DriverManager.getConnection(url, user, password);</span><br><span class="line">        &#125;</span><br><span class="line">        catch (SQLException e)&#123;</span><br><span class="line">            throw new RuntimeException(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    public static void close(ResultSet set, Statement statement,Connection connection)&#123;</span><br><span class="line">      try &#123;</span><br><span class="line">          if(set != null)&#123;</span><br><span class="line">              set.close();</span><br><span class="line">          &#125;</span><br><span class="line">          if(statement != null)&#123;</span><br><span class="line">              statement.close();</span><br><span class="line">          &#125;</span><br><span class="line">          if(connection != null)&#123;</span><br><span class="line">              connection.close();</span><br><span class="line">          &#125;</span><br><span class="line">      &#125;catch(SQLException e)&#123;</span><br><span class="line">        throw new RuntimeException(e);</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li>JDBCUtil_DML</li></ul><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> com.wjh.jdbc.utils;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.sql.Connection;</span><br><span class="line"><span class="keyword">import</span> java.sql.PreparedStatement;</span><br><span class="line"><span class="keyword">import</span> java.sql.SQLException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JDBCUtil_DML</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        testDML();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">testDML</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">// connect</span></span><br><span class="line">        <span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="comment">//create sql</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;update actor set name =? where id =?&quot;</span>;</span><br><span class="line">        <span class="type">PreparedStatement</span> <span class="variable">preparedStatement</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">try</span>&#123;</span><br><span class="line">            connection = JDBCUtils.getConnection();</span><br><span class="line">            preparedStatement = connection.prepareStatement(sql);</span><br><span class="line">            preparedStatement.setString(<span class="number">1</span>,<span class="string">&quot;周星驰&quot;</span>);</span><br><span class="line">            preparedStatement.setInt(<span class="number">2</span>, <span class="number">4</span>);</span><br><span class="line">            preparedStatement.executeUpdate();</span><br><span class="line">        &#125;<span class="keyword">catch</span>(SQLException e)&#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;<span class="keyword">finally</span>&#123;</span><br><span class="line">            JDBCUtils.close(<span class="literal">null</span>,preparedStatement, connection);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="JDBC的事务介绍"><a href="#JDBC的事务介绍" class="headerlink" title="JDBC的事务介绍"></a>JDBC的事务介绍</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803157.png" alt="image-20230516214610316"></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">connection.setAutoCommit(<span class="literal">false</span>); <span class="comment">// 开启了事务(开了之后就不会一执行sql， 就提交）)</span></span><br><span class="line">connection.rollback();</span><br></pre></td></tr></table></figure><ul><li>我们可以把回滚操作，放到有一半的业务出现异常catch语句中的时候， 当出事的时候，就回滚。</li></ul><h2 id="批处理操作"><a href="#批处理操作" class="headerlink" title="批处理操作"></a>批处理操作</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518195826456.png" alt="image-20230518195826456"></p><p><strong>可以提高效率</strong></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">preparedStatement.addBatch(); <span class="comment">// 批量处理数据</span></span><br><span class="line"><span class="comment">// 如果要使用批量处理， url后面一定要加上?rewriteBatchedStatements=true</span></span><br><span class="line"><span class="comment">// 每当满1000条的时候就一起扔到服务器里面</span></span><br><span class="line"><span class="comment">// 速度大大的提高</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>;i  &lt; <span class="number">5000</span>;++i)&#123;</span><br><span class="line">    preparedStatement.setString(<span class="number">1</span>, <span class="string">&quot;jack&quot;</span>);</span><br><span class="line">    preparedStatement.setString(<span class="number">2</span>, <span class="string">&quot;666&quot;</span>);</span><br><span class="line">    preparedStatement.addBatch(); <span class="comment">// 批量处理数据</span></span><br><span class="line">    <span class="keyword">if</span>((i + <span class="number">1</span>)% <span class="number">1000</span> == <span class="number">0</span>)&#123;</span><br><span class="line">        preparedStatement.executeBatch();</span><br><span class="line">        preparedStatement.clearbatch();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p>事实上，他就是创建了一个arraylist数组， 把所有数据存到里面，然后一次性执行</p><p>executeBatch（）函数，这样相比于正常的方法只用调用5次executeBatch</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518202129108.png" alt="image-20230518202129108"></p><h2 id="数据库连接池"><a href="#数据库连接池" class="headerlink" title="数据库连接池"></a>数据库连接池</h2><h3 id="传统连接"><a href="#传统连接" class="headerlink" title="传统连接"></a>传统连接</h3><ul><li>如果又多个人， 连接一个数据库， 会变得很慢</li></ul><p>这是因为每次，连接数据库，然后关闭，都要验证<strong>ip地址， 用户名和密码</strong></p><p>而且， 如果程序出现异常，不能正常关闭，将会导致数据库的内存泄露。最终导致重启数据库</p><h3 id="开始新的连接"><a href="#开始新的连接" class="headerlink" title="开始新的连接"></a>开始新的连接</h3><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518203127314.png" alt="image-20230518203127314"></p><p>通过再缓存池里面放入一定数量的连接， 每次只需从缓冲池里面取出一个，使用完以后再放回去</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803838.png" alt="image-20230518203622485"></p><p>它的本质就是一个<strong>等待队列</strong>，再放回去的时候，不会释放对象。</p><p>数据库连接池的种类</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803844.png" alt="image-20230518203824373"></p><h3 id="连接池-C3P0"><a href="#连接池-C3P0" class="headerlink" title="连接池 - C3P0"></a>连接池 - C3P0</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 创建一个数据源对象</span></span><br><span class="line">comboxxxx = <span class="keyword">new</span> <span class="title class_">comboxxxx</span>;</span><br><span class="line"><span class="comment">// 通过配置文件mysql.properties 获取相关的信息。</span></span><br><span class="line"><span class="comment">//略</span></span><br><span class="line">    </span><br><span class="line">com.setdriverxxxclass(driver);</span><br><span class="line">com.set(url);</span><br><span class="line">com.set(user);</span><br><span class="line">com.setpass(password);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 设置初始化连接数</span></span><br><span class="line">comxxx.poolsize(<span class="number">10</span>);</span><br><span class="line">comxxx.setMaxsize(<span class="number">50</span>);</span><br><span class="line"><span class="type">Connection</span> <span class="variable">connection</span> <span class="operator">=</span> comxxx.getconnection();</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803944.png" alt="image-20230518205241292"></p><ul><li><p>以上是大体的流程</p></li><li><p>我们还可以利用其他的方式二（它的xml来连接）</p></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230518205731069.png" alt="image-20230518205731069"></p><p>这样子，代码就可以变得特别短</p><p>xml代码</p><p>文件的命名为<code>c3p0.config.xml</code></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803394.png" alt="image-20230518210102272"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803412.png" alt="image-20230518210043131"></p><h3 id="连接池-Druid"><a href="#连接池-Druid" class="headerlink" title="连接池 - Druid"></a>连接池 - Druid</h3><h2 id="Mysql主从复制"><a href="#Mysql主从复制" class="headerlink" title="Mysql主从复制"></a>Mysql主从复制</h2><ul><li>如果idea中出现报错， 我们需要再url结尾加上 <code>useSSL=false</code></li></ul><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722202809491.png" alt="image-20230722202809491"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803137.png" alt="image-20230722214613077"></p><p>这一步还有一个重启</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803021.png" alt="image-20230722214714204"></p><p>主从复制的作用</p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722215505596.png" alt="image-20230722215505596"></p><h2 id="项目中的文件配置"><a href="#项目中的文件配置" class="headerlink" title="项目中的文件配置"></a>项目中的文件配置</h2><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722220459783.png" alt="image-20230722220459783"></p><p>其中 load-balance-algorithm-type是负载均衡</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803350.png" alt="image-20230722220720406"></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803511.png" alt="image-20230722221153558"></p><p><img src="C:\Users\wps\AppData\Roaming\Typora\typora-user-images\image-20230722221144802.png" alt="image-20230722221144802"></p><ul><li>再 idea中 显示为， 查询的时候 DataSources：slave ， 增添的时候为 master。</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061803422.png" alt="image-20230723160911437"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
            <tag> 后端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>webcomponent</title>
      <link href="/2023/11/06/webcomponent/"/>
      <url>/2023/11/06/webcomponent/</url>
      
        <content type="html"><![CDATA[<h1 id="这是我的前端小组件库-thinking"><a href="#这是我的前端小组件库-thinking" class="headerlink" title="这是我的前端小组件库 :thinking:"></a>这是我的前端小组件库 :thinking:</h1><h2 id="cloud-font"><a href="#cloud-font" class="headerlink" title="cloud-font"></a>cloud-font</h2><p><a href="https://github.com/Alanyaeer/web-component/tree/master/cloud-font">cloud-font</a></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282006780.png" alt="image-20231028192333139"></p><h2 id="nav"><a href="#nav" class="headerlink" title="nav"></a>nav</h2><p><a href="https://github.com/Alanyaeer/web-component/tree/master/nav-tab">nav</a></p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310291413234.png" alt="image-20231029141317092"></p><h2 id="process-bar"><a href="#process-bar" class="headerlink" title="process-bar"></a>process-bar</h2><p><a href="https://github.com/Alanyaeer/web-component/tree/master/process-bar">进度条</a></p><p>这里有一段代码不是很理解</p><p><code>background-image: linear-gradient(45deg, rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent);</code></p><blockquote><p>这段 CSS 代码是用来设置一个元素的背景图像，具体来说是一个线性渐变背景。我们可以逐步解析这段代码：</p><p><code>linear-gradient(45deg, ...)</code>: 这是 CSS 的 <code>linear-gradient</code> 函数，它创建一个线性渐变。这里的 <code>45deg</code> 表示渐变的方向是 45 度角。</p><p><code>rgba(255, 255, 255, .15) 25%, transparent 25%, transparent 50%, rgba(255, 255, 255, .15) 50%, rgba(255, 255, 255, .15) 75%, transparent 75%, transparent</code>: 这是渐变的颜色和位置。</p><ul><li><code>rgba(255, 255, 255, .15) 25%</code>: 表示颜色为白色（RGB 为 255,255,255）并且不透明度为 0.15 的色标位于渐变的 25% 位置。不透明度范围从 0（完全透明）到 1（完全不透明）。</li><li><code>transparent 25%</code>: 表示一个透明的色标，位于渐变的 25% 位置。透明色标将确保在渐变中有一个从下到上的过渡。</li><li><code>transparent 50%</code>: 表示一个透明的色标，位于渐变的 50% 位置。再次使用透明色标以在渐变中创建一个从下到上的过渡。</li><li><code>rgba(255, 255, 255, .15) 50%</code>: 表示颜色为白色（RGB 为 255,255,255）并且不透明度为 0.15 的色标位于渐变的 50% 位置。</li><li><code>rgba(255, 255, 255, .15) 75%</code>: 表示颜色为白色（RGB 为 255,255,255）并且不透明度为 0.15 的色标位于渐变的 75% 位置。</li><li><code>transparent 75%</code>: 表示一个透明的色标，位于渐变的 75% 位置。再次使用透明色标以在渐变中创建一个从上到下的过渡。</li><li><code>transparent</code>: 最后，透明色标确保在渐变的最后有一个从上到下的过渡。</li></ul><p>这里的 <code>transparent</code> 的主要作用是创建渐变的过渡效果，它使得颜色之间的过渡更加平滑，而不是直接跳转到下一个颜色。通过使用透明色标，我们可以创建出各种各样的线性渐变效果，例如“彩虹”效果等。</p></blockquote><p>暂时放着以后之后再来回头看， 大概的意思是 transparent 可以让过渡效果更加的好看</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311052044848.png" alt="image-20231105204409670"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> css </tag>
            
            <tag> 组件库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>websocket</title>
      <link href="/2023/11/06/websocket%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/11/06/websocket%E9%81%87%E5%88%B0%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="问题🤕"><a href="#问题🤕" class="headerlink" title="问题🤕"></a>问题🤕</h1><blockquote><p> 写课设的时候， 使用websocket 建立连接发送消息， 出现了 以下两种问题 </p></blockquote><h2 id="CloseStatus-1002"><a href="#CloseStatus-1002" class="headerlink" title="CloseStatus &#x3D; 1002"></a>CloseStatus &#x3D; 1002</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061317978.png" alt="image-20231106131744951"></p><ul><li>遇到这个问题多半是因为 你发送的消息的 时候前端没有对数据进行调整</li></ul><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.<span class="title function_">send</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(sendmessage))</span><br></pre></td></tr></table></figure><blockquote><p>JSON.stringify 如果不加上这个就会报错， 我是在写心跳检测的时候， 没有对空的字符串进行 stringify所以导致一打开服务就报错</p></blockquote><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 罪魁祸首</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">sendHeartbeat</span>(<span class="params"></span>) &#123;  </span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="keyword">function</span>(<span class="params"></span>) &#123;  </span><br><span class="line">    <span class="keyword">if</span> (socket.<span class="property">readyState</span> === <span class="title class_">WebSocket</span>.<span class="property">OPEN</span>) &#123;  </span><br><span class="line">      socket.<span class="title function_">send</span>(<span class="string">&#x27;&#x27;</span>); <span class="comment">// 发送空的心跳包给服务器  </span></span><br><span class="line">      <span class="comment">//这里修改为 socket.send(JSON.stringify(&#x27;&#x27;))</span></span><br><span class="line">      <span class="title function_">sendHeartbeat</span>(); <span class="comment">// 递归调用发送心跳包函数，以保持连接活跃  </span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;WebSocket连接已关闭&#x27;</span>);  </span><br><span class="line">    &#125;  </span><br><span class="line">  &#125;, <span class="number">5000</span>); <span class="comment">// 每30秒发送一次心跳包给服务器  </span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="CloseStatus-1006"><a href="#CloseStatus-1006" class="headerlink" title="CloseStatus &#x3D; 1006"></a>CloseStatus &#x3D; 1006</h2><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202311061317040.png" alt="image-20231106131730108"></p><ul><li>后来发现是自己修改ip地址的时候吧后面的 端口号也给删除了</li></ul><p>正确 的websocket 格式 是 <code>ws:// ip地址 + :(端口号) + /xxx</code>， 这样一修改之后就木有这个问题了 。</p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> websocket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Netty</title>
      <link href="/2023/10/31/Netty/"/>
      <url>/2023/10/31/Netty/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Netty"><a href="#Netty" class="headerlink" title="Netty"></a>Netty</h1><blockquote><p>牢记四个点</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312044227.png" alt="image-20231031204440182"></p><h2 id="NIO基础"><a href="#NIO基础" class="headerlink" title="NIO基础"></a>NIO基础</h2><blockquote><p>非阻塞io - non-blocking io</p></blockquote><h3 id="三大组件"><a href="#三大组件" class="headerlink" title="三大组件"></a>三大组件</h3><blockquote><p>Channel Buffer Selector</p></blockquote><ol><li><p>Channel &amp; Buffer</p><p>最常用的 Buffer： ByteBuffer</p><p>其他的不是很清楚</p></li><li><p>Selector</p><p>Selector相当于一个中转站， 来分发channel 发来的数据给thread<img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312106328.png" alt="image-20231031210625241"></p></li></ol><h3 id="bytebuffer"><a href="#bytebuffer" class="headerlink" title="bytebuffer"></a>bytebuffer</h3><h4 id="bytebuffer的基本使用"><a href="#bytebuffer的基本使用" class="headerlink" title="bytebuffer的基本使用"></a>bytebuffer的基本使用</h4><blockquote><p>代码如下</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String []args)</span>&#123;</span><br><span class="line">    <span class="keyword">try</span>(<span class="type">FileChannel</span> <span class="variable">channel</span>  <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;data.txt&quot;</span>).getChannel())&#123;</span><br><span class="line">        <span class="comment">// 准备缓冲区 </span></span><br><span class="line"><span class="type">ByteBuffer</span> <span class="variable">buffer</span> <span class="operator">=</span> ByteBuffer.allocate(<span class="number">10</span>)</span><br><span class="line">        <span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line">            <span class="comment">// 从channel 读取数据， 向buffer 写入</span></span><br><span class="line">            <span class="type">int</span> <span class="variable">len</span> <span class="operator">=</span> channel.read(buffer)</span><br><span class="line">            log.debug(xxx ,len);</span><br><span class="line">            <span class="keyword">if</span>(len == -<span class="number">1</span>)&#123; <span class="comment">//读取完成了 </span></span><br><span class="line">                <span class="keyword">break</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 打印</span></span><br><span class="line">            buffer.filp() <span class="comment">// 切换至读取模式</span></span><br><span class="line">            <span class="keyword">while</span>(buffer.hasRemaining())&#123;</span><br><span class="line">                <span class="type">byte</span> <span class="variable">b</span> <span class="operator">=</span> buffer.get() <span class="comment">//读取一个字节</span></span><br><span class="line">                log.debug(xxx, b);</span><br><span class="line">            &#125;</span><br><span class="line">            buffer.clear() <span class="comment">//切换换位写入模式</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;<span class="keyword">catch</span>(IOException e)&#123;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="Bytebuffer-结构"><a href="#Bytebuffer-结构" class="headerlink" title="Bytebuffer 结构"></a>Bytebuffer 结构</h4><blockquote><p>它有三个重要的属性</p></blockquote><ul><li>capacity</li><li>position</li><li>limit</li></ul><p>调用<strong>clear****方法</strong></p><ol><li><strong>默认是写模式</strong></li></ol><p>如图所示</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312134540.png" alt="image-20231031213414504"></p><p>position往后读取， 直到遇到 Limit 或者Capacity 。 </p><blockquote><p><strong>这里讲讲 Limit 和Capacity 的区别</strong></p><p><code>ByteBuffer buffer = ByteBuffer.allocate(10)</code>这句话就限制了它的Capacity 为 10。</p><p>在程序往后运行之后， limit 是小于等于 Capacity 的。 比如我这个文本是13个字节</p><p>那么第一次读取到的Limit 就是 10， 第二次读取是3.</p></blockquote><p>在调用buffer 的 <strong>flip方法</strong>之后</p><ol start="2"><li><strong>进入写模式</strong></li></ol><p>Position 指针跳回到第0位地址， 然后边向右移动， 边读取数据，直到遇到Limit </p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312140821.png" alt="image-20231031214014784"></p><p><strong>（调用Compact方法）</strong></p><ol start="3"><li>进入Compact模式</li></ol><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312142916.png" alt="image-20231031214211859"></p><p>和普通的读模式不同的是，<strong>在compact 模式中， position会将会写入的数据， 向前压缩</strong>。</p><p> 然后Position跳入到最后已读取数据的下一位地址继续读取</p><ul><li>需要注意的是 Compact 会不会消除最后一位数据，他会在写入模式的时候把那个字符覆盖</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310312156938.png" alt="image-20231031215648878"></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Netty </tag>
            
            <tag> Java </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Java_Juc</title>
      <link href="/2023/10/31/Java-Juc/"/>
      <url>/2023/10/31/Java-Juc/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="Java-Juc"><a href="#Java-Juc" class="headerlink" title="Java-Juc"></a>Java-Juc</h1><p>。。。 学完netty在来看这个吧！</p><blockquote><p>水一波 commit</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 多线程 </tag>
            
            <tag> 学习 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>远程mysql连接不上</title>
      <link href="/2023/10/30/%E8%BF%9C%E7%A8%8Bmysql%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A/"/>
      <url>/2023/10/30/%E8%BF%9C%E7%A8%8Bmysql%E8%BF%9E%E6%8E%A5%E4%B8%8D%E4%B8%8A/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="用户权限已经是-，但是远程数据库依旧连接不上"><a href="#用户权限已经是-，但是远程数据库依旧连接不上" class="headerlink" title="用户权限已经是%，但是远程数据库依旧连接不上"></a>用户权限已经是%，但是远程数据库依旧连接不上</h1><h2 id="问题"><a href="#问题" class="headerlink" title="问题"></a>问题</h2><p>最近趁着双11购买了腾讯云服务器，想着配置好环境，早点用上。</p><p>然后启动我的数据库 开始 狠狠的连接（误）， 结果都是timeout ？ ， 什么我明明已经设置了用户权限是%啊！</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301954484.png" alt="image-20231030195447448"></p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><p>后来思来想去， 突然想要去看看端口是不是3306， 然后想到中午打开腾讯云的时候，看到了端口？ 我才猛地意识到我的3306端口没有开启</p><blockquote><p>不过这个已经是开启后的了</p></blockquote><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301951278.png" alt="image-20231030195131182"></p><h3 id="开启端口方式"><a href="#开启端口方式" class="headerlink" title="开启端口方式"></a>开启端口方式</h3><ul><li>点击 添加规则</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301952077.png" alt="image-20231030195223035"></p><p>跳出来这个页面， 然后将应用类型的下拉框选择mysql ，就好了</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/ImgSummary@master/img/202310301952193.png" alt="image-20231030195259158"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> mysql </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>跨域请求解决-nginx服务器</title>
      <link href="/2023/10/28/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%A7%A3%E5%86%B3-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/"/>
      <url>/2023/10/28/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E8%A7%A3%E5%86%B3-nginx%E6%9C%8D%E5%8A%A1%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="跨域请求问题-nginx解决"><a href="#跨域请求问题-nginx解决" class="headerlink" title="跨域请求问题 - nginx解决"></a>跨域请求问题 - nginx解决</h1><ul><li>想象一个场景， 我在用vue3 vite 写前端（或者已经打包后的文件）， 同时后端用springboot ， 我写完一个功能想要调试， 但是遇到了下面这个问题</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282236940.png" alt="image-20231028223647903"></p><p>这就是跨域请求的会出现的问题。</p><h2 id="解决方法"><a href="#解决方法" class="headerlink" title="解决方法"></a>解决方法</h2><ul><li><p>我在网上看到了很多， 在前端配置一些文件， 在后端加上注解或添加一些配置类文件， 但是恰巧我的程序使用了上面种种方法都无法成功， 在舍友的提醒下， 我开始使用nginx</p></li><li><p>打开nginx 文件夹 打开conf</p></li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282239386.png" alt="image-20231028223957355"></p><ul><li>使用 vscode 打开 这个nginx.conf(最好不要使用文本编辑器)</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282240185.png" alt="image-20231028224030156"></p><ul><li>加上 这段代码</li></ul><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282241195.png" alt="image-20231028224109169"></p><p>我解释一下它的作用， 首先 nginx 有一个监听的端口， 这里就是180，（<strong>所以我们后续调试打开的地址就是180）</strong></p><p>然后 location &#x2F;api 就是你的路径以 api 开头的网址， 被转发到</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282242519.png" alt="image-20231028224242497"></p><p>同理 &#x2F;friend 就被转发到</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282243562.png" alt="image-20231028224303540"></p><p>其余的都被转发到 5173 端口。</p><blockquote><p>在这里 8080 端口是你后端程序的端口， 而5173可以换成你前端程序的端口</p></blockquote><p>而 &#x2F;api 和 &#x2F; friend 就是 我的前端的请求接口 一个是以api 开头一个是 friend开头 。</p><p>哦 对了， 我们还需要将前端的请求地址换成180端口</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282246671.png" alt="image-20231028224611652"></p><p> 这里根据你的nginx 监听的端口而定</p><p>然后打开localhost:180， 发现启动成功</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282247683.png" alt="image-20231028224751393"></p>]]></content>
      
      
      <categories>
          
          <category> 前后端 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> nginx </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>java实现文件上传和文件下载</title>
      <link href="/2023/10/28/java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/"/>
      <url>/2023/10/28/java%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0%E5%92%8C%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="写课设记录"><a href="#写课设记录" class="headerlink" title="写课设记录"></a>写课设记录</h1><ul><li></li></ul><h1 id="聊天系统课设难题"><a href="#聊天系统课设难题" class="headerlink" title="聊天系统课设难题"></a>聊天系统课设难题</h1><h2 id="文件上传-base64"><a href="#文件上传-base64" class="headerlink" title="文件上传-base64"></a>文件上传-base64</h2><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">String</span> <span class="variable">basepath</span> <span class="operator">=</span><span class="string">&quot;D:\\fileandpicture\\&quot;</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">@PostMapping(&quot;/upload&quot;)</span></span><br><span class="line"><span class="comment">// 现在这个message的msg里面存储了一个base64的数据，它是用来存储文件的</span></span><br><span class="line"><span class="keyword">public</span> R&lt;String&gt; <span class="title function_">upload</span><span class="params">(<span class="meta">@RequestBody</span> Message message)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line"> <span class="comment">//获取它的文件名称</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">curpath</span> <span class="operator">=</span> basepath + message.getFileName();</span><br><span class="line">    <span class="comment">//获取它的base64实际的内容， base64逗号之前的是文件的格式,后面才是真正的内容</span></span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(curpath);</span><br><span class="line">    <span class="keyword">if</span>(file.exists()) file.mkdir();</span><br><span class="line">    <span class="type">FileOutputStream</span> <span class="variable">stream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(file);</span><br><span class="line">    <span class="type">String</span> <span class="variable">base64String</span> <span class="operator">=</span> message.getMsg();</span><br><span class="line">    String []parts = base64String.split(<span class="string">&quot;,&quot;</span>);</span><br><span class="line">    <span class="type">String</span> <span class="variable">base64Data</span> <span class="operator">=</span> parts[<span class="number">1</span>];</span><br><span class="line">    <span class="comment">// 转换为字节数组</span></span><br><span class="line">    <span class="type">byte</span>[] data = Base64.getDecoder().decode(base64Data);</span><br><span class="line">    <span class="comment">// 写入到 本地中（然后存入把它的名字存入到数据库中）</span></span><br><span class="line">    stream.write(data);</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> xxx;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="文件下载-点击文件之后可下载"><a href="#文件下载-点击文件之后可下载" class="headerlink" title="文件下载 - 点击文件之后可下载"></a>文件下载 - 点击文件之后可下载</h2><h3 id="后端-java"><a href="#后端-java" class="headerlink" title="后端 - java"></a>后端 - java</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@GetMapping(&quot;/downloadfile&quot;)</span></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">downloadFile</span><span class="params">(HttpServletResponse response, HttpServletRequest request, String fileName, String extend)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">JSONObject</span> <span class="variable">result</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    <span class="type">File</span> <span class="variable">file</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">File</span>(basepath + fileName);</span><br><span class="line">    <span class="keyword">if</span> (!file.exists()) &#123;</span><br><span class="line">        result.put(<span class="string">&quot;error&quot;</span>, <span class="string">&quot;下载的文件不存在&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> result.toString();</span><br><span class="line">    &#125;</span><br><span class="line">    response.reset();</span><br><span class="line">    response.setContentType(extend);</span><br><span class="line">    response.setCharacterEncoding(<span class="string">&quot;utf-8&quot;</span>);</span><br><span class="line">    response.setContentLength((<span class="type">int</span>) file.length());</span><br><span class="line">    <span class="comment">//这个是为了防止中文名称的问题</span></span><br><span class="line">    response.setHeader(<span class="string">&quot;Content-Disposition&quot;</span>, <span class="string">&quot;attachment;filename=&quot;</span> + URLEncoder.encode(file.getName(), <span class="string">&quot;UTF-8&quot;</span>));</span><br><span class="line">    <span class="type">byte</span>[] readeBytes = FileUtil.readBytes(file);</span><br><span class="line">    <span class="comment">// 写入到request 的 输出流中</span></span><br><span class="line">    <span class="type">OutputStream</span> <span class="variable">os</span> <span class="operator">=</span> response.getOutputStream();</span><br><span class="line">    os.write(readeBytes);</span><br><span class="line">    result.put(<span class="string">&quot;success&quot;</span>, <span class="string">&quot;下载成功&quot;</span>);</span><br><span class="line">    <span class="keyword">return</span> result.toString();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="前端-vue"><a href="#前端-vue" class="headerlink" title="前端 - vue"></a>前端 - vue</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// api/download 就是 上面后端download的地址</span></span><br><span class="line">axios.<span class="title function_">get</span>(baseUrl + <span class="string">&quot;/api/downloadfile&quot;</span>, &#123;</span><br><span class="line">    <span class="attr">params</span>: &#123;</span><br><span class="line">        <span class="attr">fileName</span>: item.<span class="property">fileName</span>,</span><br><span class="line">        <span class="attr">extend</span>: item.<span class="property">extend</span></span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="comment">// 注意这里一定要写arraybuffer， 不然可能会出错</span></span><br><span class="line">    <span class="attr">responseType</span>: <span class="string">&quot;arraybuffer&quot;</span></span><br><span class="line">&#125;)</span><br><span class="line"><span class="comment">// 先转换为 Blob类型</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">res</span>=&gt;</span><span class="keyword">new</span> <span class="title class_">Blob</span>([res], &#123;<span class="attr">type</span>: item.<span class="property">extend</span>&#125;))</span><br><span class="line"><span class="comment">// 在转换为 File类型</span></span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">blob</span>=&gt;</span> <span class="keyword">new</span> <span class="title class_">File</span>([blob], item.<span class="property">fileName</span>))</span><br><span class="line">    .<span class="title function_">then</span>(<span class="function"><span class="params">file</span>=&gt;</span>&#123;</span><br><span class="line">        item.<span class="property">msg</span> = file</span><br><span class="line">        <span class="keyword">let</span> reader = <span class="keyword">new</span> <span class="title class_">FileReader</span>()</span><br><span class="line">        <span class="keyword">let</span> fileNameTemp = item.<span class="property">fileName</span></span><br><span class="line">        reader.<span class="property">onloadend</span> = <span class="function">(<span class="params">es</span>)=&gt;</span>&#123;</span><br><span class="line">            item.<span class="property">msg</span> = es.<span class="property">target</span>.<span class="property">result</span></span><br><span class="line">            item.<span class="property">fileName</span> = fileNameTemp</span><br><span class="line">            <span class="variable language_">console</span>.<span class="title function_">log</span>(item.<span class="property">msg</span>)</span><br><span class="line"></span><br><span class="line">            <span class="keyword">if</span>(item.<span class="property">chatType</span> === <span class="number">1</span>)&#123;</span><br><span class="line">                srcImgList.<span class="property">value</span>.<span class="title function_">push</span>(item.<span class="property">msg</span>)</span><br><span class="line">            &#125;</span><br><span class="line">     &#125;</span><br><span class="line">    reader.<span class="title function_">readAsDataURL</span>(file)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><h2 id="断点续传"><a href="#断点续传" class="headerlink" title="断点续传"></a>断点续传</h2><p>正在编写 。。。</p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Java </tag>
            
            <tag> 疑难解惑 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Picgo和GitHub搭建的问题</title>
      <link href="/2023/10/28/Picgo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E7%9A%84%E9%97%AE%E9%A2%98/"/>
      <url>/2023/10/28/Picgo%E5%92%8CGitHub%E6%90%AD%E5%BB%BA%E7%9A%84%E9%97%AE%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<span id="more"></span><h1 id="报错403"><a href="#报错403" class="headerlink" title="报错403"></a>报错403</h1><p>将github 作为 图床的时候出现了问题，打开日志文档一看， 报错403， 在网上搜寻无果。</p><p>然后回想起在github 生成token的时候没有点击任何选项</p><p><img src="https://cdn.jsdelivr.net/gh/Alanyaeer/web-component@master/assets/202310282025158.png" alt="image-20231028202525111"></p><p>将这个repo 勾选之后， 发送图片成功</p>]]></content>
      
      
      <categories>
          
          <category> Hexo </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 疑难解惑 </tag>
            
            <tag> github 图床 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
